import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,e as i,o as a}from"./app-CoIghhma.js";const r={};function l(o,e){return a(),n("div",null,e[0]||(e[0]=[i('<hr><div class="hint-container info"><p class="hint-container-title">相关信息</p><p>设计模式-结构性模式-桥接模式</p></div><hr><h3 id="动机" tabindex="-1"><a class="header-anchor" href="#动机"><span>动机</span></a></h3><p>需要创建不同的图形，并且每个图形都有可能会有不同的颜色。我们可以利用继承的方式来设计类的关系</p><figure><img src="https://drawingbed-686.pages.dev/myblog/202411101510116.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>用继承方式会造成类爆炸</p><h3 id="定义" tabindex="-1"><a class="header-anchor" href="#定义"><span>定义</span></a></h3><p><strong>将抽象与实现分离，使它们可以独立变化。它是用组合关系代替继承关系来实现，从而降低了抽象和实现这两个可变维度的耦合度。</strong></p><h3 id="结构" tabindex="-1"><a class="header-anchor" href="#结构"><span>结构</span></a></h3><p>桥接（Bridge）模式包含以下主要角色：</p><ul><li><strong>抽象化（Abstraction）角色</strong> ：定义抽象类，并包含一个对实现化对象的引用。</li><li><strong>扩展抽象化（Refined Abstraction）角色</strong> ：是抽象化角色的子类，实现父类中的业务方法，并通过组合关系调用实现化角色中的业务方法。</li><li><strong>实现化（Implementor）角色</strong> ：定义实现化角色的接口，供扩展抽象化角色调用。</li><li><strong>具体实现化（Concrete Implementor）角色</strong> ：给出实现化角色接口的具体实现。</li></ul><h3 id="uml" tabindex="-1"><a class="header-anchor" href="#uml"><span>UML</span></a></h3><figure><img src="https://drawingbed-686.pages.dev/myblog/202411101510730.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="实现案例" tabindex="-1"><a class="header-anchor" href="#实现案例"><span>实现案例</span></a></h3><p>【例】视频播放器</p><p>需要开发一个跨平台视频播放器，可以在不同操作系统平台（如Windows、Mac、Linux等）上播放多种格式的视频文件，常见的视频格式包括RMVB、AVI、WMV等。该播放器包含了两个维度，适合使用桥接模式。</p><figure><img src="https://drawingbed-686.pages.dev/myblog/202411101510094.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>优缺点</p><p><strong>好处：</strong></p><ul><li><p><strong>桥接模式提高了系统的可扩充性</strong></p><p>在两个变化维度中任意扩展一个维度，都不需要修改原有系统。</p><p>如：如果现在还有一种视频文件类型wmv，我们只需要再定义一个类实现VideoFile接口即可，其他类不需要发生变化。</p></li><li><p><strong>实现细节对客户透明</strong></p></li></ul><h3 id="适用场景" tabindex="-1"><a class="header-anchor" href="#适用场景"><span>适用场景</span></a></h3><ul><li>当一个类存在两个独立变化的维度，且这两个维度都需要进行扩展时。</li><li>当一个系统不希望使用继承或因为多层次继承导致系统类的个数急剧增加时。</li><li>当一个系统需要在构件的抽象化角色和具体化角色之间增加更多的灵活性时。避免在两个层次之间建立静态的继承联系，通过桥接模式可以使它们在抽象层建立一个关联关系。</li></ul>',23)]))}const g=t(r,[["render",l],["__file","d_bridge.html.vue"]]),d=JSON.parse('{"path":"/notes/designPattern/c_structural/d_bridge.html","title":"桥接模式","lang":"zh-CN","frontmatter":{"icon":"","description":"相关信息 设计模式-结构性模式-桥接模式 动机 需要创建不同的图形，并且每个图形都有可能会有不同的颜色。我们可以利用继承的方式来设计类的关系 用继承方式会造成类爆炸 定义 将抽象与实现分离，使它们可以独立变化。它是用组合关系代替继承关系来实现，从而降低了抽象和实现这两个可变维度的耦合度。 结构 桥接（Bridge）模式包含以下主要角色： 抽象化（Abs...","title":"桥接模式","date":"2024-11-11T00:00:00.000Z","category":["设计模式"],"tag":["结构性模式","桥接模式"],"order":4,"head":[["meta",{"property":"og:url","content":"https://he9.xin/notes/designPattern/c_structural/d_bridge.html"}],["meta",{"property":"og:site_name","content":"春风不语即随本心"}],["meta",{"property":"og:title","content":"桥接模式"}],["meta",{"property":"og:description","content":"相关信息 设计模式-结构性模式-桥接模式 动机 需要创建不同的图形，并且每个图形都有可能会有不同的颜色。我们可以利用继承的方式来设计类的关系 用继承方式会造成类爆炸 定义 将抽象与实现分离，使它们可以独立变化。它是用组合关系代替继承关系来实现，从而降低了抽象和实现这两个可变维度的耦合度。 结构 桥接（Bridge）模式包含以下主要角色： 抽象化（Abs..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://drawingbed-686.pages.dev/myblog/202411101510116.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-11-10T07:58:30.000Z"}],["meta",{"property":"article:author","content":"ErenJaegerKing"}],["meta",{"property":"article:tag","content":"结构性模式"}],["meta",{"property":"article:tag","content":"桥接模式"}],["meta",{"property":"article:published_time","content":"2024-11-11T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-11-10T07:58:30.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"桥接模式\\",\\"image\\":[\\"https://drawingbed-686.pages.dev/myblog/202411101510116.png\\",\\"https://drawingbed-686.pages.dev/myblog/202411101510730.png\\",\\"https://drawingbed-686.pages.dev/myblog/202411101510094.png\\"],\\"datePublished\\":\\"2024-11-11T00:00:00.000Z\\",\\"dateModified\\":\\"2024-11-10T07:58:30.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"ErenJaegerKing\\",\\"url\\":\\"https://he9.xin\\",\\"email\\":\\"erenjaegerking@qq.com\\"}]}"]]},"headers":[{"level":3,"title":"动机","slug":"动机","link":"#动机","children":[]},{"level":3,"title":"定义","slug":"定义","link":"#定义","children":[]},{"level":3,"title":"结构","slug":"结构","link":"#结构","children":[]},{"level":3,"title":"UML","slug":"uml","link":"#uml","children":[]},{"level":3,"title":"实现案例","slug":"实现案例","link":"#实现案例","children":[]},{"level":3,"title":"适用场景","slug":"适用场景","link":"#适用场景","children":[]}],"git":{"createdTime":1730726433000,"updatedTime":1731225510000,"contributors":[{"name":"LiYaoYu","email":"ErenJaegerKing@qq.com","commits":4}]},"readingTime":{"minutes":2.08,"words":624},"filePathRelative":"notes/designPattern/c_structural/d_bridge.md","localizedDate":"2024年11月11日","excerpt":"<hr>\\n<div class=\\"hint-container info\\">\\n<p class=\\"hint-container-title\\">相关信息</p>\\n<p>设计模式-结构性模式-桥接模式</p>\\n</div>\\n<hr>\\n<h3>动机</h3>\\n<p>需要创建不同的图形，并且每个图形都有可能会有不同的颜色。我们可以利用继承的方式来设计类的关系</p>\\n<figure><img src=\\"https://drawingbed-686.pages.dev/myblog/202411101510116.png\\" alt=\\"\\" tabindex=\\"0\\" loading=\\"lazy\\"><figcaption></figcaption></figure>","autoDesc":true}');export{g as comp,d as data};
