import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,e as a,o as l}from"./app-B5_fYflW.js";const d={};function n(r,e){return l(),s("div",null,e[0]||(e[0]=[a(`<h2 id="redis基础" tabindex="-1"><a class="header-anchor" href="#redis基础"><span>Redis基础</span></a></h2><h3 id="什么是redis" tabindex="-1"><a class="header-anchor" href="#什么是redis"><span>什么是Redis？</span></a></h3><p>Redis是一个基于c语言开发的开源非关系型数据库。</p><h3 id="redis为什么这么快" tabindex="-1"><a class="header-anchor" href="#redis为什么这么快"><span>Redis为什么这么快？</span></a></h3><ol><li>Redis基于内存，内存的访问速度比磁盘快很多。</li><li>Redis基于Reactor模型设计开发了一套高效的事件处理模型，主要是单线程事件循环和IO多路复用。</li><li>Redis内置了多种优化后的数据类型/结构，性能非常高。</li><li>Redis通信协议实现简单且解析高效。</li></ol><h3 id="除了-redis-你还知道其他分布式缓存方案吗" tabindex="-1"><a class="header-anchor" href="#除了-redis-你还知道其他分布式缓存方案吗"><span>除了 Redis，你还知道其他分布式缓存方案吗？</span></a></h3><p>memcacheed</p><p>tendis</p><p>dragonfly</p><p>keydb</p><h3 id="说一下-redis-和-memcached-的区别和共同点" tabindex="-1"><a class="header-anchor" href="#说一下-redis-和-memcached-的区别和共同点"><span>说一下 Redis 和 Memcached 的区别和共同点</span></a></h3><p>相同点：</p><ol><li>都是基于内存的数据库，一般都用来当做缓存使用。</li><li>都有过期策略。</li><li>两者的性能都非常高。</li></ol><p>区别：</p><ol><li>数据类型：Redis支持更丰富的数据类型，Memcached只支持最简单的k/v数据类型。Redis还支持 list set hash zset等数据结构的支持。</li><li>数据持久化：Redis支持数据持久化，可以将内存中的数据保持在磁盘中，重启的时候可以再次加载进行使用，而Memcached把数据全部存在内存之中。</li><li>集群模式支持：Redis支持，Memcached不支持。</li><li>线程模型：Memcached是多线程，非阻塞IO复用的网络模型。Redis使用单线程的多路IO复用模型。</li><li>特性支持：Redis支持发布订阅模型、Lua脚本、事务等功能，而Memcached不支持。</li><li>过期数据删除：Memcached过期数据的删除策略只用了惰性删除，而Redis同时了惰性删除与定期删除。</li></ol><h3 id="为什么要用-redis" tabindex="-1"><a class="header-anchor" href="#为什么要用-redis"><span>为什么要用 Redis？</span></a></h3><ol><li>访问速度快，Redis基于内存的</li><li>高并发，一般像MySQL这类的数据库的QPS大概都在4K左右(4核8g)，但是使用了Redis缓存之后很容易达到5w+，甚至能达到10w+。</li><li>功能全面，Redis除了用作缓存之外，还可以用于分布式锁、限流、消息队列、延时队列等场景。</li></ol><h3 id="常见的缓存读写策略有哪些" tabindex="-1"><a class="header-anchor" href="#常见的缓存读写策略有哪些"><span>常见的缓存读写策略有哪些？</span></a></h3><p>重点</p><h2 id="redis应用" tabindex="-1"><a class="header-anchor" href="#redis应用"><span>Redis应用</span></a></h2><h3 id="redis-除了做缓存-还能做什么" tabindex="-1"><a class="header-anchor" href="#redis-除了做缓存-还能做什么"><span>Redis 除了做缓存，还能做什么？</span></a></h3><p>分布式锁：常见的方法。通常是直接用Redission来实现分布式锁的</p><p>限流：Redis + Lua</p><p>消息队列：List数据结构 或者 Redis5.0增加的Stream</p><p>延时队列：Redission内置了延时队列 ZSet</p><p>分布式Session：String Hash数据类型保存Session数据</p><p>复杂业务场景：Bitmap统计活跃用户、ZSet维护排行榜</p><h3 id="如何基于-redis-实现分布式锁" tabindex="-1"><a class="header-anchor" href="#如何基于-redis-实现分布式锁"><span>如何基于 Redis 实现分布式锁？</span></a></h3><p>在Redis中，SETNX命令就是set if not exists（对应Java中的setIfAbsent方法），如果key不存在的话，才会设置key的值。如果key已经存在，setnx啥也不做。</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">sentx</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> lockkey</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> uniqueValue</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">1</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">sentx</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> lockkey</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> uniqueValue</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">0</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>怎么释放锁，直接通过DEL命令删除对应的key即可?</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">del</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> lockkey</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">1</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>为了防止误删其他锁，这里使用Lua脚本保证锁操作的原子性。因为Redis在执行Lua脚本时，可以以原子性的方式执行，从而保证了锁释放操作的原子性。</p><div class="language-lua line-numbers-mode" data-highlighter="shiki" data-ext="lua" data-title="lua" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">// 释放锁时，先比较锁对应的value值是否相等，避免锁的误释放</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">if</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> redis</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">call</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;get&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">KEYS</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]) == </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">ARGV</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">then</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> redis</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">call</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;del&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">KEYS</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">])</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">else</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">end</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="redis-可以做消息队列么" tabindex="-1"><a class="header-anchor" href="#redis-可以做消息队列么"><span>Redis 可以做消息队列么？</span></a></h3><p>可以，但是不建议。</p><p>List RPUSH/LPOP 可以实现简易版消息队列</p><h3 id="redis-可以做搜索引擎么" tabindex="-1"><a class="header-anchor" href="#redis-可以做搜索引擎么"><span>Redis 可以做搜索引擎么？</span></a></h3><p>我要用Elasticsearch</p><h3 id="如何基于-redis-实现延时任务" tabindex="-1"><a class="header-anchor" href="#如何基于-redis-实现延时任务"><span>如何基于 Redis 实现延时任务？</span></a></h3><p>不推荐，可以再看</p><h2 id="redis-数据类型" tabindex="-1"><a class="header-anchor" href="#redis-数据类型"><span>Redis 数据类型</span></a></h2><h3 id="redis-常用的数据类型有哪些" tabindex="-1"><a class="header-anchor" href="#redis-常用的数据类型有哪些"><span>Redis 常用的数据类型有哪些？</span></a></h3><p>5种基础数据结构：字符串、列表、集合、有序集合、散列</p><p>3种特殊数据类型：基数统计、位图、地理位置</p><h3 id="string-的应用场景有哪些" tabindex="-1"><a class="header-anchor" href="#string-的应用场景有哪些"><span>String 的应用场景有哪些？</span></a></h3><ul><li>常规数据（Session、Token、序列化后的对象、图片的路径）的缓存</li><li>计数比如用户单位时间的请求数、页面单位时间的访问数</li><li>分布式锁（利用sentx key value命令简单实现一个分布式锁）</li></ul><h3 id="string-还是-hash-存储对象数据更好呢" tabindex="-1"><a class="header-anchor" href="#string-还是-hash-存储对象数据更好呢"><span>String 还是 Hash 存储对象数据更好呢？</span></a></h3><ul><li>在绝大多数情况下，String更适合存储对象数据，尤其是当对象结构简单且整体读写是主要操作时。</li><li>如果你需要频繁操作对象的部分字段或节省内存，Hash可能是更好的选择。</li></ul><h3 id="string-的底层实现是什么" tabindex="-1"><a class="header-anchor" href="#string-的底层实现是什么"><span>String 的底层实现是什么？</span></a></h3><p>未来攻破</p><h3 id="购物车信息用-string-还是-hash-存储更好呢" tabindex="-1"><a class="header-anchor" href="#购物车信息用-string-还是-hash-存储更好呢"><span>购物车信息用 String 还是 Hash 存储更好呢?</span></a></h3><p>由于购物车的商品类别与数量频繁进行修改和变动，建议使用Hash存储：</p><p>用户id为key 商品id为field，商品数量为value</p><p>怎么维护？</p><ul><li>用户添加商品就是往hash中添加新的filed与value</li><li>查询购物车就是遍历对应的hash</li><li>更改商品的数量就是直接修改对应value值</li><li>删除商品就是删除hash中对应的field</li><li>清空购物车直接删除对应的key即可</li></ul><h3 id="使用-redis-实现一个排行榜怎么做" tabindex="-1"><a class="header-anchor" href="#使用-redis-实现一个排行榜怎么做"><span>使用 Redis 实现一个排行榜怎么做？</span></a></h3><p>ZSet有序集合。</p><p>zrange(升序)、zrevrange（降序）、zrevrank（指定元素排名）</p><h3 id="redis-的有序集合底层为什么要用跳表-而不用平衡树、红黑树或者-b-树" tabindex="-1"><a class="header-anchor" href="#redis-的有序集合底层为什么要用跳表-而不用平衡树、红黑树或者-b-树"><span>Redis 的有序集合底层为什么要用跳表，而不用平衡树、红黑树或者 B+树？</span></a></h3><p>难度太大了</p><h3 id="set-的应用场景是什么" tabindex="-1"><a class="header-anchor" href="#set-的应用场景是什么"><span>Set 的应用场景是什么？</span></a></h3><p>无序集合，集合中的元素没有先后顺序且都是唯一。</p><ul><li>存放的数据不能重复的场景：网站UV统计、文章点赞、动态点赞</li><li>需要获取多个数据源交集、并集和差集的场景：共同好友（交集）、共同粉丝（交集）、共同关注（交集）</li><li>需要随机获取数据源中的元素的场景：抽奖系统、随机点名</li></ul><h3 id="使用-set-实现抽奖系统怎么做" tabindex="-1"><a class="header-anchor" href="#使用-set-实现抽奖系统怎么做"><span>使用 Set 实现抽奖系统怎么做？</span></a></h3><p>实操一下</p><h3 id="使用-bitmap-统计活跃用户怎么做" tabindex="-1"><a class="header-anchor" href="#使用-bitmap-统计活跃用户怎么做"><span>使用 Bitmap 统计活跃用户怎么做？</span></a></h3><p>实操一下</p><h3 id="使用-hyperloglog-统计页面-uv-怎么做" tabindex="-1"><a class="header-anchor" href="#使用-hyperloglog-统计页面-uv-怎么做"><span>使用 HyperLogLog 统计页面 UV 怎么做？</span></a></h3><p>实操一下</p><h2 id="redis-持久化机制-重要" tabindex="-1"><a class="header-anchor" href="#redis-持久化机制-重要"><span>Redis 持久化机制（重要）</span></a></h2><p>Redis 持久化机制（RDB 持久化、AOF 持久化、RDB 和 AOF 的混合持久化）</p><h2 id="redis-线程模型-重要" tabindex="-1"><a class="header-anchor" href="#redis-线程模型-重要"><span>Redis 线程模型（重要）</span></a></h2><h3 id="redis-单线程模型了解吗" tabindex="-1"><a class="header-anchor" href="#redis-单线程模型了解吗"><span>Redis 单线程模型了解吗？</span></a></h3><p>Redis 基于 Reactor 模式设计开发了一套高效的事件处理模型。</p><p>IO多路复用技术的使用让Redis不需要额外创建多余的线程来监听客户端的大量连接，降低了资源的消耗。</p><h3 id="redis6-0-之前为什么不使用多线程" tabindex="-1"><a class="header-anchor" href="#redis6-0-之前为什么不使用多线程"><span>Redis6.0 之前为什么不使用多线程？</span></a></h3><p>不了解</p><h3 id="redis6-0-之后为何引入了多线程" tabindex="-1"><a class="header-anchor" href="#redis6-0-之后为何引入了多线程"><span>Redis6.0 之后为何引入了多线程？</span></a></h3><p>不了解</p><h3 id="redis-后台线程了解吗" tabindex="-1"><a class="header-anchor" href="#redis-后台线程了解吗"><span>Redis 后台线程了解吗？</span></a></h3><p>不了解</p><h2 id="redis内存管理" tabindex="-1"><a class="header-anchor" href="#redis内存管理"><span>Redis内存管理</span></a></h2><h3 id="redis-给缓存数据设置过期时间有什么用" tabindex="-1"><a class="header-anchor" href="#redis-给缓存数据设置过期时间有什么用"><span>Redis 给缓存数据设置过期时间有什么用？</span></a></h3><p>内存是非常宝贵的，如果不对缓存数据设置过期时间，那么内存占用就会一直增长，最终可能会导致OOM问题。通过设置合理的过期时间，Redis会自动删除暂时不需要的数据，为新的缓存数据腾出空间</p><p>过期时间除了有助于缓解内存的消耗，还有什么其他用么？5分钟的验证码 用户登录的Token在一天内有效</p><h3 id="redis-是如何判断数据是否过期的呢" tabindex="-1"><a class="header-anchor" href="#redis-是如何判断数据是否过期的呢"><span>Redis 是如何判断数据是否过期的呢？</span></a></h3><p>Redis是通过一个叫做过期字典（可以看作是hash表）来保存数据过期的时间。</p><p>过期字典的键指向Redis数据中的某个key（键），过期字典的值是一个long long类型的整数，这个整数保存了key所指向的数据库键的过期时间（毫秒精度的UNIX时间戳）</p><p>在查询一个key的时候，Redis首先检查该key是否存在于过期字典中（时间复杂度为O(1)），如果不在就直接返回，在的话需要判断一下这个key是否过期，过期直接删除key然后返回null</p><h3 id="redis-过期-key-删除策略了解么" tabindex="-1"><a class="header-anchor" href="#redis-过期-key-删除策略了解么"><span>Redis 过期 key 删除策略了解么？</span></a></h3><p>Redis 采用的那种删除策略呢？ 定期删除+惰性删除。定期删除对内存更加友好，惰性删除对 CPU 更加友好。两者各有千秋，结合起来使用既能兼顾 CPU 友好，又能兼顾内存友好。</p><p>Redis的定期删除过程是随机的，会周期地随机从设置了过期时间的key中抽查一批。Redis底层通过限制删除操作执行的时长和频率来减少删除操作对CPU时间的影响</p><p>每次随机抽查数量是多少？expire.c中定义了每次随机抽查的数量，Redis 7.2 版本为 20 ，也就是说每次会随机选择 20 个设置了过期时间的 key 判断是否过期。</p><p>如何控制定期删除的执行频率？在 Redis 中，定期删除的频率是由 hz 参数控制的。hz 默认为 10，代表每秒执行 10 次，也就是每秒钟进行 10 次尝试来查找并删除过期的 key。</p><p>为什么定期删除不是把所有过期 key 都删除呢？这样会对性能造成太大的影响。如果我们 key 数量非常庞大的话，挨个遍历检查是非常耗时的，会严重影响性能。Redis 设计这种策略的目的是为了平衡内存和性能。</p><h3 id="为什么-key-过期之后不立马把它删掉呢-这样不是会浪费很多内存空间吗" tabindex="-1"><a class="header-anchor" href="#为什么-key-过期之后不立马把它删掉呢-这样不是会浪费很多内存空间吗"><span>为什么 key 过期之后不立马把它删掉呢？这样不是会浪费很多内存空间吗？</span></a></h3><p>因为不太好办到，或者说这种删除方式的成本太高了。</p><h3 id="大量-key-集中过期怎么办" tabindex="-1"><a class="header-anchor" href="#大量-key-集中过期怎么办"><span>大量 key 集中过期怎么办？</span></a></h3><p>大量key集中过期的话会导致以下问题</p><ul><li>请求延迟增加：Redis在处理过期的key时需要消耗cpu资源，如果过期key数量庞大，会导致redis实例的cpu占用率升高，进而影响其他请求的处理速度，造成延增加。</li><li>内存占用过高：过期的key虽然已经失效，但是Redis在真正删除它们之前，仍然会占用内存空间。如果过期key没有及时清理，可能导致内存占用过高，甚至引发内存溢出</li></ul><p>解决方案</p><ul><li>尽量避免key集中过期：在设置键的过期时间时尽量随机一些</li><li>开启lazy free机制：修改 redis.conf 配置文件，将 lazyfree-lazy-expire 参数设置为 yes，即可开启 lazy free 机制。开启 lazy free 机制后，Redis 会在后台异步删除过期的 key，不会阻塞主线程的运行，从而降低对 Redis 性能的影响。</li></ul><h3 id="redis-内存淘汰策略了解么" tabindex="-1"><a class="header-anchor" href="#redis-内存淘汰策略了解么"><span>Redis 内存淘汰策略了解么？</span></a></h3><p>Redis 的内存淘汰策略只有在运行内存达到了配置的最大内存阈值时才会触发</p><p>这个阈值是通过redis.conf的maxmemory参数来定义的。（64 位操作系统下，maxmemory 默认为 0 ，表示不限制内存大小。32 位操作系统下，默认的最大内存值是 3GB。）</p><ol><li>volatile-lru（least recently used）：从已设置过期时间的数据集 挑选最近最少使用的数据淘汰</li><li>volatile-ttl：从已设置过期时间的数据集 挑选将要过期的数据淘汰</li><li>volatile-random：从已设置过期时间的数据集 任意选择数据淘汰</li><li>volatile-lfu（least frequently used）: 从已设置过期时间的数据集 挑选最不经常使用的数据淘汰。</li><li>allkeys-lru（least recently used）：从数据集中移除最近最少使用的数据淘汰。</li><li>allkeys-random：从数据集中移除最近最少使用的数据淘汰。</li><li>allkeys-lfu（least frequently used）:从数据集中移除最不经常使用的数据淘汰。</li><li>no-eviction（默认内存淘汰策略）：禁止驱逐数据，当内存不足以容纳新写入数据时，新写入操作会报错。</li></ol><h2 id="redis事务" tabindex="-1"><a class="header-anchor" href="#redis事务"><span>Redis事务</span></a></h2><h2 id="redis性能优化-重要" tabindex="-1"><a class="header-anchor" href="#redis性能优化-重要"><span>Redis性能优化（重要）</span></a></h2><h2 id="redis生产问题-重要" tabindex="-1"><a class="header-anchor" href="#redis生产问题-重要"><span>Redis生产问题（重要）</span></a></h2><h2 id="redis集群" tabindex="-1"><a class="header-anchor" href="#redis集群"><span>Redis集群</span></a></h2><h2 id="redis-使用规范" tabindex="-1"><a class="header-anchor" href="#redis-使用规范"><span>Redis 使用规范</span></a></h2>`,112)]))}const p=i(d,[["render",n],["__file","redis-javaguide.html.vue"]]),c=JSON.parse('{"path":"/notes/database/b_redis/redis-javaguide.html","title":"Redis-javaguide","lang":"zh-CN","frontmatter":{"icon":"","description":"Redis基础 什么是Redis？ Redis是一个基于c语言开发的开源非关系型数据库。 Redis为什么这么快？ Redis基于内存，内存的访问速度比磁盘快很多。 Redis基于Reactor模型设计开发了一套高效的事件处理模型，主要是单线程事件循环和IO多路复用。 Redis内置了多种优化后的数据类型/结构，性能非常高。 Redis通信协议实现简单...","title":"Redis-javaguide","date":"2025-01-01T00:00:00.000Z","category":["数据库"],"tag":["Redis"],"order":3,"head":[["meta",{"property":"og:url","content":"https://he9.xin/notes/database/b_redis/redis-javaguide.html"}],["meta",{"property":"og:site_name","content":"春风不语即随本心"}],["meta",{"property":"og:title","content":"Redis-javaguide"}],["meta",{"property":"og:description","content":"Redis基础 什么是Redis？ Redis是一个基于c语言开发的开源非关系型数据库。 Redis为什么这么快？ Redis基于内存，内存的访问速度比磁盘快很多。 Redis基于Reactor模型设计开发了一套高效的事件处理模型，主要是单线程事件循环和IO多路复用。 Redis内置了多种优化后的数据类型/结构，性能非常高。 Redis通信协议实现简单..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-03-14T15:09:48.000Z"}],["meta",{"property":"article:author","content":"ErenJaegerKing"}],["meta",{"property":"article:tag","content":"Redis"}],["meta",{"property":"article:published_time","content":"2025-01-01T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-03-14T15:09:48.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Redis-javaguide\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-01-01T00:00:00.000Z\\",\\"dateModified\\":\\"2025-03-14T15:09:48.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"ErenJaegerKing\\",\\"url\\":\\"https://he9.xin\\",\\"email\\":\\"erenjaegerking@qq.com\\"}]}"]]},"headers":[{"level":2,"title":"Redis基础","slug":"redis基础","link":"#redis基础","children":[{"level":3,"title":"什么是Redis？","slug":"什么是redis","link":"#什么是redis","children":[]},{"level":3,"title":"Redis为什么这么快？","slug":"redis为什么这么快","link":"#redis为什么这么快","children":[]},{"level":3,"title":"除了 Redis，你还知道其他分布式缓存方案吗？","slug":"除了-redis-你还知道其他分布式缓存方案吗","link":"#除了-redis-你还知道其他分布式缓存方案吗","children":[]},{"level":3,"title":"说一下 Redis 和 Memcached 的区别和共同点","slug":"说一下-redis-和-memcached-的区别和共同点","link":"#说一下-redis-和-memcached-的区别和共同点","children":[]},{"level":3,"title":"为什么要用 Redis？","slug":"为什么要用-redis","link":"#为什么要用-redis","children":[]},{"level":3,"title":"常见的缓存读写策略有哪些？","slug":"常见的缓存读写策略有哪些","link":"#常见的缓存读写策略有哪些","children":[]}]},{"level":2,"title":"Redis应用","slug":"redis应用","link":"#redis应用","children":[{"level":3,"title":"Redis 除了做缓存，还能做什么？","slug":"redis-除了做缓存-还能做什么","link":"#redis-除了做缓存-还能做什么","children":[]},{"level":3,"title":"如何基于 Redis 实现分布式锁？","slug":"如何基于-redis-实现分布式锁","link":"#如何基于-redis-实现分布式锁","children":[]},{"level":3,"title":"Redis 可以做消息队列么？","slug":"redis-可以做消息队列么","link":"#redis-可以做消息队列么","children":[]},{"level":3,"title":"Redis 可以做搜索引擎么？","slug":"redis-可以做搜索引擎么","link":"#redis-可以做搜索引擎么","children":[]},{"level":3,"title":"如何基于 Redis 实现延时任务？","slug":"如何基于-redis-实现延时任务","link":"#如何基于-redis-实现延时任务","children":[]}]},{"level":2,"title":"Redis 数据类型","slug":"redis-数据类型","link":"#redis-数据类型","children":[{"level":3,"title":"Redis 常用的数据类型有哪些？","slug":"redis-常用的数据类型有哪些","link":"#redis-常用的数据类型有哪些","children":[]},{"level":3,"title":"String 的应用场景有哪些？","slug":"string-的应用场景有哪些","link":"#string-的应用场景有哪些","children":[]},{"level":3,"title":"String 还是 Hash 存储对象数据更好呢？","slug":"string-还是-hash-存储对象数据更好呢","link":"#string-还是-hash-存储对象数据更好呢","children":[]},{"level":3,"title":"String 的底层实现是什么？","slug":"string-的底层实现是什么","link":"#string-的底层实现是什么","children":[]},{"level":3,"title":"购物车信息用 String 还是 Hash 存储更好呢?","slug":"购物车信息用-string-还是-hash-存储更好呢","link":"#购物车信息用-string-还是-hash-存储更好呢","children":[]},{"level":3,"title":"使用 Redis 实现一个排行榜怎么做？","slug":"使用-redis-实现一个排行榜怎么做","link":"#使用-redis-实现一个排行榜怎么做","children":[]},{"level":3,"title":"Redis 的有序集合底层为什么要用跳表，而不用平衡树、红黑树或者 B+树？","slug":"redis-的有序集合底层为什么要用跳表-而不用平衡树、红黑树或者-b-树","link":"#redis-的有序集合底层为什么要用跳表-而不用平衡树、红黑树或者-b-树","children":[]},{"level":3,"title":"Set 的应用场景是什么？","slug":"set-的应用场景是什么","link":"#set-的应用场景是什么","children":[]},{"level":3,"title":"使用 Set 实现抽奖系统怎么做？","slug":"使用-set-实现抽奖系统怎么做","link":"#使用-set-实现抽奖系统怎么做","children":[]},{"level":3,"title":"使用 Bitmap 统计活跃用户怎么做？","slug":"使用-bitmap-统计活跃用户怎么做","link":"#使用-bitmap-统计活跃用户怎么做","children":[]},{"level":3,"title":"使用 HyperLogLog 统计页面 UV 怎么做？","slug":"使用-hyperloglog-统计页面-uv-怎么做","link":"#使用-hyperloglog-统计页面-uv-怎么做","children":[]}]},{"level":2,"title":"Redis 持久化机制（重要）","slug":"redis-持久化机制-重要","link":"#redis-持久化机制-重要","children":[]},{"level":2,"title":"Redis 线程模型（重要）","slug":"redis-线程模型-重要","link":"#redis-线程模型-重要","children":[{"level":3,"title":"Redis 单线程模型了解吗？","slug":"redis-单线程模型了解吗","link":"#redis-单线程模型了解吗","children":[]},{"level":3,"title":"Redis6.0 之前为什么不使用多线程？","slug":"redis6-0-之前为什么不使用多线程","link":"#redis6-0-之前为什么不使用多线程","children":[]},{"level":3,"title":"Redis6.0 之后为何引入了多线程？","slug":"redis6-0-之后为何引入了多线程","link":"#redis6-0-之后为何引入了多线程","children":[]},{"level":3,"title":"Redis 后台线程了解吗？","slug":"redis-后台线程了解吗","link":"#redis-后台线程了解吗","children":[]}]},{"level":2,"title":"Redis内存管理","slug":"redis内存管理","link":"#redis内存管理","children":[{"level":3,"title":"Redis 给缓存数据设置过期时间有什么用？","slug":"redis-给缓存数据设置过期时间有什么用","link":"#redis-给缓存数据设置过期时间有什么用","children":[]},{"level":3,"title":"Redis 是如何判断数据是否过期的呢？","slug":"redis-是如何判断数据是否过期的呢","link":"#redis-是如何判断数据是否过期的呢","children":[]},{"level":3,"title":"Redis 过期 key 删除策略了解么？","slug":"redis-过期-key-删除策略了解么","link":"#redis-过期-key-删除策略了解么","children":[]},{"level":3,"title":"为什么 key 过期之后不立马把它删掉呢？这样不是会浪费很多内存空间吗？","slug":"为什么-key-过期之后不立马把它删掉呢-这样不是会浪费很多内存空间吗","link":"#为什么-key-过期之后不立马把它删掉呢-这样不是会浪费很多内存空间吗","children":[]},{"level":3,"title":"大量 key 集中过期怎么办？","slug":"大量-key-集中过期怎么办","link":"#大量-key-集中过期怎么办","children":[]},{"level":3,"title":"Redis 内存淘汰策略了解么？","slug":"redis-内存淘汰策略了解么","link":"#redis-内存淘汰策略了解么","children":[]}]},{"level":2,"title":"Redis事务","slug":"redis事务","link":"#redis事务","children":[]},{"level":2,"title":"Redis性能优化（重要）","slug":"redis性能优化-重要","link":"#redis性能优化-重要","children":[]},{"level":2,"title":"Redis生产问题（重要）","slug":"redis生产问题-重要","link":"#redis生产问题-重要","children":[]},{"level":2,"title":"Redis集群","slug":"redis集群","link":"#redis集群","children":[]},{"level":2,"title":"Redis 使用规范","slug":"redis-使用规范","link":"#redis-使用规范","children":[]}],"git":{"createdTime":1741957587000,"updatedTime":1741964988000,"contributors":[{"name":"Jaeger Eren","email":"erenjaegerking@qq.com","commits":4}]},"readingTime":{"minutes":9.94,"words":2983},"filePathRelative":"notes/database/b_redis/redis-javaguide.md","localizedDate":"2025年1月1日","excerpt":"<h2>Redis基础</h2>\\n<h3>什么是Redis？</h3>\\n<p>Redis是一个基于c语言开发的开源非关系型数据库。</p>\\n<h3>Redis为什么这么快？</h3>\\n<ol>\\n<li>Redis基于内存，内存的访问速度比磁盘快很多。</li>\\n<li>Redis基于Reactor模型设计开发了一套高效的事件处理模型，主要是单线程事件循环和IO多路复用。</li>\\n<li>Redis内置了多种优化后的数据类型/结构，性能非常高。</li>\\n<li>Redis通信协议实现简单且解析高效。</li>\\n</ol>\\n<h3>除了 Redis，你还知道其他分布式缓存方案吗？</h3>\\n<p>memcacheed</p>","autoDesc":true}');export{p as comp,c as data};
