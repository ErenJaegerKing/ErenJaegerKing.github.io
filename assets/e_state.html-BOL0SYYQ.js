import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,e as a,o as r}from"./app-UTQ0xton.js";const i={};function o(l,t){return r(),n("div",null,t[0]||(t[0]=[a('<hr><div class="hint-container info"><p class="hint-container-title">相关信息</p><p>设计模式-行为型模式-状态模式</p></div><hr><h3 id="动机" tabindex="-1"><a class="header-anchor" href="#动机"><span>动机</span></a></h3><p>【例】通过按钮来控制一个电梯的状态，一个电梯有开门状态，关门状态，停止状态，运行状态。每一种状态改变，都有可能要根据其他状态来更新处理。例如，如果电梯门现在处于运行时状态，就不能进行开门操作，而如果电梯门是停止状态，就可以执行开门操作。</p><h3 id="定义" tabindex="-1"><a class="header-anchor" href="#定义"><span>定义</span></a></h3><p><strong>对有状态的对象，把复杂的“判断逻辑”提取到不同的状态对象中，允许状态对象在其内部状态发生改变时改变其行为。</strong></p><h3 id="结构" tabindex="-1"><a class="header-anchor" href="#结构"><span>结构</span></a></h3><p>状态模式包含以下主要角色。</p><ul><li><strong>环境（Context）角色</strong>：也称为上下文，它定义了客户程序需要的接口，维护一个当前状态，并将与状态相关的操作委托给当前状态对象来处理。</li><li><strong>抽象状态（State）角色</strong>：定义一个接口，用以封装环境对象中的特定状态所对应的行为。</li><li><strong>具体状态（Concrete State）角色</strong>：实现抽象状态所对应的行为。</li></ul><h3 id="uml" tabindex="-1"><a class="header-anchor" href="#uml"><span>UML</span></a></h3><figure><img src="https://drawingbed-686.pages.dev/myblog/202411062252415.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="案例实现" tabindex="-1"><a class="header-anchor" href="#案例实现"><span>案例实现</span></a></h3><p>电梯的案例使用状态模式进行改进</p><figure><img src="https://drawingbed-686.pages.dev/myblog/202411062253343.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="优缺点" tabindex="-1"><a class="header-anchor" href="#优缺点"><span><strong>优缺点</strong></span></a></h3><p><strong>优点：</strong></p><ul><li><p><strong>方便地增加新的状态</strong></p><p>将所有与某个状态有关的行为放到一个类中，并且可以方便地增加新的状态，只需要改变对象状态即可改变对象的行为</p></li><li><p><strong>允许状态转换逻辑与状态对象合成一体</strong></p><p>允许状态转换逻辑与状态对象合成一体，而不是某一个巨大的条件语句块</p></li></ul><p><strong>缺点：</strong></p><ul><li><p><strong>增加系统类和对象的个数</strong></p><p>状态模式的使用必然会增加系统类和对象的个数。</p></li><li><p><strong>导致程序结构和代码的混乱</strong></p><p>状态模式的结构与实现都较为复杂，如果使用不当将导致程序结构和代码的混乱</p></li><li><p><strong>对&quot;开闭原则&quot;的支持并不太好</strong></p></li></ul><h3 id="适用场景" tabindex="-1"><a class="header-anchor" href="#适用场景"><span>适用场景</span></a></h3><ul><li>当一个<strong>对象</strong>的<strong>行为取决于</strong>它的<strong>状态</strong>，并且它必须<strong>在运行时根据状态改</strong>变它的<strong>行为</strong>时，就可以考虑使用状态模式。</li><li>一个操作中含有庞大的<strong>分支结构</strong>，并且这些分支决定于对象的状态时。</li></ul>',22)]))}const g=e(i,[["render",o],["__file","e_state.html.vue"]]),d=JSON.parse('{"path":"/notes/designPattern/d_behavioral/e_state.html","title":"状态模式","lang":"zh-CN","frontmatter":{"icon":"","description":"相关信息 设计模式-行为型模式-状态模式 动机 【例】通过按钮来控制一个电梯的状态，一个电梯有开门状态，关门状态，停止状态，运行状态。每一种状态改变，都有可能要根据其他状态来更新处理。例如，如果电梯门现在处于运行时状态，就不能进行开门操作，而如果电梯门是停止状态，就可以执行开门操作。 定义 对有状态的对象，把复杂的“判断逻辑”提取到不同的状态对象中，允...","title":"状态模式","date":"2024-11-06T00:00:00.000Z","category":["设计模式"],"tag":["行为型模式","状态模式"],"order":5,"head":[["meta",{"property":"og:url","content":"https://he9.xin/notes/designPattern/d_behavioral/e_state.html"}],["meta",{"property":"og:site_name","content":"春风不语即随本心"}],["meta",{"property":"og:title","content":"状态模式"}],["meta",{"property":"og:description","content":"相关信息 设计模式-行为型模式-状态模式 动机 【例】通过按钮来控制一个电梯的状态，一个电梯有开门状态，关门状态，停止状态，运行状态。每一种状态改变，都有可能要根据其他状态来更新处理。例如，如果电梯门现在处于运行时状态，就不能进行开门操作，而如果电梯门是停止状态，就可以执行开门操作。 定义 对有状态的对象，把复杂的“判断逻辑”提取到不同的状态对象中，允..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://drawingbed-686.pages.dev/myblog/202411062252415.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-11-06T14:53:27.000Z"}],["meta",{"property":"article:author","content":"ErenJaegerKing"}],["meta",{"property":"article:tag","content":"行为型模式"}],["meta",{"property":"article:tag","content":"状态模式"}],["meta",{"property":"article:published_time","content":"2024-11-06T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-11-06T14:53:27.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"状态模式\\",\\"image\\":[\\"https://drawingbed-686.pages.dev/myblog/202411062252415.png\\",\\"https://drawingbed-686.pages.dev/myblog/202411062253343.png\\"],\\"datePublished\\":\\"2024-11-06T00:00:00.000Z\\",\\"dateModified\\":\\"2024-11-06T14:53:27.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"ErenJaegerKing\\",\\"url\\":\\"https://he9.xin\\",\\"email\\":\\"erenjaegerking@qq.com\\"}]}"]]},"headers":[{"level":3,"title":"动机","slug":"动机","link":"#动机","children":[]},{"level":3,"title":"定义","slug":"定义","link":"#定义","children":[]},{"level":3,"title":"结构","slug":"结构","link":"#结构","children":[]},{"level":3,"title":"UML","slug":"uml","link":"#uml","children":[]},{"level":3,"title":"案例实现","slug":"案例实现","link":"#案例实现","children":[]},{"level":3,"title":"优缺点","slug":"优缺点","link":"#优缺点","children":[]},{"level":3,"title":"适用场景","slug":"适用场景","link":"#适用场景","children":[]}],"git":{"createdTime":1730806731000,"updatedTime":1730904807000,"contributors":[{"name":"LiYaoYu","email":"ErenJaegerKing@qq.com","commits":2}]},"readingTime":{"minutes":2.09,"words":628},"filePathRelative":"notes/designPattern/d_behavioral/e_state.md","localizedDate":"2024年11月6日","excerpt":"<hr>\\n<div class=\\"hint-container info\\">\\n<p class=\\"hint-container-title\\">相关信息</p>\\n<p>设计模式-行为型模式-状态模式</p>\\n</div>\\n<hr>\\n<h3>动机</h3>\\n<p>【例】通过按钮来控制一个电梯的状态，一个电梯有开门状态，关门状态，停止状态，运行状态。每一种状态改变，都有可能要根据其他状态来更新处理。例如，如果电梯门现在处于运行时状态，就不能进行开门操作，而如果电梯门是停止状态，就可以执行开门操作。</p>\\n<h3>定义</h3>\\n<p><strong>对有状态的对象，把复杂的“判断逻辑”提取到不同的状态对象中，允许状态对象在其内部状态发生改变时改变其行为。</strong></p>","autoDesc":true}');export{g as comp,d as data};
