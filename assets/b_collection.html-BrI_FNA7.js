import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as l,e as i,o as t}from"./app-CbbACNXG.js";const s={};function r(n,a){return t(),l("div",null,a[0]||(a[0]=[i('<h2 id="集合概述" tabindex="-1"><a class="header-anchor" href="#集合概述"><span>集合概述</span></a></h2><h3 id="java集合概览" tabindex="-1"><a class="header-anchor" href="#java集合概览"><span>Java集合概览</span></a></h3><p>java集合，也叫容器，有两个接口派生，一个collection接口，主要存放单一元素。另一个是Map接口，主要用于存放键值对。对于collection接口，下面又有三个主要的子接口：List、Set、Queue</p><h3 id="说说-list-set-queue-map-四者的区别" tabindex="-1"><a class="header-anchor" href="#说说-list-set-queue-map-四者的区别"><span>说说 List, Set, Queue, Map 四者的区别？</span></a></h3><p>list 有序的 可重复的 set 无序的 不可重复的 queue 有序的 可重复的 按先后顺序排序的 map 存放键值对的 key是无序的、不可重复的 value是无序的、可重复的</p><h3 id="集合框架底层数据结构总结" tabindex="-1"><a class="header-anchor" href="#集合框架底层数据结构总结"><span>集合框架底层数据结构总结</span></a></h3><p>list</p><ul><li>ArrayList：Object[]数组。</li><li>Vector：Object[]数组。</li><li>LinkedList：双向链表（jdk1.6之前为循环链表，jdk1.7取消了循环）</li></ul><p>set</p><ul><li>HashSet：基于hashmap实现的，底层采用hashmap俩保存元素</li><li>LinkedHashSet：LinkedHashSet是HashSet的子类，并且其内部是通过LinkedHashMap来实现的</li><li>TreeSet：红黑树（自平衡的排序二叉树）</li></ul><p>queue</p><ul><li>PriorityQueue：Object[] 数组来实现小顶堆。</li><li>DelayQueue：PriorityQueue</li><li>ArrayDeque：可扩容动态双向数组。</li></ul><p>map</p><ul><li>hashmap：jdk1.8之前hashmap由数组+链表组成的，数组是hashmap 的主体，链表则是主要为了解决哈希冲突而存在的（拉链法解决冲突）。jdk1.8之后在解决哈希冲突时有了较大的变化，当链表长度大于阈值8时，将链表转化为红黑树，以减少搜索时间（将链表转成红黑树前会判断，如果当前数组的长度小于64，那么会选择先进行数组扩容， 而不是转换为红黑树）</li><li>LinedHashMap：LinkedHashMao继承HashMap，所以它的底层仍然是基于拉链式散列结构即由数组和链表或红黑树组成。另外，LinkedHashMao在上面的结构的基础上，增加了一条双向链表，使得上面的结构可以保持键值对的插入顺序。同时通过对链表进行相应的操作，实现了访问顺序的相关逻辑</li><li>hashtable：数组+链表组成的，数组是hashtable的体，链表则是主要为了解决哈希冲突而存在的</li><li>treemap：红黑树（自平衡的排序二叉树）</li></ul><h3 id="如何选用集合" tabindex="-1"><a class="header-anchor" href="#如何选用集合"><span>如何选用集合?</span></a></h3><ul><li>需要根据键值获取到元素值时就选用map接口下的集合，需要排序时选择treemap，不需要排序时选择hashmap，需要保证线程安全就选用concurrenthashmap</li><li>只需要存放元素值时，需要保证元素唯一就选择set接口的集合比如treeset或hashset，不需要就选择实现list接口比如说arraylist或linkedlist</li></ul><h3 id="为什么要使用集合" tabindex="-1"><a class="header-anchor" href="#为什么要使用集合"><span>为什么要使用集合？</span></a></h3><p>当我们需要存储一组类型相同的数据时，数组是最常用且最基本的容器之一</p><h2 id="list" tabindex="-1"><a class="header-anchor" href="#list"><span>List</span></a></h2><h3 id="arraylist-和-array-数组-的区别" tabindex="-1"><a class="header-anchor" href="#arraylist-和-array-数组-的区别"><span>ArrayList 和 Array（数组）的区别？</span></a></h3><p>ArrayList内部基于动态数组实现，比Array（静态数组）使用起来更加灵活</p><ul><li>ArrayList会根绝实际存储的元素动态地扩容或缩容，而Array被创建之后就不能改变它的长度了</li><li>ArrayList可以使用泛型来确保类型安全，Array则不可以</li><li>ArrayList中只能存储对象。对于基本类型数据，需要使用其对应的包装类。Array可以直接存储基本类型数据，也可以存储对象</li><li>ArrayList支持插入、删除、遍历等常见操作，并且提供了丰富的API操作方法，比如add()、remove()等。Array只是一个固定长度的数组，只能按照下标访问其中的元素，不具备动态添加、删除元素的能力。</li></ul><p>长度 泛型 存储对象 是否支持插入、删除、遍历、API</p><h3 id="arraylist-和-vector-的区别" tabindex="-1"><a class="header-anchor" href="#arraylist-和-vector-的区别"><span>ArrayList 和 Vector 的区别?</span></a></h3><ul><li>ArrayList是List的主要实现类，底层使用Object[]存储，适用于频繁的查找工作，线程不全</li><li>Vector是List的古老实现类，底层使用Object[]存储，线程安全。</li></ul><h3 id="vector-和-stack-的区别" tabindex="-1"><a class="header-anchor" href="#vector-和-stack-的区别"><span>Vector 和 Stack 的区别?</span></a></h3><ul><li>Vector和stack线程安全，都是由synchronized关键字进行同步处理</li><li>Stack继承自Vector，是一个后进先出的栈，而Vector是一个列表</li></ul><h3 id="arraylist-可以添加-null-值吗" tabindex="-1"><a class="header-anchor" href="#arraylist-可以添加-null-值吗"><span>ArrayList 可以添加 null 值吗？</span></a></h3><p>可以的</p><p>可以存储任何类型的对象，包括null值</p><p>不建议向ArrayList中添加null值，null值无意义，会让代码难以维护比如忘记做判空处理就会导致空指针异常</p><h3 id="arraylist-插入和删除元素的时间复杂度" tabindex="-1"><a class="header-anchor" href="#arraylist-插入和删除元素的时间复杂度"><span>ArrayList 插入和删除元素的时间复杂度？</span></a></h3><p>对于插入：</p><ul><li>头部插入 o(N)</li><li>尾部插入，如果没有达到极限，O(1).如果已经达到极限那就需要先进行扩容，需要先执行一次o(n)的操作将原数组复制到新的更大的数组中，然后再执行O(1)的操作添加元素</li><li>指定位置插入 O（n）</li></ul><p>对于删除：</p><ul><li>头部删除，o(n)</li><li>尾部删除，o(1)</li><li>指定位置删除，o（n）</li></ul><h3 id="linkedlist-插入和删除元素的时间复杂度" tabindex="-1"><a class="header-anchor" href="#linkedlist-插入和删除元素的时间复杂度"><span>LinkedList 插入和删除元素的时间复杂度？</span></a></h3><ul><li>头部插入/删除：只需要修改头结点的指针即可以完成插入/删除操作，o(1)</li><li>尾部插入/删除：只需要修改尾结点的指针即可以完成插入/删除操作，o(1)</li><li>指定位置插入/删除：需要遍历到该位置，然后再插入或者删除，o(n)</li></ul><h3 id="linkedlist-为什么不能实现-randomaccess-接口" tabindex="-1"><a class="header-anchor" href="#linkedlist-为什么不能实现-randomaccess-接口"><span>LinkedList 为什么不能实现 RandomAccess 接口？</span></a></h3><p>RandomAcces是一个标记接口，用来表明实现该接口的类支持随机访问（即可以通过索引快速访问元素）。</p><p>由于LinkedList底层数据结构是链表，内存地址不连续，只能通过指针来定位，不支持随机快速访问，所以不能实现RandomAccess接口</p><h3 id="arraylist-与-linkedlist-区别" tabindex="-1"><a class="header-anchor" href="#arraylist-与-linkedlist-区别"><span>ArrayList 与 LinkedList 区别?</span></a></h3><ul><li>是否保证线程安全</li><li>底层数据结构</li><li>插入和删除是否受元素位置的影响</li><li>是否支持快速随机访问</li><li>内存空间占用</li></ul><h3 id="说一说-arraylist-的扩容机制吧" tabindex="-1"><a class="header-anchor" href="#说一说-arraylist-的扩容机制吧"><span>说一说 ArrayList 的扩容机制吧</span></a></h3><ol><li>初始容量：默认初试容量为10，延迟初始化，也就是说第一次添加元素时才真正创建数组</li><li>动态扩容：当元素数量超过当前数组容量时，ArrayList会自动进行扩容</li></ol><ul><li>当调用add()方法且当前元素数量等于数组长度时</li><li>新容量 = 旧容量 + （旧容量 &gt;&gt; 1）(即大约为旧容量的1.5倍)</li><li>创建新数组并将旧数组元素拷贝到新数组中</li><li>将内部数组引用指向新数组</li></ul><h3 id="说说集合中的-fail-fast-和-fail-safe-是什么" tabindex="-1"><a class="header-anchor" href="#说说集合中的-fail-fast-和-fail-safe-是什么"><span>说说集合中的 fail-fast 和 fail-safe 是什么</span></a></h3><p>不太清楚</p><h2 id="set" tabindex="-1"><a class="header-anchor" href="#set"><span>Set</span></a></h2><h3 id="comparable-和-comparator-的区别" tabindex="-1"><a class="header-anchor" href="#comparable-和-comparator-的区别"><span>Comparable 和 Comparator 的区别</span></a></h3><h3 id="无序性和不可重复性的含义是什么" tabindex="-1"><a class="header-anchor" href="#无序性和不可重复性的含义是什么"><span>无序性和不可重复性的含义是什么</span></a></h3><ul><li>无序性不等于随机性，无序性是指存储的数据在底层数组中并非按照数组索引的顺序添加，而是根据数据的哈希值决定的</li><li>不可重复性是指添加的元素按照equals()判断时，返回false，需要同时重写equals()方法和hashcode方法</li></ul><h3 id="比较-hashset、linkedhashset-和-treeset-三者的异同" tabindex="-1"><a class="header-anchor" href="#比较-hashset、linkedhashset-和-treeset-三者的异同"><span>比较 HashSet、LinkedHashSet 和 TreeSet 三者的异同</span></a></h3><ul><li>都是set接口，元素唯一，都不是线程安全的</li><li>hashset底层是哈希表 linkedhashset底层是链表和哈希表 treeset底层是红黑树，元素是有序的</li><li>应用场景不同</li></ul><h2 id="queue" tabindex="-1"><a class="header-anchor" href="#queue"><span>Queue</span></a></h2><p>以后再说</p><h2 id="map" tabindex="-1"><a class="header-anchor" href="#map"><span>Map</span></a></h2><h3 id="hashmap和hashtable的区别" tabindex="-1"><a class="header-anchor" href="#hashmap和hashtable的区别"><span>HashMap和Hashtable的区别</span></a></h3><ul><li>线程是否安全</li><li>效率</li><li>对null key和null value的支持</li><li>初试容量大小和每次扩容大小的不同</li><li>底层数据结构</li><li>哈希函数的实现</li></ul><h3 id="hashmap-和-hashset-区别" tabindex="-1"><a class="header-anchor" href="#hashmap-和-hashset-区别"><span>HashMap 和 HashSet 区别</span></a></h3><ul><li>都实现了map接口</li><li>hashmap存储键值对，hashset存储对象</li><li>hashmap调用put向map中添加元素，调用add方法向set中添加元素</li><li>hashmap使用键计算hashcode，HashSet 使用成员对象来计算 hashcode 值，对于两个对象来说 hashcode 可能相同，所以equals()方法用来判断对象的相等性</li></ul>',61)]))}const p=e(s,[["render",r],["__file","b_collection.html.vue"]]),o=JSON.parse('{"path":"/notes/Java/a_base/b_collection.html","title":"Java集合","lang":"zh-CN","frontmatter":{"icon":"","description":"集合概述 Java集合概览 java集合，也叫容器，有两个接口派生，一个collection接口，主要存放单一元素。另一个是Map接口，主要用于存放键值对。对于collection接口，下面又有三个主要的子接口：List、Set、Queue 说说 List, Set, Queue, Map 四者的区别？ list 有序的 可重复的 set 无序的 不可...","title":"Java集合","date":"2024-09-23T00:00:00.000Z","category":["Java"],"tag":["Java集合"],"head":[["meta",{"property":"og:url","content":"https://he9.xin/notes/Java/a_base/b_collection.html"}],["meta",{"property":"og:site_name","content":"春风不语即随本心"}],["meta",{"property":"og:title","content":"Java集合"}],["meta",{"property":"og:description","content":"集合概述 Java集合概览 java集合，也叫容器，有两个接口派生，一个collection接口，主要存放单一元素。另一个是Map接口，主要用于存放键值对。对于collection接口，下面又有三个主要的子接口：List、Set、Queue 说说 List, Set, Queue, Map 四者的区别？ list 有序的 可重复的 set 无序的 不可..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-04-02T14:33:12.000Z"}],["meta",{"property":"article:author","content":"ErenJaegerKing"}],["meta",{"property":"article:tag","content":"Java集合"}],["meta",{"property":"article:published_time","content":"2024-09-23T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-04-02T14:33:12.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java集合\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-09-23T00:00:00.000Z\\",\\"dateModified\\":\\"2025-04-02T14:33:12.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"ErenJaegerKing\\",\\"url\\":\\"https://he9.xin\\",\\"email\\":\\"erenjaegerking@qq.com\\"}]}"]]},"headers":[{"level":2,"title":"集合概述","slug":"集合概述","link":"#集合概述","children":[{"level":3,"title":"Java集合概览","slug":"java集合概览","link":"#java集合概览","children":[]},{"level":3,"title":"说说 List, Set, Queue, Map 四者的区别？","slug":"说说-list-set-queue-map-四者的区别","link":"#说说-list-set-queue-map-四者的区别","children":[]},{"level":3,"title":"集合框架底层数据结构总结","slug":"集合框架底层数据结构总结","link":"#集合框架底层数据结构总结","children":[]},{"level":3,"title":"如何选用集合?","slug":"如何选用集合","link":"#如何选用集合","children":[]},{"level":3,"title":"为什么要使用集合？","slug":"为什么要使用集合","link":"#为什么要使用集合","children":[]}]},{"level":2,"title":"List","slug":"list","link":"#list","children":[{"level":3,"title":"ArrayList 和 Array（数组）的区别？","slug":"arraylist-和-array-数组-的区别","link":"#arraylist-和-array-数组-的区别","children":[]},{"level":3,"title":"ArrayList 和 Vector 的区别?","slug":"arraylist-和-vector-的区别","link":"#arraylist-和-vector-的区别","children":[]},{"level":3,"title":"Vector 和 Stack 的区别?","slug":"vector-和-stack-的区别","link":"#vector-和-stack-的区别","children":[]},{"level":3,"title":"ArrayList 可以添加 null 值吗？","slug":"arraylist-可以添加-null-值吗","link":"#arraylist-可以添加-null-值吗","children":[]},{"level":3,"title":"ArrayList 插入和删除元素的时间复杂度？","slug":"arraylist-插入和删除元素的时间复杂度","link":"#arraylist-插入和删除元素的时间复杂度","children":[]},{"level":3,"title":"LinkedList 插入和删除元素的时间复杂度？","slug":"linkedlist-插入和删除元素的时间复杂度","link":"#linkedlist-插入和删除元素的时间复杂度","children":[]},{"level":3,"title":"LinkedList 为什么不能实现 RandomAccess 接口？","slug":"linkedlist-为什么不能实现-randomaccess-接口","link":"#linkedlist-为什么不能实现-randomaccess-接口","children":[]},{"level":3,"title":"ArrayList 与 LinkedList 区别?","slug":"arraylist-与-linkedlist-区别","link":"#arraylist-与-linkedlist-区别","children":[]},{"level":3,"title":"说一说 ArrayList 的扩容机制吧","slug":"说一说-arraylist-的扩容机制吧","link":"#说一说-arraylist-的扩容机制吧","children":[]},{"level":3,"title":"说说集合中的 fail-fast 和 fail-safe 是什么","slug":"说说集合中的-fail-fast-和-fail-safe-是什么","link":"#说说集合中的-fail-fast-和-fail-safe-是什么","children":[]}]},{"level":2,"title":"Set","slug":"set","link":"#set","children":[{"level":3,"title":"Comparable 和 Comparator 的区别","slug":"comparable-和-comparator-的区别","link":"#comparable-和-comparator-的区别","children":[]},{"level":3,"title":"无序性和不可重复性的含义是什么","slug":"无序性和不可重复性的含义是什么","link":"#无序性和不可重复性的含义是什么","children":[]},{"level":3,"title":"比较 HashSet、LinkedHashSet 和 TreeSet 三者的异同","slug":"比较-hashset、linkedhashset-和-treeset-三者的异同","link":"#比较-hashset、linkedhashset-和-treeset-三者的异同","children":[]}]},{"level":2,"title":"Queue","slug":"queue","link":"#queue","children":[]},{"level":2,"title":"Map","slug":"map","link":"#map","children":[{"level":3,"title":"HashMap和Hashtable的区别","slug":"hashmap和hashtable的区别","link":"#hashmap和hashtable的区别","children":[]},{"level":3,"title":"HashMap 和 HashSet 区别","slug":"hashmap-和-hashset-区别","link":"#hashmap-和-hashset-区别","children":[]}]}],"git":{"createdTime":1727102579000,"updatedTime":1743604392000,"contributors":[{"name":"Jaeger Eren","email":"erenjaegerking@qq.com","commits":4},{"name":"erenjaeger","email":"ErenJaegerKing@qq.com","commits":1}]},"readingTime":{"minutes":6.54,"words":1963},"filePathRelative":"notes/Java/a_base/b_collection.md","localizedDate":"2024年9月23日","excerpt":"<h2>集合概述</h2>\\n<h3>Java集合概览</h3>\\n<p>java集合，也叫容器，有两个接口派生，一个collection接口，主要存放单一元素。另一个是Map接口，主要用于存放键值对。对于collection接口，下面又有三个主要的子接口：List、Set、Queue</p>\\n<h3>说说 List, Set, Queue, Map 四者的区别？</h3>\\n<p>list 有序的 可重复的\\nset 无序的 不可重复的\\nqueue 有序的 可重复的 按先后顺序排序的\\nmap 存放键值对的 key是无序的、不可重复的 value是无序的、可重复的</p>\\n<h3>集合框架底层数据结构总结</h3>","autoDesc":true}');export{p as comp,o as data};
