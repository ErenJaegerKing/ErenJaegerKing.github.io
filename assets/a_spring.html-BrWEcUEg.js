import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,e as a,o as l}from"./app-tK5k8aWv.js";const e={};function r(p,i){return l(),s("div",null,i[0]||(i[0]=[a(`<h2 id="spring基础" tabindex="-1"><a class="header-anchor" href="#spring基础"><span>Spring基础</span></a></h2><h3 id="什么是spring框架" tabindex="-1"><a class="header-anchor" href="#什么是spring框架"><span>什么是Spring框架？</span></a></h3><p>Spring 是一款开源的轻量级 Java 开发框架</p><p>我们一般说 Spring 框架指的都是 Spring Framework，它是很多模块的集合，使用这些模块可以很方便地协助我们进行开发，比如说 Spring 支持 IoC（Inversion of Control:控制反转） 和 AOP(Aspect-Oriented Programming:面向切面编程)、可以很方便地对数据库进行访问、可以很方便地集成第三方组件（电子邮件，任务，调度，缓存等等）、对单元测试支持比较好、支持 RESTful Java 应用程序的开发。</p><h3 id="spring-包含的模块有哪些" tabindex="-1"><a class="header-anchor" href="#spring-包含的模块有哪些"><span>Spring 包含的模块有哪些？</span></a></h3><p>Spring5.x 版本：</p><ul><li>Core Container：Spring 框架的核心模块，也可以说是基础模块，主要提供 IoC 依赖注入功能的支持。 <ul><li>spring-core：Spring 框架基本的核心工具类。</li><li>spring-beans：提供对 bean 的创建、配置和管理等功能的支持。</li><li>spring-context：提供对国际化、事件传播、资源加载等功能的支持。</li><li>spring-expression：提供对表达式语言（Spring Expression Language） SpEL 的支持，只依赖于 core 模块，不依赖于其他模块，可以单独使用。</li></ul></li><li>AOP <ul><li>spring-aspects：该模块为与 AspectJ 的集成提供支持。</li><li>spring-aop：提供了面向切面的编程实现。</li><li>spring-instrument：提供了为 JVM 添加代理（agent）的功能。</li></ul></li><li>Data Access/Integration <ul><li>spring-jdbc：提供了对数据库访问的抽象 JDBC。</li><li>spring-tx：提供对事务的支持。</li><li>spring-orm：提供对 Hibernate、JPA、iBatis 等 ORM 框架的支持。</li><li>spring-oxm：提供一个抽象层支撑 OXM(Object-to-XML-Mapping)，例如：JAXB、Castor、XMLBeans、JiBX 和 XStream 等。</li><li>spring-jms : 消息服务。</li></ul></li><li>Spring Web <ul><li>spring-web：对 Web 功能的实现提供一些最基础的支持。</li><li>spring-webmvc：提供对 Spring MVC 的实现。</li><li>spring-websocket：提供了对 WebSocket 的支持，WebSocket 可以让客户端和服务端进行双向通信。</li><li>spring-webflux：提供对 WebFlux 的支持。</li></ul></li><li>Messaging <ul><li>spring-messaging</li></ul></li><li>Spring Test</li></ul><h3 id="spring-spring-mvc-spring-boot-之间什么关系" tabindex="-1"><a class="header-anchor" href="#spring-spring-mvc-spring-boot-之间什么关系"><span>Spring,Spring MVC,Spring Boot 之间什么关系?</span></a></h3><p>Spring是一个开源的轻量级Java开发框架。</p><p>Spring MVC是Spring中的一个很重要的模块，主要赋予Spring快速构建MVC架构的Web程序的能力。MVC是模型（Model）、视图（View）、控制器（Controller）的简写，其核心思想就是通过将业务逻辑、数据、显示分离来组织代码。</p><p>使用Spring进行开发各种配置过于麻烦比如说开启某些Spring特性时，需要XML或Java进行显示配置。所以Spring Boot就诞生了。</p><p>总结一下： Spring 旨在简化 J2EE 企业应用程序开发。 Spring Boot 旨在简化 Spring 开发（减少配置文件，开箱即用！）。 Spring Boot 只是简化了配置，如果你需要构建 MVC 架构的 Web 程序，你还是需要使用 Spring MVC 作为 MVC 框架，只是说 Spring Boot 帮你简化了 Spring MVC 的很多配置，真正做到开箱即用！</p><h2 id="spring-ioc" tabindex="-1"><a class="header-anchor" href="#spring-ioc"><span>Spring Ioc</span></a></h2><h3 id="谈谈自己对于-spring-ioc-的了解" tabindex="-1"><a class="header-anchor" href="#谈谈自己对于-spring-ioc-的了解"><span>谈谈自己对于 Spring IoC 的了解</span></a></h3><p>ioc是控制反转，是一种面向对象的设计思想，而不是一种具体的技术实现。</p><p>ioc的思想就是将在程序中手动创建对象的控制权，交由Spring框架来管理。</p><p>为什么叫控制反转？控制：就是创建对象的权力 反转：就是将控制权转交给外部环境，比如说spring框架、ioc容器</p><h3 id="什么是spring-bean" tabindex="-1"><a class="header-anchor" href="#什么是spring-bean"><span>什么是Spring Bean？</span></a></h3><p>就是那些被ioc容器所管理的对象</p><h3 id="将一个类声明为-bean-的注解有哪些" tabindex="-1"><a class="header-anchor" href="#将一个类声明为-bean-的注解有哪些"><span>将一个类声明为 Bean 的注解有哪些?</span></a></h3><p>@component：通用的注解，可标注任何类为Spring组件</p><p>@Repository：对应持久层即Dao层，主要用于数据库相关操作</p><p>@Service：对应服务层，主要设计一些复杂的逻辑，需要用到Dao层</p><p>@Controller：对应Spring MVC控制层，主要用于接受用户的请求并调用Service层返回数据给前端页面</p><h3 id="component-和-bean的区别是什么" tabindex="-1"><a class="header-anchor" href="#component-和-bean的区别是什么"><span>@component 和 @Bean的区别是什么？</span></a></h3><ul><li>@component注解作用于类，@Bean注解作用于方法</li><li>@component通常是通过类路径扫描来自动侦测以及自动装配到Spring容器中的 （@componentScan注解定义要扫描的路径从中标识了需要装配的类自动装配到Spring的bean容器中）@Bean在标有该注解的方法中定义产生了这个Bean，@Bean告诉了Spring这是某个类的实例，当我需要用它的时候还给我。</li><li>@Bean注解比@Compoennt注解的自定义性更强，很多地方只能通过@Bean注解来注册bean，比如我们引用第三方库中的类需要装配到Spring容器时，则只能通过@Bean来实现</li></ul><h3 id="注入-bean-的注解有哪些" tabindex="-1"><a class="header-anchor" href="#注入-bean-的注解有哪些"><span>注入 Bean 的注解有哪些？</span></a></h3><ol><li>Spring内置的@Autowired org.springframework.bean.factory</li><li>jdk内置的@Rosource和@Inject都可以用于注入Bean javax.annotation Java JSR-250</li></ol><h3 id="autowired-和-resource-的区别是什么" tabindex="-1"><a class="header-anchor" href="#autowired-和-resource-的区别是什么"><span>@Autowired 和 @Resource 的区别是什么？</span></a></h3><ul><li>@Autowired 是 Spring 提供的注解，@Resource 是 JDK 提供的注解。</li><li>Autowired 默认的注入方式为byType（根据类型进行匹配），@Resource默认注入方式为 byName（根据名称进行匹配）。</li><li>当一个接口存在多个实现类的情况下，@Autowired 和@Resource都需要通过名称才能正确匹配到对应的 Bean。Autowired 可以通过 @Qualifier 注解来显式指定名称，@Resource可以通过 name 属性来显式指定名称。</li><li>@Autowired 支持在构造函数、方法、字段和参数上使用。@Resource 主要用于字段和方法上的注入，不支持在构造函数或参数上使用。</li></ul><h3 id="注入-bean-的方式有哪些" tabindex="-1"><a class="header-anchor" href="#注入-bean-的方式有哪些"><span>注入 Bean 的方式有哪些？</span></a></h3><p>依赖注入的DI的常见方式：</p><ol><li>构造函数注入：通过类的构造函数来注入依赖项。</li><li>Setter注入：通过类的Setter方法来注入依赖项。</li><li>字段注入：直接在类的字段上使用注解（如:@Autowird或@Resuorece）来注入依赖项</li></ol><h3 id="构造函数注入还是-setter-注入" tabindex="-1"><a class="header-anchor" href="#构造函数注入还是-setter-注入"><span>构造函数注入还是 Setter 注入？</span></a></h3><p>Spring官方推荐构造函数注入</p><ul><li>依赖完整性</li><li>不可变性</li><li>初始化保证</li><li>测试便利性</li></ul><h3 id="bean的作用域有哪些" tabindex="-1"><a class="header-anchor" href="#bean的作用域有哪些"><span>Bean的作用域有哪些？</span></a></h3><ul><li>单例 ioc容器中只有唯一的bean实例</li><li>原型 每次获取都会创建一个新的bean实例</li><li>request</li><li>seesion</li><li>application/global-session</li><li>websocket</li></ul><h3 id="bean是线程安全的吗" tabindex="-1"><a class="header-anchor" href="#bean是线程安全的吗"><span>Bean是线程安全的吗？</span></a></h3><p>bean 的线程安全取决于作用域与状态</p><p>最常用的两种作用域单例和原型为例介绍。几乎所有场景的bean作用域都是使用默认的单例。</p><p>在原型的作用域下，每一个获取都会创建一个新的bean实例，不存在资源竞争的问题，所以不存在线程安全的问题</p><p>在单例的作用域下，ioc容器中只有唯一的bean实例，可能会存在资源竞争的问题，主要还是取决于bean是否有状态，如果这个bean是有状态的，那就存在线程安全的问题（有状态是指包含可变的成员变量的对象）</p><p>常见的三种解决方法：</p><ul><li>避免可变成员变量：尽量设计bean为无状态的</li><li>使用ThreadLocal：将可变成员变量保存在threadlocal中，确保线程安全</li><li>使用同步机制：利用synchronized或ReentrantLock来进行同步控制，确保线程安全</li></ul><h3 id="bean的生命周期了解么" tabindex="-1"><a class="header-anchor" href="#bean的生命周期了解么"><span>Bean的生命周期了解么？</span></a></h3><ol><li>整体上为四步：实例化 -&gt; 属性赋值 -&gt; 初始化 -&gt; 销毁</li><li>初始化这一步涉及的步骤比较多，包含Aware接口的依赖注入、BeanPostProcessor在初始化前后的处理以及 InitializingBean 和 init-method 的初始化操作。</li><li>销毁这一步会注册相关销毁回调接口，最后通过DisposableBean和destory-method进行销毁</li></ol><p>https://chaycao.github.io/2020/02/15/%E5%A6%82%E4%BD%95%E8%AE%B0%E5%BF%86Spring-Bean%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F.html</p><h2 id="spring-aop" tabindex="-1"><a class="header-anchor" href="#spring-aop"><span>Spring AOP</span></a></h2><h3 id="谈谈自己对于aop的了解" tabindex="-1"><a class="header-anchor" href="#谈谈自己对于aop的了解"><span>谈谈自己对于AOP的了解</span></a></h3><p>AOP面向切面编程，能够将那些与业务无关的，却为业务模块所共同调用的逻辑或责任(例如事务处理、日志处理、权限控制)封装起来，减少系统的重复代码，降低模块间的耦合度，并利于未来的可扩展性和可维护性</p><p>Spring AOP是基于动态代理的，如果要代理的对象实现了某个接口，那么Spring AOP会使用JDK Proxy，去创建代理对象。</p><p>Aop的专业术语你知道有哪些？</p><p>目标？代理？连接点？切入点？通知？切面？织入？</p><p>AOP（面向切面编程）是一种编程范式，旨在通过分离横切关注点来提高代码的模块化。以下是AOP中的一些关键术语及其解释和示例：</p><ol><li><p><strong>目标（Target）</strong>：</p><ul><li><strong>定义</strong>：目标是被一个或多个切面所通知的对象。它通常是业务逻辑的核心类。</li><li><strong>示例</strong>：假设有一个<code>UserService</code>类，负责处理用户相关的业务逻辑，这个类就是目标。</li></ul><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> UserService</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> addUser</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> username</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // 添加用户的逻辑</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>代理（Proxy）</strong>：</p><ul><li><strong>定义</strong>：代理是AOP框架创建的对象，用于在目标对象的方法调用前后插入切面逻辑。</li><li><strong>示例</strong>：AOP框架会为<code>UserService</code>创建一个代理对象，在调用<code>addUser</code>方法时，代理会先执行切面逻辑，再调用实际的<code>addUser</code>方法。</li></ul></li><li><p><strong>连接点（Join Point）</strong>：</p><ul><li><strong>定义</strong>：连接点是程序执行过程中的一个点，比如方法调用或异常抛出。在AOP中，连接点是可以在其中插入切面逻辑的点。</li><li><strong>示例</strong>：在<code>UserService</code>中，<code>addUser</code>方法的调用就是一个连接点。</li></ul></li><li><p><strong>切入点（Pointcut）</strong>：</p><ul><li><strong>定义</strong>：切入点是用于定义在哪些连接点上应用切面逻辑的表达式。它决定了哪些连接点会被通知。</li><li><strong>示例</strong>：可以使用切入点表达式<code>execution(* UserService.addUser(..))</code>来匹配<code>UserService</code>中的<code>addUser</code>方法。</li></ul></li><li><p><strong>通知（Advice）</strong>：</p><ul><li><strong>定义</strong>：通知是在特定连接点上执行的动作。常见的通知类型有前置通知（Before）、后置通知（After）、返回通知（After-returning）、异常通知（After-throwing）和环绕通知（Around）。</li><li><strong>示例</strong>：在<code>addUser</code>方法执行前记录日志的前置通知。</li></ul><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Before</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;execution(* UserService.addUser(..))&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> beforeAddUser</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">() {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">    System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;准备添加用户&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>切面（Aspect）</strong>：</p><ul><li><strong>定义</strong>：切面是通知和切入点的结合体。它定义了在哪些连接点上执行哪些通知。</li><li><strong>示例</strong>：一个日志切面可以包含多个通知和切入点，用于在多个方法调用前后记录日志。</li></ul><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Aspect</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> LoggingAspect</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Before</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;execution(* UserService.addUser(..))&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> beforeAddUser</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;准备添加用户&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">After</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;execution(* UserService.addUser(..))&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> afterAddUser</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;用户添加完成&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>织入（Weaving）</strong>：</p><ul><li><strong>定义</strong>：织入是将切面应用到目标对象并创建代理对象的过程。织入可以在编译时、类加载时或运行时进行。</li><li><strong>示例</strong>：在Spring AOP中，织入通常是在运行时通过动态代理实现的。</li></ul><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Configuration</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">EnableAspectJAutoProxy</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> AppConfig</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Bean</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> UserService</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> userService</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> UserService</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Bean</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> LoggingAspect</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> loggingAspect</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> LoggingAspect</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><p>通过这些术语和示例，可以更好地理解AOP的核心概念及其在实际应用中的使用。</p><h3 id="spring-aop-和-aspectj-aop-有什么区别" tabindex="-1"><a class="header-anchor" href="#spring-aop-和-aspectj-aop-有什么区别"><span>Spring AOP 和 AspectJ AOP 有什么区别？</span></a></h3><ul><li>Spring AOP 属于运行时增强，而 AspectJ 是编译时增强。</li><li>Spring AOP 基于代理(Proxying)，而 AspectJ 基于字节码操作(Bytecode Manipulation)。</li></ul><h3 id="aop-常见的通知类型有哪些" tabindex="-1"><a class="header-anchor" href="#aop-常见的通知类型有哪些"><span>AOP 常见的通知类型有哪些？</span></a></h3><ul><li>前置通知</li><li>后置通知</li><li>返回通知</li><li>异常通知</li><li>环绕通知</li></ul><h3 id="多个切面的执行顺序如何控制" tabindex="-1"><a class="header-anchor" href="#多个切面的执行顺序如何控制"><span>多个切面的执行顺序如何控制？</span></a></h3><ol><li>通常使用@Order注解直接定义切面顺序</li><li>实现Oredered接口重写getOrder方法</li></ol><h2 id="spring-mvc" tabindex="-1"><a class="header-anchor" href="#spring-mvc"><span>Spring MVC</span></a></h2><h3 id="说说自己对于-spring-mvc-了解" tabindex="-1"><a class="header-anchor" href="#说说自己对于-spring-mvc-了解"><span>说说自己对于 Spring MVC 了解?</span></a></h3><p>MVC是模型（Modal）、视图（View）、控制器（Controller）的简写，其核心思想是通过将业务逻辑、数据、显示分离来组织代码</p><p>Spring MVC时代</p><p>MVC是一种设计模式，Spring MVC是一款很优秀的MVC框架。Spring MVC可以帮助我们进行更简洁的Web层的开发，并且它天生与Spring框架集成。</p><p>Spring MVC 下我们一般把后端项目分为 Service 层（处理业务）、Dao 层（数据库操作）、Entity 层（实体类）、Controller 层(控制层，返回数据给前台页面)。</p><h3 id="spring-mvc的核心组件有哪些-也可以说是spring-mvc的工作原理" tabindex="-1"><a class="header-anchor" href="#spring-mvc的核心组件有哪些-也可以说是spring-mvc的工作原理"><span>Spring MVC的核心组件有哪些？（也可以说是Spring MVC的工作原理）</span></a></h3><ul><li>核心的中央处理器</li><li>处理器映射器</li><li>处理器适配器</li><li>请求处理器</li><li>视图解析器</li></ul><h3 id="spring-mvc工作原理了解吗" tabindex="-1"><a class="header-anchor" href="#spring-mvc工作原理了解吗"><span>Spring MVC工作原理了解吗？</span></a></h3><ol><li>客户端发送请求，核心中央处理器拦截请求</li><li>核心中央处理器会根据请求的信息调用处理器映射器。处理映射器会根据URL路径去匹配查找能处理的请求处理器（也就是我们平时说的Controller控制器），并会将请求涉及到的拦截器和请求处理器一起封装</li><li>核心处理器调用处理器适配器去执行请求处理器</li><li>请求处理器完成对用户的请求后，会返回一个ModalAndView对象给核心中央处理器（ModalAndView顾名思义，包含了数据模型以及相应的视图信息。Modal是返回的数据对象，View是个逻辑上的View）</li><li>视图解析器会根据逻辑View查询实际的View</li><li>核心中央处理器把返回的Modal传给View（视图渲染）</li><li>把View返回给请求者</li></ol><h3 id="统一异常处理怎么做" tabindex="-1"><a class="header-anchor" href="#统一异常处理怎么做"><span>统一异常处理怎么做？</span></a></h3><p>推荐使用注解的方式统一异常处理，具体会使用到 @ControllerAdvice + @ExceptionHandler 这两个注解 。</p><p>这种异常处理方式下，会给所有或者指定controller织入异常处理的逻辑（AOP），当controller中的方法抛出异常的时候，由被@ExceptionHandler注解修饰的方法进行处理。</p><h2 id="spring框架中用到了哪些设计模式" tabindex="-1"><a class="header-anchor" href="#spring框架中用到了哪些设计模式"><span>Spring框架中用到了哪些设计模式？</span></a></h2><ul><li>工厂设计模式：Spring使用工厂模式通过BeanFactory、ApplicationContext创建Bean对象</li><li>代理设计模式：Spring AOP功能的设计</li><li>单例设计模式：Spring中的Bean默认都是单例的</li><li>模板方法模式：Spring中的jdbcTemplate、hibernateTemplate等以Template结尾的对数据库操作的类</li><li>包装类设计模式：可以根据客户的需求能够动态切换不同的数据源。</li><li>观察者模式：Spring事务驱动模型</li><li>适配器模式：Spring AOP的增强或通知（Advice）使用到了适配器模式、Spring MVC中也是用到了适配器模式适配Controller</li></ul><h2 id="spring循环依赖" tabindex="-1"><a class="header-anchor" href="#spring循环依赖"><span>Spring循环依赖</span></a></h2><h3 id="spring-循环依赖了解吗-怎么解决" tabindex="-1"><a class="header-anchor" href="#spring-循环依赖了解吗-怎么解决"><span>Spring 循环依赖了解吗，怎么解决？</span></a></h3><h3 id="lazy-能解决循环依赖吗" tabindex="-1"><a class="header-anchor" href="#lazy-能解决循环依赖吗"><span>@Lazy 能解决循环依赖吗？</span></a></h3><h3 id="springboot-允许循环依赖发生么" tabindex="-1"><a class="header-anchor" href="#springboot-允许循环依赖发生么"><span>SpringBoot 允许循环依赖发生么？</span></a></h3><h2 id="spring-事务" tabindex="-1"><a class="header-anchor" href="#spring-事务"><span>Spring 事务</span></a></h2><h3 id="spring-管理事务的方式有几种" tabindex="-1"><a class="header-anchor" href="#spring-管理事务的方式有几种"><span>Spring 管理事务的方式有几种？</span></a></h3><ul><li>编程式事务</li><li>声明式事务</li></ul><h3 id="spring-事务中哪几种事务传播行为" tabindex="-1"><a class="header-anchor" href="#spring-事务中哪几种事务传播行为"><span>Spring 事务中哪几种事务传播行为?</span></a></h3><p>事务传播行为是为了解决业务层方法之间的互相调用的事务问题</p><ol><li>TransactionDefinition.PROPAGATION_REQUIRED propagation_required 有则行，无则建 如果当前存在事务，则加入该事务；如果当前没有事务，则创建一个新的事务。</li><li>TransactionDefinition.PROPAGATION_REQUIRES_NEW propagation_requires_new 都新建 创建一个新的事务，如果当前存在事务，则把当前事务挂起。</li><li>TransactionDefinition.PROPAGATION_NESTED propagation_nested 嵌套 如果当前存在事务，则创建一个事务作为当前事务的嵌套事务来运行；如果当前没有事务，则该取值等价于TransactionDefinition.PROPAGATION_REQUIRED</li><li>TransactionDefinition.PROPAGATION_MANDATORY propagation_mandatory 如果当前存在事务，则加入该事务；如果当前没有事务，则抛出异常。（mandatory：强制性）</li></ol><p>若是错误的配置以下 3 种事务传播行为，事务将不会发生回滚：</p><ul><li>TransactionDefinition.PROPAGATION_SUPPORTS: 如果当前存在事务，则加入该事务；如果当前没有事务，则以非事务的方式继续运行。</li><li>TransactionDefinition.PROPAGATION_NOT_SUPPORTED:以非事务方式运行，如果当前存在事务，则把当前事务挂起。</li><li>TransactionDefinition.PROPAGATION_NEVER: 以非事务方式运行，如果当前存在事务，则抛出异常。</li></ul><h3 id="spring-事务中的隔离级别有哪几种" tabindex="-1"><a class="header-anchor" href="#spring-事务中的隔离级别有哪几种"><span>Spring 事务中的隔离级别有哪几种?</span></a></h3><ul><li>ISOLATION_DEFAULT 使用后端数据库默认的隔离级别</li><li>ISOLATION_READ_UNCOMMITTED 最低隔离级别 可能会导致脏读、幻读或者不可重复读</li><li>ISOLATION_READ_COMMITTED 允许读取并发事务已经提交的数据 可以阻止脏读，但是幻读或不可重复读</li><li>ISOLATION_REPEATABLE_READ 对同一个字段的多次读取结果都是一致的，除非数据是被本身事务自己所修改 可以阻止脏读和不可重复读，但幻读仍有可能发生</li><li>ISOLATION_SERIALIZABLE 最高的隔离级别，完全服从ACID的隔离级别 该级别可以防止脏读、不可重复读以及幻读。</li></ul><h3 id="transactional-rollbackfor-exception-class-注解了解吗" tabindex="-1"><a class="header-anchor" href="#transactional-rollbackfor-exception-class-注解了解吗"><span>@Transactional(rollbackFor = Exception.class)注解了解吗？</span></a></h3><p>Exception 分为运行时异常 RuntimeException 和非运行时异常。</p><p>@Transactional 注解默认回滚策略是只有在遇到RuntimeException(运行时异常) 或者 Error 时才会回滚事务，而不会回滚 Checked Exception（受检查异常）。这是因为 Spring 认为RuntimeException和 Error 是不可预期的错误，而受检异常是可预期的错误，可以通过业务逻辑来处理。</p><p>如果想要修改默认的回滚策略，可以使用 @Transactional 注解的 rollbackFor 和 noRollbackFor 属性来指定哪些异常需要回滚，哪些异常不需要回滚。</p><ul><li>如果想要让所有的异常都回滚事务，可以使用如下的注解：rollbackFor</li><li>如果想要让某些特定的异常不回滚事务，可以使用如下的注解：noRollbackFor</li></ul><h2 id="spring-data-jpa" tabindex="-1"><a class="header-anchor" href="#spring-data-jpa"><span>Spring Data JPA</span></a></h2><h3 id="如何使用-jpa-在数据库中非持久化一个字段" tabindex="-1"><a class="header-anchor" href="#如何使用-jpa-在数据库中非持久化一个字段"><span>如何使用 JPA 在数据库中非持久化一个字段？</span></a></h3><p>@Transient注解</p><h3 id="jpa-的审计功能是做什么的-有什么用" tabindex="-1"><a class="header-anchor" href="#jpa-的审计功能是做什么的-有什么用"><span>JPA 的审计功能是做什么的？有什么用？</span></a></h3><p>审计功能主要是帮助我们记录数据库操作的具体行为比如某条记录是谁创建的、什么时间创建的、最后修改人是谁、最后修改时间是什么时候。</p><h3 id="实体之间的关联关系注解有哪些" tabindex="-1"><a class="header-anchor" href="#实体之间的关联关系注解有哪些"><span>实体之间的关联关系注解有哪些？</span></a></h3><ul><li>@OneToOne : 一对一。</li><li>@ManyToMany：多对多。</li><li>@OneToMany : 一对多。</li><li>@ManyToOne：多对一。</li></ul><h2 id="spring-security" tabindex="-1"><a class="header-anchor" href="#spring-security"><span>Spring Security</span></a></h2><p>有哪些控制请求访问权限的方法？</p><ul><li>permitAll()：无条件允许任何形式访问，不管你登录还是没有登录。</li><li>anonymous()：允许匿名访问，也就是没有登录才可以访问。</li><li>denyAll()：无条件决绝任何形式的访问。</li><li>authenticated()：只允许已认证的用户访问。</li><li>fullyAuthenticated()：只允许已经登录或者通过 remember-me 登录的用户访问。</li><li>hasRole(String) : 只允许指定的角色访问。</li><li>hasAnyRole(String) : 指定一个或者多个角色，满足其一的用户即可访问。</li><li>hasAuthority(String)：只允许具有指定权限的用户访问</li><li>hasAnyAuthority(String)：指定一个或者多个权限，满足其一的用户即可访问。</li><li>hasIpAddress(String) : 只允许指定 ip 的用户访问。</li></ul><h3 id="hasrole-和-hasauthority-有区别吗" tabindex="-1"><a class="header-anchor" href="#hasrole-和-hasauthority-有区别吗"><span>hasRole 和 hasAuthority 有区别吗？</span></a></h3><p>hasRole(String) : 只允许指定的角色访问。</p><p>hasAuthority(String)：只允许具有指定权限的用户访问</p><h3 id="如何对密码进行加密" tabindex="-1"><a class="header-anchor" href="#如何对密码进行加密"><span>如何对密码进行加密？</span></a></h3><p>Spring Security 提供了多种加密算法的实现，开箱即用，非常方便。这些加密算法实现类的接口是 PasswordEncoder ，如果你想要自己实现一个加密算法的话，也需要实现 PasswordEncoder 接口。</p><p>官方推荐使用基于 bcrypt 强哈希函数的加密算法实现类。</p><h3 id="如何优雅更换系统使用的加密算法" tabindex="-1"><a class="header-anchor" href="#如何优雅更换系统使用的加密算法"><span>如何优雅更换系统使用的加密算法？</span></a></h3><p>推荐的做法是通过 DelegatingPasswordEncoder 兼容多种不同的密码加密方案，以适应不同的业务需求。从名字也能看出来，DelegatingPasswordEncoder 其实就是一个代理类，并非是一种全新的加密算法，它做的事情就是代理上面提到的加密算法实现类。在 Spring Security 5.0 之后，默认就是基于 DelegatingPasswordEncoder 进行密码加密的。</p><h2 id="spring-framework-5-基础" tabindex="-1"><a class="header-anchor" href="#spring-framework-5-基础"><span>Spring Framework 5 基础</span></a></h2><figure><img src="https://drawingbed-686.pages.dev/myblog/202412151903547.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="spring-和-spring-框架的组成" tabindex="-1"><a class="header-anchor" href="#spring-和-spring-框架的组成"><span>Spring 和 Spring 框架的组成</span></a></h3><ul><li>它的诞生是为了解决什么问题？</li><li>它的特性和优势？Spring Framework 有哪些特性，用了这个框架对开发而言有什么好处呢？</li><li>它有哪些组件呢？Spring Framework 有哪些组件呢？ <ul><li>Core</li><li>Data</li><li>Web</li><li>AOP、Aspects...</li><li>Test</li></ul></li><li>为什么用 Spring？</li></ul><h3 id="spring-要点" tabindex="-1"><a class="header-anchor" href="#spring-要点"><span>Spring 要点</span></a></h3><ul><li>Spring有哪些核心要点 <ul><li>IOC</li><li>AOP</li></ul></li><li>Spring 框架设计如何逐步简化开发的 <ul><li>Java 配置</li><li>注解配置</li><li>SpringBoot 托管配置</li><li>结合Spring和SpringBoot的发展</li></ul></li></ul><h3 id="spring核心之控制反转-ioc" tabindex="-1"><a class="header-anchor" href="#spring核心之控制反转-ioc"><span>Spring核心之控制反转（IOC）</span></a></h3><ul><li>如何理解IOC <ul><li>Spring Bean是什么</li><li>IOC是什么</li><li>IOC能做什么</li><li>IOC和DI是什么关系</li></ul></li><li>IOC配置的三种方式 <ul><li>xml配置</li><li>Java配置</li><li>注解配置</li></ul></li><li>依赖注入的三种方式 <ul><li>setter方式</li><li>构造函数</li><li>注解注入</li></ul></li><li>IOC和DI使用问题小结 <ul><li>为什么推荐构造器注入方式？</li><li>建议去博主博客上看（金句）</li><li>@Autowired和@Resource以及@Inject等注解注入有何区别？</li></ul></li></ul><h3 id="spring核心之面向切面编程-aop" tabindex="-1"><a class="header-anchor" href="#spring核心之面向切面编程-aop"><span>Spring核心之面向切面编程（AOP）</span></a></h3><ul><li>如何理解AOP <ul><li>AOP是什么</li><li>AOP术语 <ul><li>8</li><li>通知类型（5）</li></ul></li></ul></li></ul><figure><img src="https://drawingbed-686.pages.dev/myblog/202412162152105.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li>Spring AOP和AspectJ是什么关系</li><li>AOP的配置方式 <ul><li>XML配置方法</li><li>AspectJ注释方式 <ul><li>JDK</li><li>CGLIB</li></ul></li></ul></li><li>AOP使用问题 <ul><li>切入点的申明规则</li><li>多种增加通知的顺序</li><li>Spring AOP 和 AspectJ之间的关键区别</li><li>Spring AOP 还是完全使用AspectJ?</li></ul></li></ul><h3 id="springmvc请求流程和案例" tabindex="-1"><a class="header-anchor" href="#springmvc请求流程和案例"><span>SpringMVC请求流程和案例</span></a></h3><p>什么是MVC? 什么是Spring MVC? Spring MVC的请求流程？ Spring MVC案例你写过吗？</p><h3 id="spring-ioc实现原理详解之ioc体系结构设计" tabindex="-1"><a class="header-anchor" href="#spring-ioc实现原理详解之ioc体系结构设计"><span>Spring IOC实现原理详解之IOC体系结构设计</span></a></h3><figure><img src="https://drawingbed-686.pages.dev/myblog/202412172123876.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料"><span>参考资料</span></a></h2><p>padi 哥 https://pdai.tech/md/spring/spring.html</p><p>spring 官方文档 https://spring.io/projects/spring-framework</p><p>到时候复习的时候还是会看padi哥的大纲，现在改变记笔记的方式，要学会自己总结，即便很垃圾M，要用自己的话去总结</p>`,135)]))}const g=n(e,[["render",r],["__file","a_spring.html.vue"]]),o=JSON.parse('{"path":"/notes/Java/c_spring/a_spring.html","title":"Spring","lang":"zh-CN","frontmatter":{"icon":"","description":"Spring基础 什么是Spring框架？ Spring 是一款开源的轻量级 Java 开发框架 我们一般说 Spring 框架指的都是 Spring Framework，它是很多模块的集合，使用这些模块可以很方便地协助我们进行开发，比如说 Spring 支持 IoC（Inversion of Control:控制反转） 和 AOP(Aspect-Or...","title":"Spring","date":"2024-12-13T00:00:00.000Z","category":["Spring"],"tag":["Spring"],"order":1,"head":[["meta",{"property":"og:url","content":"https://he9.xin/notes/Java/c_spring/a_spring.html"}],["meta",{"property":"og:site_name","content":"春风不语即随本心"}],["meta",{"property":"og:title","content":"Spring"}],["meta",{"property":"og:description","content":"Spring基础 什么是Spring框架？ Spring 是一款开源的轻量级 Java 开发框架 我们一般说 Spring 框架指的都是 Spring Framework，它是很多模块的集合，使用这些模块可以很方便地协助我们进行开发，比如说 Spring 支持 IoC（Inversion of Control:控制反转） 和 AOP(Aspect-Or..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://drawingbed-686.pages.dev/myblog/202412151903547.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-03-13T13:14:48.000Z"}],["meta",{"property":"article:author","content":"ErenJaegerKing"}],["meta",{"property":"article:tag","content":"Spring"}],["meta",{"property":"article:published_time","content":"2024-12-13T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-03-13T13:14:48.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Spring\\",\\"image\\":[\\"https://drawingbed-686.pages.dev/myblog/202412151903547.png\\",\\"https://drawingbed-686.pages.dev/myblog/202412162152105.png\\",\\"https://drawingbed-686.pages.dev/myblog/202412172123876.png\\"],\\"datePublished\\":\\"2024-12-13T00:00:00.000Z\\",\\"dateModified\\":\\"2025-03-13T13:14:48.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"ErenJaegerKing\\",\\"url\\":\\"https://he9.xin\\",\\"email\\":\\"erenjaegerking@qq.com\\"}]}"]]},"headers":[{"level":2,"title":"Spring基础","slug":"spring基础","link":"#spring基础","children":[{"level":3,"title":"什么是Spring框架？","slug":"什么是spring框架","link":"#什么是spring框架","children":[]},{"level":3,"title":"Spring 包含的模块有哪些？","slug":"spring-包含的模块有哪些","link":"#spring-包含的模块有哪些","children":[]},{"level":3,"title":"Spring,Spring MVC,Spring Boot 之间什么关系?","slug":"spring-spring-mvc-spring-boot-之间什么关系","link":"#spring-spring-mvc-spring-boot-之间什么关系","children":[]}]},{"level":2,"title":"Spring Ioc","slug":"spring-ioc","link":"#spring-ioc","children":[{"level":3,"title":"谈谈自己对于 Spring IoC 的了解","slug":"谈谈自己对于-spring-ioc-的了解","link":"#谈谈自己对于-spring-ioc-的了解","children":[]},{"level":3,"title":"什么是Spring Bean？","slug":"什么是spring-bean","link":"#什么是spring-bean","children":[]},{"level":3,"title":"将一个类声明为 Bean 的注解有哪些?","slug":"将一个类声明为-bean-的注解有哪些","link":"#将一个类声明为-bean-的注解有哪些","children":[]},{"level":3,"title":"@component 和 @Bean的区别是什么？","slug":"component-和-bean的区别是什么","link":"#component-和-bean的区别是什么","children":[]},{"level":3,"title":"注入 Bean 的注解有哪些？","slug":"注入-bean-的注解有哪些","link":"#注入-bean-的注解有哪些","children":[]},{"level":3,"title":"@Autowired 和 @Resource 的区别是什么？","slug":"autowired-和-resource-的区别是什么","link":"#autowired-和-resource-的区别是什么","children":[]},{"level":3,"title":"注入 Bean 的方式有哪些？","slug":"注入-bean-的方式有哪些","link":"#注入-bean-的方式有哪些","children":[]},{"level":3,"title":"构造函数注入还是 Setter 注入？","slug":"构造函数注入还是-setter-注入","link":"#构造函数注入还是-setter-注入","children":[]},{"level":3,"title":"Bean的作用域有哪些？","slug":"bean的作用域有哪些","link":"#bean的作用域有哪些","children":[]},{"level":3,"title":"Bean是线程安全的吗？","slug":"bean是线程安全的吗","link":"#bean是线程安全的吗","children":[]},{"level":3,"title":"Bean的生命周期了解么？","slug":"bean的生命周期了解么","link":"#bean的生命周期了解么","children":[]}]},{"level":2,"title":"Spring AOP","slug":"spring-aop","link":"#spring-aop","children":[{"level":3,"title":"谈谈自己对于AOP的了解","slug":"谈谈自己对于aop的了解","link":"#谈谈自己对于aop的了解","children":[]},{"level":3,"title":"Spring AOP 和 AspectJ AOP 有什么区别？","slug":"spring-aop-和-aspectj-aop-有什么区别","link":"#spring-aop-和-aspectj-aop-有什么区别","children":[]},{"level":3,"title":"AOP 常见的通知类型有哪些？","slug":"aop-常见的通知类型有哪些","link":"#aop-常见的通知类型有哪些","children":[]},{"level":3,"title":"多个切面的执行顺序如何控制？","slug":"多个切面的执行顺序如何控制","link":"#多个切面的执行顺序如何控制","children":[]}]},{"level":2,"title":"Spring MVC","slug":"spring-mvc","link":"#spring-mvc","children":[{"level":3,"title":"说说自己对于 Spring MVC 了解?","slug":"说说自己对于-spring-mvc-了解","link":"#说说自己对于-spring-mvc-了解","children":[]},{"level":3,"title":"Spring MVC的核心组件有哪些？（也可以说是Spring MVC的工作原理）","slug":"spring-mvc的核心组件有哪些-也可以说是spring-mvc的工作原理","link":"#spring-mvc的核心组件有哪些-也可以说是spring-mvc的工作原理","children":[]},{"level":3,"title":"Spring MVC工作原理了解吗？","slug":"spring-mvc工作原理了解吗","link":"#spring-mvc工作原理了解吗","children":[]},{"level":3,"title":"统一异常处理怎么做？","slug":"统一异常处理怎么做","link":"#统一异常处理怎么做","children":[]}]},{"level":2,"title":"Spring框架中用到了哪些设计模式？","slug":"spring框架中用到了哪些设计模式","link":"#spring框架中用到了哪些设计模式","children":[]},{"level":2,"title":"Spring循环依赖","slug":"spring循环依赖","link":"#spring循环依赖","children":[{"level":3,"title":"Spring 循环依赖了解吗，怎么解决？","slug":"spring-循环依赖了解吗-怎么解决","link":"#spring-循环依赖了解吗-怎么解决","children":[]},{"level":3,"title":"@Lazy 能解决循环依赖吗？","slug":"lazy-能解决循环依赖吗","link":"#lazy-能解决循环依赖吗","children":[]},{"level":3,"title":"SpringBoot 允许循环依赖发生么？","slug":"springboot-允许循环依赖发生么","link":"#springboot-允许循环依赖发生么","children":[]}]},{"level":2,"title":"Spring 事务","slug":"spring-事务","link":"#spring-事务","children":[{"level":3,"title":"Spring 管理事务的方式有几种？","slug":"spring-管理事务的方式有几种","link":"#spring-管理事务的方式有几种","children":[]},{"level":3,"title":"Spring 事务中哪几种事务传播行为?","slug":"spring-事务中哪几种事务传播行为","link":"#spring-事务中哪几种事务传播行为","children":[]},{"level":3,"title":"Spring 事务中的隔离级别有哪几种?","slug":"spring-事务中的隔离级别有哪几种","link":"#spring-事务中的隔离级别有哪几种","children":[]},{"level":3,"title":"@Transactional(rollbackFor = Exception.class)注解了解吗？","slug":"transactional-rollbackfor-exception-class-注解了解吗","link":"#transactional-rollbackfor-exception-class-注解了解吗","children":[]}]},{"level":2,"title":"Spring Data JPA","slug":"spring-data-jpa","link":"#spring-data-jpa","children":[{"level":3,"title":"如何使用 JPA 在数据库中非持久化一个字段？","slug":"如何使用-jpa-在数据库中非持久化一个字段","link":"#如何使用-jpa-在数据库中非持久化一个字段","children":[]},{"level":3,"title":"JPA 的审计功能是做什么的？有什么用？","slug":"jpa-的审计功能是做什么的-有什么用","link":"#jpa-的审计功能是做什么的-有什么用","children":[]},{"level":3,"title":"实体之间的关联关系注解有哪些？","slug":"实体之间的关联关系注解有哪些","link":"#实体之间的关联关系注解有哪些","children":[]}]},{"level":2,"title":"Spring Security","slug":"spring-security","link":"#spring-security","children":[{"level":3,"title":"hasRole 和 hasAuthority 有区别吗？","slug":"hasrole-和-hasauthority-有区别吗","link":"#hasrole-和-hasauthority-有区别吗","children":[]},{"level":3,"title":"如何对密码进行加密？","slug":"如何对密码进行加密","link":"#如何对密码进行加密","children":[]},{"level":3,"title":"如何优雅更换系统使用的加密算法？","slug":"如何优雅更换系统使用的加密算法","link":"#如何优雅更换系统使用的加密算法","children":[]}]},{"level":2,"title":"Spring Framework 5 基础","slug":"spring-framework-5-基础","link":"#spring-framework-5-基础","children":[{"level":3,"title":"Spring 和 Spring 框架的组成","slug":"spring-和-spring-框架的组成","link":"#spring-和-spring-框架的组成","children":[]},{"level":3,"title":"Spring 要点","slug":"spring-要点","link":"#spring-要点","children":[]},{"level":3,"title":"Spring核心之控制反转（IOC）","slug":"spring核心之控制反转-ioc","link":"#spring核心之控制反转-ioc","children":[]},{"level":3,"title":"Spring核心之面向切面编程（AOP）","slug":"spring核心之面向切面编程-aop","link":"#spring核心之面向切面编程-aop","children":[]},{"level":3,"title":"SpringMVC请求流程和案例","slug":"springmvc请求流程和案例","link":"#springmvc请求流程和案例","children":[]},{"level":3,"title":"Spring IOC实现原理详解之IOC体系结构设计","slug":"spring-ioc实现原理详解之ioc体系结构设计","link":"#spring-ioc实现原理详解之ioc体系结构设计","children":[]}]},{"level":2,"title":"参考资料","slug":"参考资料","link":"#参考资料","children":[]}],"git":{"createdTime":1726479982000,"updatedTime":1741871688000,"contributors":[{"name":"erenjaeger","email":"ErenJaegerKing@qq.com","commits":5},{"name":"Jaeger Eren","email":"erenjaegerking@qq.com","commits":3}]},"readingTime":{"minutes":17.96,"words":5388},"filePathRelative":"notes/Java/c_spring/a_spring.md","localizedDate":"2024年12月13日","excerpt":"<h2>Spring基础</h2>\\n<h3>什么是Spring框架？</h3>\\n<p>Spring 是一款开源的轻量级 Java 开发框架</p>\\n<p>我们一般说 Spring 框架指的都是 Spring Framework，它是很多模块的集合，使用这些模块可以很方便地协助我们进行开发，比如说 Spring 支持 IoC（Inversion of Control:控制反转） 和 AOP(Aspect-Oriented Programming:面向切面编程)、可以很方便地对数据库进行访问、可以很方便地集成第三方组件（电子邮件，任务，调度，缓存等等）、对单元测试支持比较好、支持 RESTful Java 应用程序的开发。</p>","autoDesc":true}');export{g as comp,o as data};
