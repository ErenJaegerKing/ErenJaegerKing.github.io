import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,a as n,o as r}from"./app-DXxN3tRF.js";const i={};function s(o,e){return r(),a("div",null,e[0]||(e[0]=[n('<hr><div class="hint-container info"><p class="hint-container-title">相关信息</p><p>设计模式-行为型模式-策略模式</p></div><hr><h3 id="动机" tabindex="-1"><a class="header-anchor" href="#动机"><span>动机</span></a></h3><p>我们去旅游选择出行模式有很多种，可以骑自行车、可以坐汽车、可以坐火车、可以坐飞机。</p><p>作为一个程序猿，开发需要选择一款开发工具，当然可以进行代码开发的工具有很多，可以选择Idea进行开发，也可以使用eclipse进行开发，也可以使用其他的一些开发工具。</p><h3 id="定义" tabindex="-1"><a class="header-anchor" href="#定义"><span>定义</span></a></h3><p><strong>该模式定义了一系列算法，并将每个算法封装起来，使它们可以相互替换，且算法的变化不会影响使用算法的客户。</strong></p><p>策略模式属于<strong>对象行为模式</strong>，它通过对算法进行封装，把使用算法的责任和算法的实现分割开来，并委派给不同的对象对这些算法进行管理。</p><h3 id="结构" tabindex="-1"><a class="header-anchor" href="#结构"><span>结构</span></a></h3><p>策略模式的主要角色如下：</p><ul><li><strong>抽象策略（Strategy）类：</strong>:这是一个抽象角色，通常由一个接口或抽象类实现。此角色给出所有的具体策略类所需的接口。</li><li><strong>具体策略（Concrete Strategy）类</strong>：实现了抽象策略定义的接口，提供具体的算法实现或行为。</li><li><strong>环境（Context）类</strong>：持有一个策略类的引用，最终给客户端调用。</li></ul><h3 id="uml" tabindex="-1"><a class="header-anchor" href="#uml"><span>UML</span></a></h3><figure><img src="https://drawingbed-686.pages.dev/myblog/202411042232052.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="案例实现" tabindex="-1"><a class="header-anchor" href="#案例实现"><span>案例实现</span></a></h3><p>【例】促销活动</p><p>一家百货公司在定年度的促销活动。针对不同的节日（春节、中秋节、圣诞节）推出不同的促销活动，由促销员将促销活动展示给客户。</p><figure><img src="https://drawingbed-686.pages.dev/myblog/202411042232780.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="优缺点" tabindex="-1"><a class="header-anchor" href="#优缺点"><span><strong>优缺点</strong></span></a></h3><p><strong>优点：</strong></p><ul><li><p><strong>策略类之间可以自由切换</strong></p><p>由于策略类都实现同一个接口，所以使它们之间可以自由切换。</p></li><li><p><strong>易于扩展,符合“开闭原则“</strong></p><p>增加一个新的策略只需要添加一个具体的策略类即可，基本不需要改变原有的代码，符合“开闭原则“</p></li><li><p><strong>充分体现面向对象设计思想</strong></p><p>避免使用多重条件选择语句（if else）</p></li></ul><p><strong>缺点：</strong></p><ul><li><p><strong>客户端必须知道所有的策略类</strong></p><p>并自行决定使用哪一个策略类。</p></li><li><p><strong>策略模式将造成产生很多策略类</strong></p><p>可以通过使用享元模式在一定程度上减少对象的数量。</p></li></ul><h3 id="适用场景" tabindex="-1"><a class="header-anchor" href="#适用场景"><span>适用场景</span></a></h3><ul><li>一个系统需要<strong>动态地在几种算法中选择一种</strong>时，可将每个算法封装到策略类中。</li><li>一个类定义了多种行为，并且这些行为在这个类的操作中以多个条件语句的形式出现，可将<strong>每个条件分支移入它们各自的策略类中</strong>以代替这些条件语句。</li><li>系统中<strong>各算法彼此完全独立</strong>，且要求对客户隐藏具体算法的实现细节时。</li><li>系统要<strong>求使用算法的客户不应该知道其操作的数据</strong>时，可使用策略模式来隐藏与算法相关的数据结构。</li><li><strong>多个类只区别在表现行为不同</strong>，可以使用策略模式，在运行时动态选择具体要执行的行为。</li></ul><h3 id="jdk源码解析" tabindex="-1"><a class="header-anchor" href="#jdk源码解析"><span><strong>JDK源码解析</strong></span></a></h3><h4 id="arrays-sort" tabindex="-1"><a class="header-anchor" href="#arrays-sort"><span>Arrays.sort()</span></a></h4><p><code>Comparator</code> 中的策略模式。在Arrays类中有一个 <code>sort()</code> 方法</p><figure><img src="https://drawingbed-686.pages.dev/myblog/202411042233518.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>Arrays就是一个环境角色类，这个sort方法可以传一个新策略让Arrays根据这个策略来进行排序。Comparator充当的是抽象策略角色，而具体的子实现类充当的是具体策略角色。环境角色类（Arrays）应该持有抽象策略的引用来调用。</p><figure><img src="https://drawingbed-686.pages.dev/myblog/202411042235012.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="java-util-list" tabindex="-1"><a class="header-anchor" href="#java-util-list"><span>Java.util.List</span></a></h4><p>Java.util.List 就是定义了⼀个增（（set）、查（add ）、删（remove ）、改indexOf ）策略，⾄于实现这个策略的 ArrayList 、LinkedList 等类，只是在具体实现时采⽤了不同的算法。但因为它们策略⼀样，不考虑速度的情况下，使⽤时完全可以互相替换使⽤。</p>',33)]))}const g=t(i,[["render",s],["__file","b_strategy.html.vue"]]),d=JSON.parse('{"path":"/notes/designPattern/d_behavioral/b_strategy.html","title":"策略模式","lang":"zh-CN","frontmatter":{"icon":"","description":"相关信息 设计模式-行为型模式-策略模式 动机 我们去旅游选择出行模式有很多种，可以骑自行车、可以坐汽车、可以坐火车、可以坐飞机。 作为一个程序猿，开发需要选择一款开发工具，当然可以进行代码开发的工具有很多，可以选择Idea进行开发，也可以使用eclipse进行开发，也可以使用其他的一些开发工具。 定义 该模式定义了一系列算法，并将每个算法封装起来，使...","title":"策略模式","date":"2024-11-04T00:00:00.000Z","category":["设计模式"],"tag":["行为型模式","策略模式"],"order":2,"head":[["meta",{"property":"og:url","content":"https://he9.xin/notes/designPattern/d_behavioral/b_strategy.html"}],["meta",{"property":"og:site_name","content":"春风不语即随本心"}],["meta",{"property":"og:title","content":"策略模式"}],["meta",{"property":"og:description","content":"相关信息 设计模式-行为型模式-策略模式 动机 我们去旅游选择出行模式有很多种，可以骑自行车、可以坐汽车、可以坐火车、可以坐飞机。 作为一个程序猿，开发需要选择一款开发工具，当然可以进行代码开发的工具有很多，可以选择Idea进行开发，也可以使用eclipse进行开发，也可以使用其他的一些开发工具。 定义 该模式定义了一系列算法，并将每个算法封装起来，使..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://drawingbed-686.pages.dev/myblog/202411042232052.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-11-05T01:10:12.000Z"}],["meta",{"property":"article:author","content":"ErenJaegerKing"}],["meta",{"property":"article:tag","content":"行为型模式"}],["meta",{"property":"article:tag","content":"策略模式"}],["meta",{"property":"article:published_time","content":"2024-11-04T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-11-05T01:10:12.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"策略模式\\",\\"image\\":[\\"https://drawingbed-686.pages.dev/myblog/202411042232052.png\\",\\"https://drawingbed-686.pages.dev/myblog/202411042232780.png\\",\\"https://drawingbed-686.pages.dev/myblog/202411042233518.png\\",\\"https://drawingbed-686.pages.dev/myblog/202411042235012.png\\"],\\"datePublished\\":\\"2024-11-04T00:00:00.000Z\\",\\"dateModified\\":\\"2024-11-05T01:10:12.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"ErenJaegerKing\\",\\"url\\":\\"https://he9.xin\\",\\"email\\":\\"erenjaegerking@qq.com\\"}]}"]]},"headers":[{"level":3,"title":"动机","slug":"动机","link":"#动机","children":[]},{"level":3,"title":"定义","slug":"定义","link":"#定义","children":[]},{"level":3,"title":"结构","slug":"结构","link":"#结构","children":[]},{"level":3,"title":"UML","slug":"uml","link":"#uml","children":[]},{"level":3,"title":"案例实现","slug":"案例实现","link":"#案例实现","children":[]},{"level":3,"title":"优缺点","slug":"优缺点","link":"#优缺点","children":[]},{"level":3,"title":"适用场景","slug":"适用场景","link":"#适用场景","children":[]},{"level":3,"title":"JDK源码解析","slug":"jdk源码解析","link":"#jdk源码解析","children":[]}],"git":{"createdTime":1730731001000,"updatedTime":1730769012000,"contributors":[{"name":"LiYaoYu","email":"ErenJaegerKing@qq.com","commits":4}]},"readingTime":{"minutes":3.39,"words":1017},"filePathRelative":"notes/designPattern/d_behavioral/b_strategy.md","localizedDate":"2024年11月4日","excerpt":"<hr>\\n<div class=\\"hint-container info\\">\\n<p class=\\"hint-container-title\\">相关信息</p>\\n<p>设计模式-行为型模式-策略模式</p>\\n</div>\\n<hr>\\n<h3>动机</h3>\\n<p>我们去旅游选择出行模式有很多种，可以骑自行车、可以坐汽车、可以坐火车、可以坐飞机。</p>\\n<p>作为一个程序猿，开发需要选择一款开发工具，当然可以进行代码开发的工具有很多，可以选择Idea进行开发，也可以使用eclipse进行开发，也可以使用其他的一些开发工具。</p>\\n<h3>定义</h3>\\n<p><strong>该模式定义了一系列算法，并将每个算法封装起来，使它们可以相互替换，且算法的变化不会影响使用算法的客户。</strong></p>","autoDesc":true}');export{g as comp,d as data};
