import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as t,e as l,o as n}from"./app-CQMTQ3TI.js";const i={};function r(h,e){return n(),t("div",null,e[0]||(e[0]=[l('<h2 id="线程" tabindex="-1"><a class="header-anchor" href="#线程"><span>线程</span></a></h2><h3 id="什么是线程和进程" tabindex="-1"><a class="header-anchor" href="#什么是线程和进程"><span>什么是线程和进程？</span></a></h3><p>何为进程？进程是程序的一次执行过程，是系统运行程序的基本单位。比如说在windows系统上查询任务管理器，就可以看到.exe运行的进程</p><p>何为线程？一个进程在其执行的过程中可以产生多个线程。与线程不同的就是同类的多个线程共享进程中的堆和方法去的资源，但每个线程都有自己的程序计数器、虚拟机栈和本地方法栈。</p><h3 id="java-线程和操作系统的线程有啥区别" tabindex="-1"><a class="header-anchor" href="#java-线程和操作系统的线程有啥区别"><span>Java 线程和操作系统的线程有啥区别？</span></a></h3><p>现在的 Java 线程的本质其实就是操作系统的线程。</p><h3 id="请简要描述线程与进程的关系-区别及优缺点" tabindex="-1"><a class="header-anchor" href="#请简要描述线程与进程的关系-区别及优缺点"><span>请简要描述线程与进程的关系,区别及优缺点？</span></a></h3><p>一个进程中可以有多个线程，多个线程共享进程中的堆和方法区（JDK1.8之后的元空间）资源，但是每个线程都有自己的虚拟机栈、程序计数器和本地方法栈</p><p>总结：线程是进程划分成的更小的运行单位。线程和进程最大的不同在于基本上各进程是独立的，而各线程则不一定，因为同一个进程的线程极有可能相互影响。</p><h3 id="如何创建线程" tabindex="-1"><a class="header-anchor" href="#如何创建线程"><span>如何创建线程？</span></a></h3><ul><li>继承Thread类</li><li>实现Runnable接口</li><li>实现Callable接口</li><li>使用线程池</li><li>使用CompletableFuture</li></ul><p>严格来说，java只有一种方式可以创建线程，那就是通过new Thread().start()创建。不管是哪种方法，最终都依赖于new Thread().start()</p><h3 id="说说线程的生命周期和状态" tabindex="-1"><a class="header-anchor" href="#说说线程的生命周期和状态"><span>说说线程的生命周期和状态</span></a></h3><p>new初始化状态 runnable运行状态 调用start()等待运行的状态 blocked阻塞状态 需要等待锁释放 waiting等待状态 需要等待其他线程做出一些反应（通知或中断） time_waiting超时等待状态 在等待指定时间自行返回而不是像waiting那样一直等待 terminated终止状态 线程已经运行完毕</p><h3 id="什么是线程上下文切换" tabindex="-1"><a class="header-anchor" href="#什么是线程上下文切换"><span>什么是线程上下文切换?</span></a></h3><p>线程切换意味需要保存当前线程的上下文，留待线程下次占用CPU的时候恢复现场。并加载下一个将要占用CPU的线程上下文。这就是所谓的上下文切换。</p><h3 id="thread-sleep-方法和-object-wait-方法对比" tabindex="-1"><a class="header-anchor" href="#thread-sleep-方法和-object-wait-方法对比"><span>Thread#sleep() 方法和 Object#wait() 方法对比</span></a></h3><p>共同点：两者都可以暂停线程的执行。</p><p>区别：</p><ul><li>wait方法释放了锁 sleep方法没有释放锁</li><li>wait通常用于线程间交互/通信 sleep暂停执行</li><li>wait被调用后，线程不会自动苏醒，需要别的线程调用同一个对象的notify或notifyAll sleep执行完成后，线程自动苏醒，或者wait（long timeout）超时后线程会自动苏醒</li><li>wait是object本地方法，sleep是thread类的静态本地方法</li></ul><h3 id="为什么-wait-方法不定义在-thread-中" tabindex="-1"><a class="header-anchor" href="#为什么-wait-方法不定义在-thread-中"><span>为什么 wait() 方法不定义在 Thread 中？</span></a></h3><p>wait是为获得对象锁的线程实现等待，会自动释放当前线程占有的对象锁。每个对象中都有对象锁，所以放在object中</p><p>sleep只是暂停线程，所以就放在thread中</p><h3 id="可以直接调用-thread-类的-run-方法吗" tabindex="-1"><a class="header-anchor" href="#可以直接调用-thread-类的-run-方法吗"><span>可以直接调用 Thread 类的 run 方法吗？</span></a></h3><p>不可以，调用start方法可启动线程并使线程进入就绪状态，直接运行run方法的话不会以多线程的方式执行。</p><h2 id="多线程" tabindex="-1"><a class="header-anchor" href="#多线程"><span>多线程</span></a></h2><h3 id="并发与并行的区别" tabindex="-1"><a class="header-anchor" href="#并发与并行的区别"><span>并发与并行的区别</span></a></h3><ul><li>并发：两个及以上的作业在同一时间段执行</li><li>并行：两个及以上的作业在同一时刻执行</li></ul><h3 id="同步和异步的区别" tabindex="-1"><a class="header-anchor" href="#同步和异步的区别"><span>同步和异步的区别</span></a></h3><ul><li>同步：发出一个调用之后，在没有得到结果之前，该调用一直就不可以返回，一直等待</li><li>异步：调用在发出之后，不用等待返回结果，该调用直接返回</li></ul><h3 id="为什么要使用多线程" tabindex="-1"><a class="header-anchor" href="#为什么要使用多线程"><span>为什么要使用多线程?</span></a></h3><p>多核CPU时代意味着多个线程可以同时运行，这减少了线程上下文切换的开销</p><h3 id="" tabindex="-1"><a class="header-anchor" href="#"><span></span></a></h3>',33)]))}const d=a(i,[["render",r],["__file","a_juc.html.vue"]]),c=JSON.parse('{"path":"/notes/Java/b_advance/a_juc.html","title":"并发编程","lang":"zh-CN","frontmatter":{"icon":"","description":"线程 什么是线程和进程？ 何为进程？进程是程序的一次执行过程，是系统运行程序的基本单位。比如说在windows系统上查询任务管理器，就可以看到.exe运行的进程 何为线程？一个进程在其执行的过程中可以产生多个线程。与线程不同的就是同类的多个线程共享进程中的堆和方法去的资源，但每个线程都有自己的程序计数器、虚拟机栈和本地方法栈。 Java 线程和操作系统...","title":"并发编程","date":"2024-09-23T00:00:00.000Z","category":["Java"],"tag":["JUC"],"order":1,"head":[["meta",{"property":"og:url","content":"https://he9.xin/notes/Java/b_advance/a_juc.html"}],["meta",{"property":"og:site_name","content":"春风不语即随本心"}],["meta",{"property":"og:title","content":"并发编程"}],["meta",{"property":"og:description","content":"线程 什么是线程和进程？ 何为进程？进程是程序的一次执行过程，是系统运行程序的基本单位。比如说在windows系统上查询任务管理器，就可以看到.exe运行的进程 何为线程？一个进程在其执行的过程中可以产生多个线程。与线程不同的就是同类的多个线程共享进程中的堆和方法去的资源，但每个线程都有自己的程序计数器、虚拟机栈和本地方法栈。 Java 线程和操作系统..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-03-16T09:18:16.000Z"}],["meta",{"property":"article:author","content":"ErenJaegerKing"}],["meta",{"property":"article:tag","content":"JUC"}],["meta",{"property":"article:published_time","content":"2024-09-23T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-03-16T09:18:16.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"并发编程\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-09-23T00:00:00.000Z\\",\\"dateModified\\":\\"2025-03-16T09:18:16.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"ErenJaegerKing\\",\\"url\\":\\"https://he9.xin\\",\\"email\\":\\"erenjaegerking@qq.com\\"}]}"]]},"headers":[{"level":2,"title":"线程","slug":"线程","link":"#线程","children":[{"level":3,"title":"什么是线程和进程？","slug":"什么是线程和进程","link":"#什么是线程和进程","children":[]},{"level":3,"title":"Java 线程和操作系统的线程有啥区别？","slug":"java-线程和操作系统的线程有啥区别","link":"#java-线程和操作系统的线程有啥区别","children":[]},{"level":3,"title":"请简要描述线程与进程的关系,区别及优缺点？","slug":"请简要描述线程与进程的关系-区别及优缺点","link":"#请简要描述线程与进程的关系-区别及优缺点","children":[]},{"level":3,"title":"如何创建线程？","slug":"如何创建线程","link":"#如何创建线程","children":[]},{"level":3,"title":"说说线程的生命周期和状态","slug":"说说线程的生命周期和状态","link":"#说说线程的生命周期和状态","children":[]},{"level":3,"title":"什么是线程上下文切换?","slug":"什么是线程上下文切换","link":"#什么是线程上下文切换","children":[]},{"level":3,"title":"Thread#sleep() 方法和 Object#wait() 方法对比","slug":"thread-sleep-方法和-object-wait-方法对比","link":"#thread-sleep-方法和-object-wait-方法对比","children":[]},{"level":3,"title":"为什么 wait() 方法不定义在 Thread 中？","slug":"为什么-wait-方法不定义在-thread-中","link":"#为什么-wait-方法不定义在-thread-中","children":[]},{"level":3,"title":"可以直接调用 Thread 类的 run 方法吗？","slug":"可以直接调用-thread-类的-run-方法吗","link":"#可以直接调用-thread-类的-run-方法吗","children":[]}]},{"level":2,"title":"多线程","slug":"多线程","link":"#多线程","children":[{"level":3,"title":"并发与并行的区别","slug":"并发与并行的区别","link":"#并发与并行的区别","children":[]},{"level":3,"title":"同步和异步的区别","slug":"同步和异步的区别","link":"#同步和异步的区别","children":[]},{"level":3,"title":"为什么要使用多线程?","slug":"为什么要使用多线程","link":"#为什么要使用多线程","children":[]},{"level":3,"title":"","slug":"","link":"#","children":[]}]}],"git":{"createdTime":1726501168000,"updatedTime":1742116696000,"contributors":[{"name":"Jaeger Eren","email":"erenjaegerking@qq.com","commits":4},{"name":"erenjaeger","email":"ErenJaegerKing@qq.com","commits":1}]},"readingTime":{"minutes":3.37,"words":1012},"filePathRelative":"notes/Java/b_advance/a_juc.md","localizedDate":"2024年9月23日","excerpt":"<h2>线程</h2>\\n<h3>什么是线程和进程？</h3>\\n<p>何为进程？进程是程序的一次执行过程，是系统运行程序的基本单位。比如说在windows系统上查询任务管理器，就可以看到.exe运行的进程</p>\\n<p>何为线程？一个进程在其执行的过程中可以产生多个线程。与线程不同的就是同类的多个线程共享进程中的堆和方法去的资源，但每个线程都有自己的程序计数器、虚拟机栈和本地方法栈。</p>\\n<h3>Java 线程和操作系统的线程有啥区别？</h3>\\n<p>现在的 Java 线程的本质其实就是操作系统的线程。</p>\\n<h3>请简要描述线程与进程的关系,区别及优缺点？</h3>\\n<p>一个进程中可以有多个线程，多个线程共享进程中的堆和方法区（JDK1.8之后的元空间）资源，但是每个线程都有自己的虚拟机栈、程序计数器和本地方法栈</p>","autoDesc":true}');export{d as comp,c as data};
