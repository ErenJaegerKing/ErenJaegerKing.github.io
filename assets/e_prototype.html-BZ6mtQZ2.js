import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,e as n,o as a}from"./app-1WoBqwSS.js";const t={};function l(r,e){return a(),s("div",null,e[0]||(e[0]=[n(`<hr><div class="hint-container info"><p class="hint-container-title">相关信息</p><p>设计模式-创建型模式-原型模式</p></div><hr><h3 id="意图" tabindex="-1"><a class="header-anchor" href="#意图"><span>意图</span></a></h3><p>使你能够复制已有对象，而无需使代码依赖它们所属的类</p><h3 id="定义" tabindex="-1"><a class="header-anchor" href="#定义"><span>定义</span></a></h3><p><strong>用一个已经创建的实例作为原型，通过复制该原型对象来创建一个和原型对象相同的新对象。</strong></p><h3 id="结构" tabindex="-1"><a class="header-anchor" href="#结构"><span><strong>结构</strong></span></a></h3><p>原型模式包含如下角色：</p><ul><li><strong>抽象原型类</strong>：规定了具体原型对象必须实现的的 clone() 方法。</li><li><strong>具体原型类</strong>：实现抽象原型类的 clone() 方法，它是可被复制的对象。</li><li><strong>访问类</strong>：使用具体原型类中的 clone() 方法来复制新的对象。</li></ul><h3 id="uml" tabindex="-1"><a class="header-anchor" href="#uml"><span>UML</span></a></h3><figure><img src="https://drawingbed-686.pages.dev/myblog/202411122247322.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="实现" tabindex="-1"><a class="header-anchor" href="#实现"><span><strong>实现</strong></span></a></h3><p>原型模式的克隆分为浅克隆和深克隆。</p><blockquote><p>浅克隆：创建一个新对象，新对象的属性和原来对象完全相同，对于非基本类型属性，仍指向原有属性所指向的对象的内存地址。</p><p>深克隆：创建一个新对象，属性中引用的其他对象也会被克隆，不再指向原有对象地址。</p></blockquote><p>Java 中的 Object 类中提供了 clone()方法来实现浅克隆。 Cloneable 接口是上面的类图中的抽象原型类，而实现了 Cloneable 接口的子实现类就是具体的原型类。</p><p><strong>Realizetype（具体的原型类）：</strong></p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Realizetype</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> implements</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Cloneable</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> Realizetype</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Override</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    protected</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Realizetype</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> clone</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> throws</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> CloneNotSupportedException</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (Realizetype) </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">super</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">clone</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="优缺点" tabindex="-1"><a class="header-anchor" href="#优缺点"><span>优缺点</span></a></h3><p><strong>优点：</strong></p><ul><li>你可以克隆对象，  而无需与它们所属的具体类相耦合。</li><li>你可以克隆预生成原型，  避免反复运行初始化代码。</li><li>你可以更方便地生成复杂对象。</li><li>你可以用继承以外的方式来处理复杂对象的不同配置。</li></ul><p><strong>缺点：</strong> •   克隆包含循环引用的复杂对象可能会非常麻烦。</p><h3 id="使用场景" tabindex="-1"><a class="header-anchor" href="#使用场景"><span>使用场景</span></a></h3><ul><li>对象的创建非常复杂，可以使用原型模式快捷的创建对象。</li><li>性能和安全要求比较高。</li></ul><h3 id="适用场景" tabindex="-1"><a class="header-anchor" href="#适用场景"><span>适用场景</span></a></h3><p><strong>如果你需要复制一些对象，  同时又希望代码独立于这些对象所属的具体类，  可以使用原型模式。</strong></p><p>这一点考量通常出现在代码需要处理第三方代码通过接口传递过来的对象时。  即使不考虑代码耦合的情况，  你的代码也不能依赖这些对象所属的具体类，  因为你不知道它们的具体信息。</p><p>原型模式为客户端代码提供一个通用接口，  客户端代码可通过这一接口与所有实现了克隆的对象进行交互，  它也使得客户端代码与其所克隆的对象具体类独立开来。</p><p><strong>如果子类的区别仅在于其对象的初始化方式，  那么你可以使用该模式来减少子类的数量。  别人创建这些子类的目的可能是为了创建特定类型的对象。</strong></p><p>在原型模式中，  你可以使用一系列预生成的、  各种类型的对象作为原型。</p><p>客户端不必根据需求对子类进行实例化，  只需找到合适的原型并对其进行克隆即可。</p><h3 id="扩展-深克隆" tabindex="-1"><a class="header-anchor" href="#扩展-深克隆"><span><strong>扩展（深克隆）</strong></span></a></h3><p>进行深克隆需要使用对象流。必须实现 Serializable 接口，否则会抛 NotSerializableException 异常。</p>`,33)]))}const o=i(t,[["render",l],["__file","e_prototype.html.vue"]]),d=JSON.parse('{"path":"/notes/designPattern/b_creation/e_prototype.html","title":"原型模式","lang":"zh-CN","frontmatter":{"icon":"","description":"相关信息 设计模式-创建型模式-原型模式 意图 使你能够复制已有对象，而无需使代码依赖它们所属的类 定义 用一个已经创建的实例作为原型，通过复制该原型对象来创建一个和原型对象相同的新对象。 结构 原型模式包含如下角色： 抽象原型类：规定了具体原型对象必须实现的的 clone() 方法。 具体原型类：实现抽象原型类的 clone() 方法，它是可被复制的...","title":"原型模式","date":"2024-11-15T00:00:00.000Z","category":["设计模式"],"tag":["创建型模式","原型模式"],"order":5,"head":[["meta",{"property":"og:url","content":"https://he9.xin/notes/designPattern/b_creation/e_prototype.html"}],["meta",{"property":"og:site_name","content":"春风不语即随本心"}],["meta",{"property":"og:title","content":"原型模式"}],["meta",{"property":"og:description","content":"相关信息 设计模式-创建型模式-原型模式 意图 使你能够复制已有对象，而无需使代码依赖它们所属的类 定义 用一个已经创建的实例作为原型，通过复制该原型对象来创建一个和原型对象相同的新对象。 结构 原型模式包含如下角色： 抽象原型类：规定了具体原型对象必须实现的的 clone() 方法。 具体原型类：实现抽象原型类的 clone() 方法，它是可被复制的..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://drawingbed-686.pages.dev/myblog/202411122247322.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-11-12T14:53:10.000Z"}],["meta",{"property":"article:author","content":"ErenJaegerKing"}],["meta",{"property":"article:tag","content":"创建型模式"}],["meta",{"property":"article:tag","content":"原型模式"}],["meta",{"property":"article:published_time","content":"2024-11-15T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-11-12T14:53:10.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"原型模式\\",\\"image\\":[\\"https://drawingbed-686.pages.dev/myblog/202411122247322.png\\"],\\"datePublished\\":\\"2024-11-15T00:00:00.000Z\\",\\"dateModified\\":\\"2024-11-12T14:53:10.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"ErenJaegerKing\\",\\"url\\":\\"https://he9.xin\\",\\"email\\":\\"erenjaegerking@qq.com\\"}]}"]]},"headers":[{"level":3,"title":"意图","slug":"意图","link":"#意图","children":[]},{"level":3,"title":"定义","slug":"定义","link":"#定义","children":[]},{"level":3,"title":"结构","slug":"结构","link":"#结构","children":[]},{"level":3,"title":"UML","slug":"uml","link":"#uml","children":[]},{"level":3,"title":"实现","slug":"实现","link":"#实现","children":[]},{"level":3,"title":"优缺点","slug":"优缺点","link":"#优缺点","children":[]},{"level":3,"title":"使用场景","slug":"使用场景","link":"#使用场景","children":[]},{"level":3,"title":"适用场景","slug":"适用场景","link":"#适用场景","children":[]},{"level":3,"title":"扩展（深克隆）","slug":"扩展-深克隆","link":"#扩展-深克隆","children":[]}],"git":{"createdTime":1730726433000,"updatedTime":1731423190000,"contributors":[{"name":"LiYaoYu","email":"ErenJaegerKing@qq.com","commits":4}]},"readingTime":{"minutes":2.89,"words":868},"filePathRelative":"notes/designPattern/b_creation/e_prototype.md","localizedDate":"2024年11月15日","excerpt":"<hr>\\n<div class=\\"hint-container info\\">\\n<p class=\\"hint-container-title\\">相关信息</p>\\n<p>设计模式-创建型模式-原型模式</p>\\n</div>\\n<hr>\\n<h3>意图</h3>\\n<p>使你能够复制已有对象，而无需使代码依赖它们所属的类</p>\\n<h3>定义</h3>\\n<p><strong>用一个已经创建的实例作为原型，通过复制该原型对象来创建一个和原型对象相同的新对象。</strong></p>\\n<h3><strong>结构</strong></h3>\\n<p>原型模式包含如下角色：</p>\\n<ul>\\n<li><strong>抽象原型类</strong>：规定了具体原型对象必须实现的的 clone() 方法。</li>\\n<li><strong>具体原型类</strong>：实现抽象原型类的 clone() 方法，它是可被复制的对象。</li>\\n<li><strong>访问类</strong>：使用具体原型类中的 clone() 方法来复制新的对象。</li>\\n</ul>","autoDesc":true}');export{o as comp,d as data};
