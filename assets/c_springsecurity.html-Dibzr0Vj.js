import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as e,e as t,o as a}from"./app-BAv5x_rI.js";const n={};function l(p,i){return a(),e("div",null,i[0]||(i[0]=[t(`<h2 id="简介" tabindex="-1"><a class="header-anchor" href="#简介"><span>简介</span></a></h2><ul><li><p>Spring Security 是 Spring 家族中的一个安全管理框架，Web应用的需要进行认证和授权。</p></li><li><p>认证：验证当前访问系统的是不是本系统的用户，并且要确认具体是哪个用户</p></li><li><p>授权：经过认证后判断当前用户是否有权限进行某个操作</p></li><li><p>核心功能：认证与授权</p></li></ul><h2 id="认证" tabindex="-1"><a class="header-anchor" href="#认证"><span>认证</span></a></h2><p>SpringSecurity的原理其实就是一个过滤器链，内部包含了提供各种功能的过滤器。</p><figure><img src="https://drawingbed-686.pages.dev/myblog/202412091416667.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li><strong>UsernamePasswordAuthenticationFilter</strong>:负责处理我们在登陆页面填写了用户名密码后的登陆请求。</li><li><strong>ExceptionTranslationFilter</strong>:处理过滤器链中抛出的任何AccessDeniedException和 AuthenticationException 。</li><li><strong>FilterSecurityInterceptor</strong>:负责权限校验的过滤器。我们可以通过Debug查看当前系统中SpringSecurity过滤器链中有哪些过滤器及它们的顺序。</li></ul><p>其中<strong>UsernamePasswordAuthenticationFilter</strong>中</p><ul><li><p><code>AbstracntAuthenticationProcessingFilter</code>接口: 它的实现类，表示当前访问系统的用户，封装了用户相关信息。</p></li><li><p><code>AuthenticationManager</code>接口：定义了认证Authentication的方法</p></li><li><p><code>AbstractUserDetilsAuthenticatioProvider</code>接口：加载用户特定数据的核心接口。里面定义了一个根据用户名查询用户信息的方法，然后将获得这些信息封装到Authentication对象中返回给给当前访问的接口，然后存放到SecurityContextHolder的上下文中</p></li><li><p><code>UserDetailsService</code>接口：提供核心用户信息。通过UserDetailsService根据用户名获取处理的用户信息要封装成UserDetails对象返回。</p></li></ul><p>1、自定义登录接口（认证） 调用<code>ProviderManager</code>的方法进行认证 如果认证通过生成jwt，把用户信息存入redis中</p><blockquote><p><code>SpringSecurity</code>在默认的认证过程中如果账号密码校验成功会返回Authentication对象之后 <code>UsernamePasswordAuthenticationFilter</code>会将用户信息<code>Authentication</code>存入 <code>SecurityContextHolder</code>中</p></blockquote><p>具体实现的步骤：在接口中我们通过AuthenticationManager的authenticate方法来进行用户认证,所以需要在SecurityConfig中配置把AuthenticationManager注入容器。</p><p>让springsecuriety对这个接口放行，让用户访问这个接口的时候不用登录也能访问。</p><p>2、自定义UserDetailsService接口（从数据库中查询用户信息包括权限封装到UserDetails实现类中）</p><p>在这个实现类中去查询数据库</p><p>校验：定义Jwt认证过滤器 获取token 解析token获取其中的userid 从redis中获取用户信息 存入SecurityContextHolder</p><blockquote><p><code>SpringSecurity</code> 默认是在内存中查找对应的用户名密码然后封装成<code>UserDetai</code>l对象交给 <code>DaoAuthenticationProcider</code>校验 但是我们在实际运用场景中是从数据库中查找用户信息 所以此时我们需要写一个<code>UserDetailsService</code>的实现类用来在数据库中查询用户信息并且封装到<code>UserDetai</code>l对象中</p></blockquote><p>3、使用BCryptPasswordEncoder加密解密，注入到springsecurity的容器中去，保证账号密码的安全性。</p><p>认证需要将AuthenticationManager注入容器，认证的时候可以调用</p><p>4、认证过滤器（添加到过滤器链中）</p><p>我们需要自定义一个过滤器，这个过滤器会去获取请求头中的token，对token进行解析取出其中的userid。(主要作用于除登录外的请求)</p><p>使用userid去redis中获取对应的LoginUser对象。</p><p>然后封装Authentication对象存入SecurityContextHolder</p><p>5、退出登录</p><p>获取securitycontextholder中的认证信息，删除redis中对应的数据</p><p>6、自定义失败处理器</p><p>在SpringSecurity中，如果我们在认证或者授权的过程中出现了异常会被ExceptionTranslationFilter捕获到。在ExceptionTranslationFilter中会去判断是认证失败还是授权失败出现的异常。</p><p>如果是认证过程中出现的异常会被封装成AuthenticationException然后调用<strong>AuthenticationEntryPoint</strong>对象的方法去进行异常处理。</p><p>如果是授权过程中出现的异常会被封装成AccessDeniedException然后调用<strong>AccessDeniedHandler</strong>对象的方法去进行异常处理。</p><p>所以如果我们需要自定义异常处理，我们只需要自定义AuthenticationEntryPoint和AccessDeniedHandler然后配置SpringSecurity即可。</p><h2 id="认证架构" tabindex="-1"><a class="header-anchor" href="#认证架构"><span>认证架构</span></a></h2><figure><img src="https://drawingbed-686.pages.dev/myblog/202412091531833.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>https://springdoc.cn/spring-security/servlet/authentication/architecture.html 文档中文网</p><h2 id="授权-rbac基于角色的权限控制" tabindex="-1"><a class="header-anchor" href="#授权-rbac基于角色的权限控制"><span>授权 （RBAC基于角色的权限控制）</span></a></h2><p>在SpringSecurity中，会使用默认的FilterSecurityInterceptor来进行权限校验。在</p><p>FilterSecurityInterceptor中会从SecurityContextHolder获取其中的Authentication，然后获取其中的权限信息。当判断当前用户是否拥有访问当前资源所需的权限。</p><p>所以我们在项目中只需要把当前登录用户的权限信息也存入Authentication。</p><p>然后设置我们的资源所需要的权限即可。</p><p>1.限制访问资源所需权限</p><p>基于注解的权限控制方案、开启相关配置</p><p>2、封装权限信息</p><p>在UserDetails的实现类中的getAuthorities这个方法进行修改：把permissions中字符串类型的权限信息转换成GrantedAuthority对象存入authorities</p><p>在UserDetailsService的实现类中查询用户信息顺带将权限信息封装到UserDetails的实现类中</p><p>过滤器记得将当前用户的权限信息存入到authentication中</p><h2 id="权限校验" tabindex="-1"><a class="header-anchor" href="#权限校验"><span>权限校验</span></a></h2><h3 id="其它权限校验方法" tabindex="-1"><a class="header-anchor" href="#其它权限校验方法"><span>其它权限校验方法</span></a></h3><p>@PreAuthorize注解（hasAnyAuthority，hasRole，hasAnyRole等）</p><p>hasAuthority方法实际是执行到了SecurityExpressionRoot的hasAuthority，其内部是调用authentication中的getAuthorities方法获取用户的权限列表</p><ul><li><p>hasRole要求有对应的角色才可以访问，但是它内部会把我们传入的参数拼接上 <strong>ROLE_</strong> 后再去比较。</p></li><li><p>hasAnyAuthority方法可以传入多个权限，只有用户有其中任意一个权限都可以访问对应资源。</p></li><li><p>hasAnyRole 有任意的角色就可以访问。它内部也会把我们传入的参数拼接上 <strong>ROLE_</strong> 后再去比较。</p></li></ul><h3 id="自定义权限校验方法" tabindex="-1"><a class="header-anchor" href="#自定义权限校验方法"><span>自定义权限校验方法</span></a></h3><p>我们可以自定义自己的权限校验方法</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Component</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;ex&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> SGExpressionRoot</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> boolean</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> hasAuthority</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> authority</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        //获取当前用户的权限</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">        Authentication</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> authentication</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">                SecurityContextHolder</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getContext</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">().</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getAuthentication</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">        LoginUser</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> loginUser</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (LoginUser) </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">authentication</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getPrincipal</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">        List</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&gt; </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">permissions</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> loginUser</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getPermissions</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        //判断用户权限集合中是否存在authority</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> permissions</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">contains</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(authority);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">RequestMapping</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;/hello&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">PreAuthorize</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;@ex.hasAuthority(&#39;system:dept:list&#39;)&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> String</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> hello</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(){</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;hello&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="基于配置的权限控制" tabindex="-1"><a class="header-anchor" href="#基于配置的权限控制"><span>基于配置的权限控制</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 对于登录接口 允许匿名访问</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">antMatchers</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;/user/login&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">).</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">anonymous</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">antMatchers</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;/testCors&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">).</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">hasAuthority</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;system:dept:123&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 除上面外的所有请求全部需要鉴权认证</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">anyRequest</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">().</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">authenticated</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="csrf-原因是依靠cookie-和-跨域" tabindex="-1"><a class="header-anchor" href="#csrf-原因是依靠cookie-和-跨域"><span>CSRF（原因是依靠Cookie） 和 跨域</span></a></h3><p>CSRF是指跨站请求伪造（Cross-site request forgery），是web常见的攻击之一。</p><p>https://blog.csdn.net/freeking101/article/details/86537087</p><p>SpringSecurity去防止CSRF攻击的方式就是通过csrf_token。后端会生成一个csrf_token，前端发起请</p><p>求的时候需要携带这个csrf_token,后端会有过滤器进行校验，如果没有携带或者是伪造的就不允许访问。</p><p>我们可以发现CSRF攻击依靠的是cookie中所携带的认证信息。但是在前后端分离的项目中我们的认证信</p><p>息其实是token，而token并不是存储中cookie中，并且需要前端代码去把token设置到请求头中才可</p><p>以，所以CSRF攻击也就不用担心了。</p><h2 id="原理-看图" tabindex="-1"><a class="header-anchor" href="#原理-看图"><span>原理（看图）</span></a></h2><p>时序图</p><figure><img src="https://drawingbed-686.pages.dev/myblog/202412091712835.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>认证流程</p><figure><img src="https://drawingbed-686.pages.dev/myblog/202412091733739.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>通俗易懂</p><figure><img src="https://drawingbed-686.pages.dev/myblog/202412091735295.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>过滤链</p><figure><img src="https://drawingbed-686.pages.dev/myblog/202412091737692.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>通俗易懂2</p><figure><img src="https://drawingbed-686.pages.dev/myblog/202412091740565.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="认证流程及鉴权流程-以后深入学习的时候再去了解" tabindex="-1"><a class="header-anchor" href="#认证流程及鉴权流程-以后深入学习的时候再去了解"><span>认证流程及鉴权流程（以后深入学习的时候再去了解）</span></a></h2><p>https://blog.csdn.net/qq_60264381/article/details/123071739</p><p>参考资料：</p><p>1、<a href="https://www.bilibili.com/video/BV1mm4y1X7Hc/?spm_id_from=333.337.search-card.all.click&amp;vd_source=834d9d69a86c55d6acbaf9e5dbe37bb2" target="_blank" rel="noopener noreferrer">三更学堂（springsecurity）</a></p><p>2、<a href="https://springdoc.cn/spring-security/servlet/authentication/architecture.html" target="_blank" rel="noopener noreferrer">SpringSecurity中文文档</a></p><p>3、http://niocoder.com/2018/01/02/Spring-Security源码分析一-Spring-Security认证过程/ 「龙飞」</p><p>4、通俗易懂 https://www.cnblogs.com/qiantao/p/14605154.html</p><p>5、通俗易懂2 https://www.cnblogs.com/CF1314/p/14766623.html</p><p>6、认证流程及鉴权流程 https://blog.csdn.net/qq_60264381/article/details/123071739</p>`,81)]))}const d=s(n,[["render",l],["__file","c_springsecurity.html.vue"]]),o=JSON.parse('{"path":"/notes/Java/c_spring/c_springsecurity.html","title":"SpringSecurity","lang":"zh-CN","frontmatter":{"icon":"","description":"简介 Spring Security 是 Spring 家族中的一个安全管理框架，Web应用的需要进行认证和授权。 认证：验证当前访问系统的是不是本系统的用户，并且要确认具体是哪个用户 授权：经过认证后判断当前用户是否有权限进行某个操作 核心功能：认证与授权 认证 SpringSecurity的原理其实就是一个过滤器链，内部包含了提供各种功能的过滤器。...","title":"SpringSecurity","date":"2024-12-05T00:00:00.000Z","category":["Spring"],"tag":["SpringSecurity"],"order":3,"head":[["meta",{"property":"og:url","content":"https://he9.xin/notes/Java/c_spring/c_springsecurity.html"}],["meta",{"property":"og:site_name","content":"春风不语即随本心"}],["meta",{"property":"og:title","content":"SpringSecurity"}],["meta",{"property":"og:description","content":"简介 Spring Security 是 Spring 家族中的一个安全管理框架，Web应用的需要进行认证和授权。 认证：验证当前访问系统的是不是本系统的用户，并且要确认具体是哪个用户 授权：经过认证后判断当前用户是否有权限进行某个操作 核心功能：认证与授权 认证 SpringSecurity的原理其实就是一个过滤器链，内部包含了提供各种功能的过滤器。..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://drawingbed-686.pages.dev/myblog/202412091416667.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-12-17T13:55:30.000Z"}],["meta",{"property":"article:author","content":"ErenJaegerKing"}],["meta",{"property":"article:tag","content":"SpringSecurity"}],["meta",{"property":"article:published_time","content":"2024-12-05T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-12-17T13:55:30.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"SpringSecurity\\",\\"image\\":[\\"https://drawingbed-686.pages.dev/myblog/202412091416667.png\\",\\"https://drawingbed-686.pages.dev/myblog/202412091531833.png\\",\\"https://drawingbed-686.pages.dev/myblog/202412091712835.png\\",\\"https://drawingbed-686.pages.dev/myblog/202412091733739.png\\",\\"https://drawingbed-686.pages.dev/myblog/202412091735295.png\\",\\"https://drawingbed-686.pages.dev/myblog/202412091737692.png\\",\\"https://drawingbed-686.pages.dev/myblog/202412091740565.png\\"],\\"datePublished\\":\\"2024-12-05T00:00:00.000Z\\",\\"dateModified\\":\\"2024-12-17T13:55:30.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"ErenJaegerKing\\",\\"url\\":\\"https://he9.xin\\",\\"email\\":\\"erenjaegerking@qq.com\\"}]}"]]},"headers":[{"level":2,"title":"简介","slug":"简介","link":"#简介","children":[]},{"level":2,"title":"认证","slug":"认证","link":"#认证","children":[]},{"level":2,"title":"认证架构","slug":"认证架构","link":"#认证架构","children":[]},{"level":2,"title":"授权 （RBAC基于角色的权限控制）","slug":"授权-rbac基于角色的权限控制","link":"#授权-rbac基于角色的权限控制","children":[]},{"level":2,"title":"权限校验","slug":"权限校验","link":"#权限校验","children":[{"level":3,"title":"其它权限校验方法","slug":"其它权限校验方法","link":"#其它权限校验方法","children":[]},{"level":3,"title":"自定义权限校验方法","slug":"自定义权限校验方法","link":"#自定义权限校验方法","children":[]},{"level":3,"title":"基于配置的权限控制","slug":"基于配置的权限控制","link":"#基于配置的权限控制","children":[]},{"level":3,"title":"CSRF（原因是依靠Cookie） 和 跨域","slug":"csrf-原因是依靠cookie-和-跨域","link":"#csrf-原因是依靠cookie-和-跨域","children":[]}]},{"level":2,"title":"原理（看图）","slug":"原理-看图","link":"#原理-看图","children":[]},{"level":2,"title":"认证流程及鉴权流程（以后深入学习的时候再去了解）","slug":"认证流程及鉴权流程-以后深入学习的时候再去了解","link":"#认证流程及鉴权流程-以后深入学习的时候再去了解","children":[]}],"git":{"createdTime":1733550314000,"updatedTime":1734443730000,"contributors":[{"name":"erenjaeger","email":"ErenJaegerKing@qq.com","commits":1}]},"readingTime":{"minutes":6.36,"words":1907},"filePathRelative":"notes/Java/c_spring/c_springsecurity.md","localizedDate":"2024年12月5日","excerpt":"<h2>简介</h2>\\n<ul>\\n<li>\\n<p>Spring Security 是 Spring 家族中的一个安全管理框架，Web应用的需要进行认证和授权。</p>\\n</li>\\n<li>\\n<p>认证：验证当前访问系统的是不是本系统的用户，并且要确认具体是哪个用户</p>\\n</li>\\n<li>\\n<p>授权：经过认证后判断当前用户是否有权限进行某个操作</p>\\n</li>\\n<li>\\n<p>核心功能：认证与授权</p>\\n</li>\\n</ul>\\n<h2>认证</h2>\\n<p>SpringSecurity的原理其实就是一个过滤器链，内部包含了提供各种功能的过滤器。</p>\\n<figure><img src=\\"https://drawingbed-686.pages.dev/myblog/202412091416667.png\\" alt=\\"\\" tabindex=\\"0\\" loading=\\"lazy\\"><figcaption></figcaption></figure>","autoDesc":true}');export{d as comp,o as data};
