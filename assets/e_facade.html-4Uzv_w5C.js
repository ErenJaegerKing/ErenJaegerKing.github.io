import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,e as n,o as i}from"./app-LV3Po0eS.js";const r={};function l(s,e){return i(),a("div",null,e[0]||(e[0]=[n('<hr><div class="hint-container info"><p class="hint-container-title">相关信息</p><p>设计模式-结构性模式-外观模式</p></div><hr><h3 id="动机" tabindex="-1"><a class="header-anchor" href="#动机"><span>动机</span></a></h3><figure><img src="https://drawingbed-686.pages.dev/myblog/202411101528953.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>该模式对外有一个统一接口，外部应用程序不用关心内部子系统的具体的细节，这样会大大降低应用程序的复杂度，提高了程序的可维护性。</p><p>外观（Facade）模式是“迪米特法则”的典型应用</p><h3 id="定义" tabindex="-1"><a class="header-anchor" href="#定义"><span>定义</span></a></h3><p><strong>又名门面模式，是一种通过为多个复杂的子系统提供一个一致的接口，而使这些子系统更加容易被访问的模式。</strong></p><h3 id="结构" tabindex="-1"><a class="header-anchor" href="#结构"><span>结构</span></a></h3><p>外观（Facade）模式包含以下主要角色：</p><ul><li><strong>外观（Facade）角色</strong>：为多个子系统对外提供一个共同的接口。</li><li><strong>子系统（Sub System）角色</strong>：实现系统的部分功能，客户可以通过外观角色访问它。</li></ul><h3 id="uml" tabindex="-1"><a class="header-anchor" href="#uml"><span>UML</span></a></h3><figure><img src="https://drawingbed-686.pages.dev/myblog/202411101526102.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="案例" tabindex="-1"><a class="header-anchor" href="#案例"><span>案例</span></a></h3><p>【例】智能家电控制</p><figure><img src="https://drawingbed-686.pages.dev/myblog/202411101529145.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="优缺点" tabindex="-1"><a class="header-anchor" href="#优缺点"><span>优缺点</span></a></h3><p><strong>好处：</strong></p><ul><li><p><strong>降低了子系统与客户端之间的耦合度</strong></p><p>使得子系统的变化不会影响调用它的客户类。</p></li><li><p><strong>减少处理对象数目</strong></p><p>对客户屏蔽了子系统组件，减少了客户处理的对象数目，并使得子系统使用起来更加容易。</p></li><li><p><strong>简化接口</strong></p></li></ul><p><strong>缺点：</strong></p><ul><li><strong>不符合开闭原则，修改很麻烦</strong></li></ul><h3 id="适用场景" tabindex="-1"><a class="header-anchor" href="#适用场景"><span>适用场景</span></a></h3><ul><li>对分层结构系统构建时，使用外观模式定义子系统中每层的入口点可以简化子系统之间的依赖关系。</li><li>当一个复杂系统的子系统很多时，外观模式可以为系统设计一个简单的接口供外界访问。</li><li>当客户端与多个子系统之间存在很大的联系时，引入外观模式可将它们分离，从而提高子系统的独立性和可移植性。</li></ul><h3 id="源码解析" tabindex="-1"><a class="header-anchor" href="#源码解析"><span><strong>源码解析</strong></span></a></h3><p>使用Tomcat作为web容器时，接收浏览器发送过来的请求，Tomcat会将请求信息封装成ServletRequest对象。ServletRequest是一个接口，它还有一个子接口HttpServletRequest，而我们知道该request对象肯定是一个HttpServletRequest对象的子实现类对象，到底是哪个类的对象呢？可以通过输出request对象，我们就会发现是一个名为RequestFacade的类的对象。</p><p>RequestFacade类就使用了外观模式。先看结构图：</p><figure><img src="https://drawingbed-686.pages.dev/myblog/202411101557399.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>为什么在此处使用外观模式呢？</strong></p><p>定义 RequestFacade 类，分别实现 ServletRequest ，同时定义私有成员变量 Request ，并且方法的实现调用 Request 的实现。然后，将 RequestFacade上转为 ServletRequest 传给 servlet 的 service 方法，这样即使在 servlet 中被下转为 RequestFacade ，也不能访问私有成员变量对象中的方法。既用了 Request ，又能防止其中方法被不合理的访问。</p>',30)]))}const g=t(r,[["render",l],["__file","e_facade.html.vue"]]),d=JSON.parse('{"path":"/notes/designPattern/c_structural/e_facade.html","title":"外观模式","lang":"zh-CN","frontmatter":{"icon":"","description":"相关信息 设计模式-结构性模式-外观模式 动机 该模式对外有一个统一接口，外部应用程序不用关心内部子系统的具体的细节，这样会大大降低应用程序的复杂度，提高了程序的可维护性。 外观（Facade）模式是“迪米特法则”的典型应用 定义 又名门面模式，是一种通过为多个复杂的子系统提供一个一致的接口，而使这些子系统更加容易被访问的模式。 结构 外观（Facad...","title":"外观模式","date":"2024-11-11T00:00:00.000Z","category":["设计模式"],"tag":["结构性模式","外观模式"],"order":5,"head":[["meta",{"property":"og:url","content":"https://he9.xin/notes/designPattern/c_structural/e_facade.html"}],["meta",{"property":"og:site_name","content":"春风不语即随本心"}],["meta",{"property":"og:title","content":"外观模式"}],["meta",{"property":"og:description","content":"相关信息 设计模式-结构性模式-外观模式 动机 该模式对外有一个统一接口，外部应用程序不用关心内部子系统的具体的细节，这样会大大降低应用程序的复杂度，提高了程序的可维护性。 外观（Facade）模式是“迪米特法则”的典型应用 定义 又名门面模式，是一种通过为多个复杂的子系统提供一个一致的接口，而使这些子系统更加容易被访问的模式。 结构 外观（Facad..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://drawingbed-686.pages.dev/myblog/202411101528953.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-11-10T07:58:30.000Z"}],["meta",{"property":"article:author","content":"ErenJaegerKing"}],["meta",{"property":"article:tag","content":"结构性模式"}],["meta",{"property":"article:tag","content":"外观模式"}],["meta",{"property":"article:published_time","content":"2024-11-11T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-11-10T07:58:30.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"外观模式\\",\\"image\\":[\\"https://drawingbed-686.pages.dev/myblog/202411101528953.png\\",\\"https://drawingbed-686.pages.dev/myblog/202411101526102.png\\",\\"https://drawingbed-686.pages.dev/myblog/202411101529145.png\\",\\"https://drawingbed-686.pages.dev/myblog/202411101557399.png\\"],\\"datePublished\\":\\"2024-11-11T00:00:00.000Z\\",\\"dateModified\\":\\"2024-11-10T07:58:30.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"ErenJaegerKing\\",\\"url\\":\\"https://he9.xin\\",\\"email\\":\\"erenjaegerking@qq.com\\"}]}"]]},"headers":[{"level":3,"title":"动机","slug":"动机","link":"#动机","children":[]},{"level":3,"title":"定义","slug":"定义","link":"#定义","children":[]},{"level":3,"title":"结构","slug":"结构","link":"#结构","children":[]},{"level":3,"title":"UML","slug":"uml","link":"#uml","children":[]},{"level":3,"title":"案例","slug":"案例","link":"#案例","children":[]},{"level":3,"title":"优缺点","slug":"优缺点","link":"#优缺点","children":[]},{"level":3,"title":"适用场景","slug":"适用场景","link":"#适用场景","children":[]},{"level":3,"title":"源码解析","slug":"源码解析","link":"#源码解析","children":[]}],"git":{"createdTime":1730726433000,"updatedTime":1731225510000,"contributors":[{"name":"LiYaoYu","email":"ErenJaegerKing@qq.com","commits":2}]},"readingTime":{"minutes":2.42,"words":725},"filePathRelative":"notes/designPattern/c_structural/e_facade.md","localizedDate":"2024年11月11日","excerpt":"<hr>\\n<div class=\\"hint-container info\\">\\n<p class=\\"hint-container-title\\">相关信息</p>\\n<p>设计模式-结构性模式-外观模式</p>\\n</div>\\n<hr>\\n<h3>动机</h3>\\n<figure><img src=\\"https://drawingbed-686.pages.dev/myblog/202411101528953.png\\" alt=\\"\\" tabindex=\\"0\\" loading=\\"lazy\\"><figcaption></figcaption></figure>\\n<p>该模式对外有一个统一接口，外部应用程序不用关心内部子系统的具体的细节，这样会大大降低应用程序的复杂度，提高了程序的可维护性。</p>","autoDesc":true}');export{g as comp,d as data};
