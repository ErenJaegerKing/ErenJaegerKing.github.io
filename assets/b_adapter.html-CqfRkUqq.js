import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,e as n,o as r}from"./app-BAv5x_rI.js";const i={};function p(l,e){return r(),a("div",null,e[0]||(e[0]=[n('<hr><div class="hint-container info"><p class="hint-container-title">相关信息</p><p>设计模式-结构性模式-适配器模式</p></div><hr><h3 id="动机" tabindex="-1"><a class="header-anchor" href="#动机"><span>动机</span></a></h3><p>生活中这样的例子很多，手机充电器（将220v转换为5v的电压），读卡器等，其实就是使用到了适配器模式。</p><h3 id="定义" tabindex="-1"><a class="header-anchor" href="#定义"><span>定义</span></a></h3><p><strong>将一个类的接口转换成客户希望的另外一个接口，使得原本由于接口不兼容而不能一起工作的那些类能一起工作。</strong></p><p>适配器模式分为类适配器模式和对象适配器模式，前者类之间的耦合度比后者高，且要求程序员了解现有组件库中的相关组件的内部结构，所以应用相对较少些。</p><h3 id="结构" tabindex="-1"><a class="header-anchor" href="#结构"><span><strong>结构</strong></span></a></h3><p>适配器模式（Adapter）包含以下主要角色：</p><ul><li><strong>目标（Target）接口</strong>：当前系统业务所期待的接口，它可以是抽象类或接口。</li><li><strong>适配者（Adaptee）类</strong>：它是被访问和适配的现存组件库中的组件接口。</li><li><strong>适配器（Adapter）类</strong>：它是一个转换器，通过继承或引用适配者的对象，把适配者接口转换成目标接口，让客户按目标接口的格式访问适配者。</li></ul><h3 id="uml" tabindex="-1"><a class="header-anchor" href="#uml"><span>UML</span></a></h3><figure><img src="https://drawingbed-686.pages.dev/myblog/202411092047553.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="类适配器模式" tabindex="-1"><a class="header-anchor" href="#类适配器模式"><span><strong>类适配器模式</strong></span></a></h3><p>实现方式：定义一个适配器类来实现当前系统的业务接口，同时又继承现有组件库中已经存在的组件。</p><p>【例】读卡器</p><p>现有一台电脑只能读取SD卡，而要读取TF卡中的内容的话就需要使用到适配器模式。创建一个读卡器，将TF卡中的内容读取出来。</p><figure><img src="https://drawingbed-686.pages.dev/myblog/202411092048753.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="对象适配器模式" tabindex="-1"><a class="header-anchor" href="#对象适配器模式"><span><strong>对象适配器模式</strong></span></a></h3><p>实现方式：对象适配器模式可釆用将现有组件库中已经实现的组件引入适配器类中，该类同时实现当前系统的业务接口。</p><p>【例】读卡器</p><p>我们使用对象适配器模式将读卡s器的案例进行改写。</p><figure><img src="https://drawingbed-686.pages.dev/myblog/202411092048774.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="适用场景" tabindex="-1"><a class="header-anchor" href="#适用场景"><span>适用场景</span></a></h3><ul><li>以前开发的系统存在满足新系统功能需求的类，但其接口同新系统的接口不一致。</li><li>使用第三方提供的组件，但组件接口定义和自己要求的接口定义不同。</li></ul><h3 id="jdk源码解析" tabindex="-1"><a class="header-anchor" href="#jdk源码解析"><span><strong>JDK源码解析</strong></span></a></h3><p>Reader（字符流）、InputStream（字节流）的适配使用的是InputStreamReader。</p><p>InputStreamReader继承自java.io包中的Reader，对他中的抽象的未实现的方法给出实现。</p><figure><img src="https://drawingbed-686.pages.dev/myblog/202411092049846.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="https://drawingbed-686.pages.dev/myblog/202411092049337.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="https://drawingbed-686.pages.dev/myblog/202411092050461.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li>InputStreamReader是对同样实现了Reader的StreamDecoder的封装。</li><li>StreamDecoder不是Java SE API中的内容，是Sun JDK给出的自身实现。但我们知道他们对构造方法中的字节流类（InputStream）进行封装，并通过该类进行了字节流和字符流之间的解码转换。</li></ul><p>InputStreamReader做了InputStream字节流类到Reader字符流之间的转换。而从如上Sun JDK中的实现类关系结构中可以看出，是StreamDecoder的设计实现在实际上采用了适配器模式。</p>',33)]))}const d=t(i,[["render",p],["__file","b_adapter.html.vue"]]),s=JSON.parse('{"path":"/notes/designPattern/c_structural/b_adapter.html","title":"适配器模式","lang":"zh-CN","frontmatter":{"icon":"","description":"相关信息 设计模式-结构性模式-适配器模式 动机 生活中这样的例子很多，手机充电器（将220v转换为5v的电压），读卡器等，其实就是使用到了适配器模式。 定义 将一个类的接口转换成客户希望的另外一个接口，使得原本由于接口不兼容而不能一起工作的那些类能一起工作。 适配器模式分为类适配器模式和对象适配器模式，前者类之间的耦合度比后者高，且要求程序员了解现有...","title":"适配器模式","date":"2024-11-10T00:00:00.000Z","category":["设计模式"],"tag":["结构性模式","适配器模式"],"order":2,"head":[["meta",{"property":"og:url","content":"https://he9.xin/notes/designPattern/c_structural/b_adapter.html"}],["meta",{"property":"og:site_name","content":"春风不语即随本心"}],["meta",{"property":"og:title","content":"适配器模式"}],["meta",{"property":"og:description","content":"相关信息 设计模式-结构性模式-适配器模式 动机 生活中这样的例子很多，手机充电器（将220v转换为5v的电压），读卡器等，其实就是使用到了适配器模式。 定义 将一个类的接口转换成客户希望的另外一个接口，使得原本由于接口不兼容而不能一起工作的那些类能一起工作。 适配器模式分为类适配器模式和对象适配器模式，前者类之间的耦合度比后者高，且要求程序员了解现有..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://drawingbed-686.pages.dev/myblog/202411092047553.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-11-10T05:46:52.000Z"}],["meta",{"property":"article:author","content":"ErenJaegerKing"}],["meta",{"property":"article:tag","content":"结构性模式"}],["meta",{"property":"article:tag","content":"适配器模式"}],["meta",{"property":"article:published_time","content":"2024-11-10T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-11-10T05:46:52.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"适配器模式\\",\\"image\\":[\\"https://drawingbed-686.pages.dev/myblog/202411092047553.png\\",\\"https://drawingbed-686.pages.dev/myblog/202411092048753.png\\",\\"https://drawingbed-686.pages.dev/myblog/202411092048774.png\\",\\"https://drawingbed-686.pages.dev/myblog/202411092049846.png\\",\\"https://drawingbed-686.pages.dev/myblog/202411092049337.png\\",\\"https://drawingbed-686.pages.dev/myblog/202411092050461.png\\"],\\"datePublished\\":\\"2024-11-10T00:00:00.000Z\\",\\"dateModified\\":\\"2024-11-10T05:46:52.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"ErenJaegerKing\\",\\"url\\":\\"https://he9.xin\\",\\"email\\":\\"erenjaegerking@qq.com\\"}]}"]]},"headers":[{"level":3,"title":"动机","slug":"动机","link":"#动机","children":[]},{"level":3,"title":"定义","slug":"定义","link":"#定义","children":[]},{"level":3,"title":"结构","slug":"结构","link":"#结构","children":[]},{"level":3,"title":"UML","slug":"uml","link":"#uml","children":[]},{"level":3,"title":"类适配器模式","slug":"类适配器模式","link":"#类适配器模式","children":[]},{"level":3,"title":"对象适配器模式","slug":"对象适配器模式","link":"#对象适配器模式","children":[]},{"level":3,"title":"适用场景","slug":"适用场景","link":"#适用场景","children":[]},{"level":3,"title":"JDK源码解析","slug":"jdk源码解析","link":"#jdk源码解析","children":[]}],"git":{"createdTime":1730808096000,"updatedTime":1731217612000,"contributors":[{"name":"LiYaoYu","email":"ErenJaegerKing@qq.com","commits":3}]},"readingTime":{"minutes":2.62,"words":785},"filePathRelative":"notes/designPattern/c_structural/b_adapter.md","localizedDate":"2024年11月10日","excerpt":"<hr>\\n<div class=\\"hint-container info\\">\\n<p class=\\"hint-container-title\\">相关信息</p>\\n<p>设计模式-结构性模式-适配器模式</p>\\n</div>\\n<hr>\\n<h3>动机</h3>\\n<p>生活中这样的例子很多，手机充电器（将220v转换为5v的电压），读卡器等，其实就是使用到了适配器模式。</p>\\n<h3>定义</h3>\\n<p><strong>将一个类的接口转换成客户希望的另外一个接口，使得原本由于接口不兼容而不能一起工作的那些类能一起工作。</strong></p>\\n<p>适配器模式分为类适配器模式和对象适配器模式，前者类之间的耦合度比后者高，且要求程序员了解现有组件库中的相关组件的内部结构，所以应用相对较少些。</p>","autoDesc":true}');export{d as comp,s as data};
