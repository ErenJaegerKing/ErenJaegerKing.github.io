import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as l,e as i,o as n}from"./app-D5nBtrwS.js";const t={};function h(r,a){return n(),l("div",null,a[0]||(a[0]=[i('<h2 id="线程" tabindex="-1"><a class="header-anchor" href="#线程"><span>线程</span></a></h2><h3 id="什么是线程和进程" tabindex="-1"><a class="header-anchor" href="#什么是线程和进程"><span>什么是线程和进程？</span></a></h3><p>何为进程？进程是程序的一次执行过程，是系统运行程序的基本单位。比如说在windows系统上查询任务管理器，就可以看到.exe运行的进程</p><p>何为线程？一个进程在其执行的过程中可以产生多个线程。与线程不同的就是同类的多个线程共享进程中的堆和方法去的资源，但每个线程都有自己的程序计数器、虚拟机栈和本地方法栈。</p><h3 id="java-线程和操作系统的线程有啥区别" tabindex="-1"><a class="header-anchor" href="#java-线程和操作系统的线程有啥区别"><span>Java 线程和操作系统的线程有啥区别？</span></a></h3><p>现在的 Java 线程的本质其实就是操作系统的线程。</p><h3 id="请简要描述线程与进程的关系-区别及优缺点" tabindex="-1"><a class="header-anchor" href="#请简要描述线程与进程的关系-区别及优缺点"><span>请简要描述线程与进程的关系,区别及优缺点？</span></a></h3><p>一个进程中可以有多个线程，多个线程共享进程中的堆和方法区（JDK1.8之后的元空间）资源，但是每个线程都有自己的虚拟机栈、程序计数器和本地方法栈</p><p>总结：线程是进程划分成的更小的运行单位。线程和进程最大的不同在于基本上各进程是独立的，而各线程则不一定，因为同一个进程的线程极有可能相互影响。</p><h3 id="如何创建线程" tabindex="-1"><a class="header-anchor" href="#如何创建线程"><span>如何创建线程？</span></a></h3><ul><li>继承Thread类</li><li>实现Runnable接口</li><li>实现Callable接口</li><li>使用线程池</li><li>使用CompletableFuture</li></ul><p>严格来说，java只有一种方式可以创建线程，那就是通过new Thread().start()创建。不管是哪种方法，最终都依赖于new Thread().start()</p><h3 id="说说线程的生命周期和状态" tabindex="-1"><a class="header-anchor" href="#说说线程的生命周期和状态"><span>说说线程的生命周期和状态</span></a></h3><p>new初始化状态 runnable运行状态 调用start()等待运行的状态 blocked阻塞状态 需要等待锁释放 waiting等待状态 需要等待其他线程做出一些反应（通知或中断） time_waiting超时等待状态 在等待指定时间自行返回而不是像waiting那样一直等待 terminated终止状态 线程已经运行完毕</p><h3 id="什么是线程上下文切换" tabindex="-1"><a class="header-anchor" href="#什么是线程上下文切换"><span>什么是线程上下文切换?</span></a></h3><p>线程切换意味需要保存当前线程的上下文，留待线程下次占用CPU的时候恢复现场。并加载下一个将要占用CPU的线程上下文。这就是所谓的上下文切换。</p><h3 id="thread-sleep-方法和-object-wait-方法对比" tabindex="-1"><a class="header-anchor" href="#thread-sleep-方法和-object-wait-方法对比"><span>Thread#sleep() 方法和 Object#wait() 方法对比</span></a></h3><p>共同点：两者都可以暂停线程的执行。</p><p>区别：</p><ul><li>有没有释放锁：wait方法释放了锁，sleep方法没有释放锁</li><li>用途是：通常用于线程间交互/通信，sleep通常用于暂停执行</li><li>会不会自动苏醒，wait是需要别的线程调用同一个对象上的notify或者notifyall方法才会苏醒，sleep方法执行后，线程会自动苏醒，也可以使用wait（long timeout）超时后线程会自动苏醒。</li><li>sleep是thread类的静态本地方法，wait则是object类的本地方法</li></ul><h3 id="为什么-wait-方法不定义在-thread-中" tabindex="-1"><a class="header-anchor" href="#为什么-wait-方法不定义在-thread-中"><span>为什么 wait() 方法不定义在 Thread 中？</span></a></h3><p>wait是为获得对象锁的线程实现等待，会自动释放当前线程占有的对象锁。每个对象中都有对象锁，所以放在object中</p><p>sleep只是暂停线程，所以就放在thread中</p><h3 id="可以直接调用-thread-类的-run-方法吗" tabindex="-1"><a class="header-anchor" href="#可以直接调用-thread-类的-run-方法吗"><span>可以直接调用 Thread 类的 run 方法吗？</span></a></h3><p>不可以，调用start方法可启动线程并使线程进入就绪状态，直接运行run方法的话不会以多线程的方式执行。</p><h2 id="多线程" tabindex="-1"><a class="header-anchor" href="#多线程"><span>多线程</span></a></h2><h3 id="并发与并行的区别" tabindex="-1"><a class="header-anchor" href="#并发与并行的区别"><span>并发与并行的区别</span></a></h3><p>并发是在同一时间段内执行</p><p>并行是在同一时刻执行</p><h3 id="同步和异步的区别" tabindex="-1"><a class="header-anchor" href="#同步和异步的区别"><span>同步和异步的区别</span></a></h3><p>同步：发出一个调用之后，在没有得到结果之前，该调用就不可以返回，一直等待</p><p>异步：调用在发出之后，不用等待返回结果，该调用直接返回</p><h3 id="为什么要使用多线程" tabindex="-1"><a class="header-anchor" href="#为什么要使用多线程"><span>为什么要使用多线程?</span></a></h3><p>多核 CPU 时代意味着多个线程可以同时运行，这减少了线程上下文切换的开销。</p><p>利用好多线程机制可以大大提高系统整体的并发能力以及性能。</p><p>在单核时代多线程主要是为了提高单进程利用 CPU 和 IO 系统的效率。</p><p>多核时代多线程主要是为了提高进程利用多核 CPU 的能力。</p><h3 id="单核-cpu-支持-java-多线程吗" tabindex="-1"><a class="header-anchor" href="#单核-cpu-支持-java-多线程吗"><span>单核 CPU 支持 Java 多线程吗？</span></a></h3><p>单核CPU是支持Java多线程的。</p><h3 id="单核-cpu-上运行多个线程效率一定会高吗" tabindex="-1"><a class="header-anchor" href="#单核-cpu-上运行多个线程效率一定会高吗"><span>单核 CPU 上运行多个线程效率一定会高吗？</span></a></h3><p>单核CPU同时运行多个线程的效率是否会高取决于线程的类型和任务的性质。</p><ul><li>CPU密集型：主要进行计算和逻辑处理，需要占用大量的CPU资源</li><li>IO密集型：主要进行输入输出操作，如读写文件、网络通信等，需要等待IO设备的相应，而不占用太多的CPU资源</li></ul><h3 id="使用多线程可能带来什么问题" tabindex="-1"><a class="header-anchor" href="#使用多线程可能带来什么问题"><span>使用多线程可能带来什么问题?</span></a></h3><p>使用并发访问是为了提高程序的执行效率进而提高程序的运行速度，但是并发编程并不总是能提高程序运行速度，而且并发编程可能会带来很多问题，比如：内存泄漏、死锁、线程不安全等</p><h3 id="如何理解线程安全和不安全" tabindex="-1"><a class="header-anchor" href="#如何理解线程安全和不安全"><span>如何理解线程安全和不安全？</span></a></h3><p>线程安全和线程不安全是在多线程环境下对于同一份数据的访问是否能保证其正确性和一致性</p><ul><li>线程安全：是指在多线程环境下，对于同一份数据，不管有多少个线程同时访问，都能保证这份数据的正确性和一致性</li><li>线程不安全：是指在多线程环境下，对于同一份数据，多个线程同时访问时可能会导致数据混乱、错误或者丢失</li></ul><h2 id="死锁" tabindex="-1"><a class="header-anchor" href="#死锁"><span>死锁</span></a></h2><h3 id="什么是线程死锁" tabindex="-1"><a class="header-anchor" href="#什么是线程死锁"><span>什么是线程死锁？</span></a></h3><p>多个线程同时被阻塞，它们中的一个或者全部都在等待某个资源被释放。由于线程被无限期地阻塞，因此程序不可能正常终止</p><h3 id="产生死锁的四个条件" tabindex="-1"><a class="header-anchor" href="#产生死锁的四个条件"><span>产生死锁的四个条件</span></a></h3><ol><li>互斥条件：该资源任意一个时刻只由一个线程占用。</li><li>请求与保持条件：一个线程因请求资源而阻塞时，对已获得的资源保持不放。</li><li>不剥夺条件：线程已获得的资源在未使用完之前不能被其他线程强行剥夺，只有自己使用完毕后才释放资源。</li><li>循环等待条件：若干线程之间形成一种头尾相接的循环等待资源关系</li></ol><h3 id="如何检测死锁" tabindex="-1"><a class="header-anchor" href="#如何检测死锁"><span>如何检测死锁？</span></a></h3><p>使用jmap、jstack等命令查看jvm线程栈和堆内存的情况。</p><p>可以使用top、df、free等命令查看操作系统的基本情况，出现死锁可能会导致CPU、内存等资源消耗过高</p><h3 id="如何预防和避免线程死锁" tabindex="-1"><a class="header-anchor" href="#如何预防和避免线程死锁"><span>如何预防和避免线程死锁？</span></a></h3><p>如何预防死锁？破坏死锁产生的必要条件即可：</p><ol><li>破环请求与保持：一次性申请所有的资源。</li><li>破环不剥夺条件：占用部分的线程进一步地申请其他资源时，如果申请不到，可以主动释放它占有的资源。</li><li>破坏循环等待条件：按某一顺序申请资源，释放资源则反序释放。</li></ol><p>如何避免死锁？</p><p>避免死锁就是在资源分配时，借助于算法（比如银行家算法）对资源分配进行计算评估，使其进入安全状态。</p><h2 id="jmm-java内存模型" tabindex="-1"><a class="header-anchor" href="#jmm-java内存模型"><span>JMM(Java内存模型)</span></a></h2><h2 id="volatile关键字" tabindex="-1"><a class="header-anchor" href="#volatile关键字"><span>volatile关键字</span></a></h2><h3 id="如果保证变量的可见性" tabindex="-1"><a class="header-anchor" href="#如果保证变量的可见性"><span>如果保证变量的可见性？</span></a></h3><p>如果我们把变量声明为volatile，这就指示JVM，这个变量是共享且不稳定的，每次使用它都到主存中进行读取，也就是说本来是每个线程独有的一个资源，将变量声明为volatile时，就将这个变量放到主存中变成了共享变量了</p><h3 id="如何禁止指令重排序" tabindex="-1"><a class="header-anchor" href="#如何禁止指令重排序"><span>如何禁止指令重排序？</span></a></h3><p>在java中，volatile关键字除了可以保证变量的可见性，还有一个重要的作用就是防止JVM的指令重排序。</p><p>如果我们将变量声明为volatile，在对这个变量进行读写操作的时候，会通过插入特定的内存屏障的方式来禁止指令重排序。</p><h3 id="volatile可以保证原子性吗" tabindex="-1"><a class="header-anchor" href="#volatile可以保证原子性吗"><span>volatile可以保证原子性吗？</span></a></h3><p>不能，volatile关键字能保证变量的可见性，但不能保证对变量的操作是原子性的</p><h2 id="乐观锁和悲观锁" tabindex="-1"><a class="header-anchor" href="#乐观锁和悲观锁"><span>乐观锁和悲观锁</span></a></h2><h3 id="什么是悲观锁" tabindex="-1"><a class="header-anchor" href="#什么是悲观锁"><span>什么是悲观锁？</span></a></h3><p>悲观锁总是假定最坏的情况，认为共享资源每次访问的时候就会出现问题，所以每次在获取资源操作的时候就会上锁。也就是说共享资源每次只给一个线程使用，其他线程阻塞，用完后再把资源转让给其他线程。</p><h3 id="什么是乐观锁" tabindex="-1"><a class="header-anchor" href="#什么是乐观锁"><span>什么是乐观锁？</span></a></h3><p>乐观锁总是假定最好的情况，认为共享资源每次访问的时候不会出现问题，线程可以不停地执行，无需加锁也无需等待，只是在提交修改的时候去验证对应的资源是否被其他线程修改了。</p><ul><li>悲观锁常用于写比较多的场景，可以避免频繁失败和重试影响性能，悲观锁的开销是固定的</li><li>乐观锁常用于写比较少的场景，可以避免频繁加锁影响性能</li></ul><h3 id="如何实现乐观锁" tabindex="-1"><a class="header-anchor" href="#如何实现乐观锁"><span>如何实现乐观锁?</span></a></h3><p>乐观锁一般会使用版本号机制或CAS算法实现</p><h3 id="java中cas是如何实现的" tabindex="-1"><a class="header-anchor" href="#java中cas是如何实现的"><span>Java中CAS是如何实现的？</span></a></h3><p>在java中，实现CAS(Compare-And-Swap，比较并交换)操作的一个关键类是Unsafe</p><h3 id="cas算法存在哪些问题" tabindex="-1"><a class="header-anchor" href="#cas算法存在哪些问题"><span>CAS算法存在哪些问题？</span></a></h3><ul><li>ABA问题：初次读取是A，准备赋值的时候还是A，那么这个不一定是之前的那个A。解决方法是在变量前面追加上版本号或者时间戳</li><li>循环时间长开销大：CAS经常会用到自旋操作来进行重试，也就是不成功就一直循环执行直到成功</li></ul><h3 id="只能保证一个共享变量的原子操作" tabindex="-1"><a class="header-anchor" href="#只能保证一个共享变量的原子操作"><span>只能保证一个共享变量的原子操作</span></a></h3><p>CAS操作仅能对单个共享变量有效</p><h2 id="threadlocal线程本地" tabindex="-1"><a class="header-anchor" href="#threadlocal线程本地"><span>ThreadLocal线程本地</span></a></h2><h3 id="threadlocal有什么用" tabindex="-1"><a class="header-anchor" href="#threadlocal有什么用"><span>ThreadLocal有什么用？</span></a></h3><p>threadlocal类允许每个线程绑定自己的值</p><h3 id="threadlocal原理了解吗" tabindex="-1"><a class="header-anchor" href="#threadlocal原理了解吗"><span>ThreadLocal原理了解吗？</span></a></h3><p>以后了解</p><h3 id="threadlocal内存泄漏问题是怎么导致的" tabindex="-1"><a class="header-anchor" href="#threadlocal内存泄漏问题是怎么导致的"><span>ThreadLocal内存泄漏问题是怎么导致的？</span></a></h3><p>以后了解</p><h3 id="如何跨线程传递-threadlocal-的值" tabindex="-1"><a class="header-anchor" href="#如何跨线程传递-threadlocal-的值"><span>如何跨线程传递 ThreadLocal 的值？</span></a></h3><h2 id="线程池" tabindex="-1"><a class="header-anchor" href="#线程池"><span>线程池</span></a></h2><h3 id="什么是线程池" tabindex="-1"><a class="header-anchor" href="#什么是线程池"><span>什么是线程池？</span></a></h3><p>线程池就是管理一系列线程的资源池。当有任务要处理时，直接从线程池中获取线程来处理，处理完之后线程并不会立即被销毁，而是等待下一个任务。这样子就可以减少线程创建和销毁所带来的资源消耗，提高资源的利用效率</p><h3 id="为什么要用线程池" tabindex="-1"><a class="header-anchor" href="#为什么要用线程池"><span>为什么要用线程池？</span></a></h3><p>其实就是池化技术，线程池、数据库连接池、HTTP连接池等对这个思想的应用。</p><p>池化技术的思想主要是为了减少每次获取资源的消耗，提高对资源的利用率</p><ul><li>降低资源的消耗</li><li>提高相应速度</li><li>提高线程的可管理性</li></ul><h3 id="如何创建线程池" tabindex="-1"><a class="header-anchor" href="#如何创建线程池"><span>如何创建线程池？</span></a></h3><ol><li>方式一：通过ThreadPoolExecutor构造函数来创建</li><li>方式二：通过Executor框架的工具类Executors来创建</li></ol><ul><li>FixedThreadPool：固定线程数量的线程池。</li><li>SingleThreadExecutor： 只有一个线程的线程池。</li><li>CachedThreadPool： 可根据实际情况调整线程数量的线程池。</li><li>ScheduledThreadPool：给定的延迟后运行任务或者定期执行任务的线程池。</li></ul><h3 id="为什么不推荐使用内置线程池" tabindex="-1"><a class="header-anchor" href="#为什么不推荐使用内置线程池"><span>为什么不推荐使用内置线程池？</span></a></h3><p>另外，《阿里巴巴 Java 开发手册》中强制线程池不允许使用 Executors 去创建，而是通过 ThreadPoolExecutor 构造函数的方式，这样的处理方式让写的同学更加明确线程池的运行规则，规避资源耗尽的风险</p><h3 id="线程池常见参数有哪些-如何解释" tabindex="-1"><a class="header-anchor" href="#线程池常见参数有哪些-如何解释"><span>线程池常见参数有哪些？如何解释？</span></a></h3><ol><li>三个最重要的参数</li></ol><ul><li>核心线程数：任务队列未达到队列容量时，最大可以同时运行的线程数量</li><li>最大线程数：任务队列中存放的任务达到队列容量的时候，当前可以同时运行的线程数量变为最大线程数</li><li>阻塞队列：新任务来的时候会先判断当前运行的线程数量是否达到核心线程数，如果达到的话，新任务就会被存放在队列中</li></ul><ol start="2"><li>其他常见参数</li></ol><ul><li>线程工厂:executor创建新线程的时候会用到</li><li>拒绝策略：拒绝策略</li><li>存活时间：当线程池中的线程大于核心线程数的时候，即有非核心线程时，这些非核心线程空闲后不会立即销毁，而是会等待，直到等待的时间超过了存活时间才会被回收销毁</li><li>存活时间单位：存活时间的单位</li></ul><p>首先，线程会达到核心线程数，然后继续添加线程的时候就会加入到阻塞队列中，如果阻塞队列达到最大的话，那么就会新的线程创建出来直到最大核心线程数，最大核心线程数都创建出来后，剩下的就是采用拒绝策略</p><h3 id="线程池的核心线程会被回收吗" tabindex="-1"><a class="header-anchor" href="#线程池的核心线程会被回收吗"><span>线程池的核心线程会被回收吗？</span></a></h3><p>threadpoolexecutor默认不会回收核心线程数，即使它们已经空闲了。这是为了减少创建线程的开销，因为核心线程通常是要长期保持活跃的。但是，如果线程被用于周期性使用的场景，且频率不高，可以考虑将allowCoreThreadTimeOut(boolean value)的方法参数设置为true，这样就会回收空闲的核心线程了。</p><h3 id="核心线程空闲时处于什么状态" tabindex="-1"><a class="header-anchor" href="#核心线程空闲时处于什么状态"><span>核心线程空闲时处于什么状态？</span></a></h3><ul><li>设置了核心线程的存活时间 ：在空闲时，wating状态，等待获取任务。如果阻塞等待时间超过了核心线程存存活时间，则该线程会退出工作，线程状态变为terminated状态</li><li>没有设置核心线程的存活时间：核心线程在空闲时，会一直处于waiting状态，等待获取任务，核心线程会一直存活在线程池中</li></ul>',113)]))}const p=e(t,[["render",h],["__file","a_juc.html.vue"]]),c=JSON.parse('{"path":"/notes/Java/b_advance/a_juc.html","title":"并发编程","lang":"zh-CN","frontmatter":{"icon":"","description":"线程 什么是线程和进程？ 何为进程？进程是程序的一次执行过程，是系统运行程序的基本单位。比如说在windows系统上查询任务管理器，就可以看到.exe运行的进程 何为线程？一个进程在其执行的过程中可以产生多个线程。与线程不同的就是同类的多个线程共享进程中的堆和方法去的资源，但每个线程都有自己的程序计数器、虚拟机栈和本地方法栈。 Java 线程和操作系统...","title":"并发编程","date":"2024-09-23T00:00:00.000Z","category":["Java"],"tag":["JUC"],"order":1,"head":[["meta",{"property":"og:url","content":"https://he9.xin/notes/Java/b_advance/a_juc.html"}],["meta",{"property":"og:site_name","content":"春风不语即随本心"}],["meta",{"property":"og:title","content":"并发编程"}],["meta",{"property":"og:description","content":"线程 什么是线程和进程？ 何为进程？进程是程序的一次执行过程，是系统运行程序的基本单位。比如说在windows系统上查询任务管理器，就可以看到.exe运行的进程 何为线程？一个进程在其执行的过程中可以产生多个线程。与线程不同的就是同类的多个线程共享进程中的堆和方法去的资源，但每个线程都有自己的程序计数器、虚拟机栈和本地方法栈。 Java 线程和操作系统..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-03-25T02:49:32.000Z"}],["meta",{"property":"article:author","content":"ErenJaegerKing"}],["meta",{"property":"article:tag","content":"JUC"}],["meta",{"property":"article:published_time","content":"2024-09-23T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-03-25T02:49:32.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"并发编程\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-09-23T00:00:00.000Z\\",\\"dateModified\\":\\"2025-03-25T02:49:32.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"ErenJaegerKing\\",\\"url\\":\\"https://he9.xin\\",\\"email\\":\\"erenjaegerking@qq.com\\"}]}"]]},"headers":[{"level":2,"title":"线程","slug":"线程","link":"#线程","children":[{"level":3,"title":"什么是线程和进程？","slug":"什么是线程和进程","link":"#什么是线程和进程","children":[]},{"level":3,"title":"Java 线程和操作系统的线程有啥区别？","slug":"java-线程和操作系统的线程有啥区别","link":"#java-线程和操作系统的线程有啥区别","children":[]},{"level":3,"title":"请简要描述线程与进程的关系,区别及优缺点？","slug":"请简要描述线程与进程的关系-区别及优缺点","link":"#请简要描述线程与进程的关系-区别及优缺点","children":[]},{"level":3,"title":"如何创建线程？","slug":"如何创建线程","link":"#如何创建线程","children":[]},{"level":3,"title":"说说线程的生命周期和状态","slug":"说说线程的生命周期和状态","link":"#说说线程的生命周期和状态","children":[]},{"level":3,"title":"什么是线程上下文切换?","slug":"什么是线程上下文切换","link":"#什么是线程上下文切换","children":[]},{"level":3,"title":"Thread#sleep() 方法和 Object#wait() 方法对比","slug":"thread-sleep-方法和-object-wait-方法对比","link":"#thread-sleep-方法和-object-wait-方法对比","children":[]},{"level":3,"title":"为什么 wait() 方法不定义在 Thread 中？","slug":"为什么-wait-方法不定义在-thread-中","link":"#为什么-wait-方法不定义在-thread-中","children":[]},{"level":3,"title":"可以直接调用 Thread 类的 run 方法吗？","slug":"可以直接调用-thread-类的-run-方法吗","link":"#可以直接调用-thread-类的-run-方法吗","children":[]}]},{"level":2,"title":"多线程","slug":"多线程","link":"#多线程","children":[{"level":3,"title":"并发与并行的区别","slug":"并发与并行的区别","link":"#并发与并行的区别","children":[]},{"level":3,"title":"同步和异步的区别","slug":"同步和异步的区别","link":"#同步和异步的区别","children":[]},{"level":3,"title":"为什么要使用多线程?","slug":"为什么要使用多线程","link":"#为什么要使用多线程","children":[]},{"level":3,"title":"单核 CPU 支持 Java 多线程吗？","slug":"单核-cpu-支持-java-多线程吗","link":"#单核-cpu-支持-java-多线程吗","children":[]},{"level":3,"title":"单核 CPU 上运行多个线程效率一定会高吗？","slug":"单核-cpu-上运行多个线程效率一定会高吗","link":"#单核-cpu-上运行多个线程效率一定会高吗","children":[]},{"level":3,"title":"使用多线程可能带来什么问题?","slug":"使用多线程可能带来什么问题","link":"#使用多线程可能带来什么问题","children":[]},{"level":3,"title":"如何理解线程安全和不安全？","slug":"如何理解线程安全和不安全","link":"#如何理解线程安全和不安全","children":[]}]},{"level":2,"title":"死锁","slug":"死锁","link":"#死锁","children":[{"level":3,"title":"什么是线程死锁？","slug":"什么是线程死锁","link":"#什么是线程死锁","children":[]},{"level":3,"title":"产生死锁的四个条件","slug":"产生死锁的四个条件","link":"#产生死锁的四个条件","children":[]},{"level":3,"title":"如何检测死锁？","slug":"如何检测死锁","link":"#如何检测死锁","children":[]},{"level":3,"title":"如何预防和避免线程死锁？","slug":"如何预防和避免线程死锁","link":"#如何预防和避免线程死锁","children":[]}]},{"level":2,"title":"JMM(Java内存模型)","slug":"jmm-java内存模型","link":"#jmm-java内存模型","children":[]},{"level":2,"title":"volatile关键字","slug":"volatile关键字","link":"#volatile关键字","children":[{"level":3,"title":"如果保证变量的可见性？","slug":"如果保证变量的可见性","link":"#如果保证变量的可见性","children":[]},{"level":3,"title":"如何禁止指令重排序？","slug":"如何禁止指令重排序","link":"#如何禁止指令重排序","children":[]},{"level":3,"title":"volatile可以保证原子性吗？","slug":"volatile可以保证原子性吗","link":"#volatile可以保证原子性吗","children":[]}]},{"level":2,"title":"乐观锁和悲观锁","slug":"乐观锁和悲观锁","link":"#乐观锁和悲观锁","children":[{"level":3,"title":"什么是悲观锁？","slug":"什么是悲观锁","link":"#什么是悲观锁","children":[]},{"level":3,"title":"什么是乐观锁？","slug":"什么是乐观锁","link":"#什么是乐观锁","children":[]},{"level":3,"title":"如何实现乐观锁?","slug":"如何实现乐观锁","link":"#如何实现乐观锁","children":[]},{"level":3,"title":"Java中CAS是如何实现的？","slug":"java中cas是如何实现的","link":"#java中cas是如何实现的","children":[]},{"level":3,"title":"CAS算法存在哪些问题？","slug":"cas算法存在哪些问题","link":"#cas算法存在哪些问题","children":[]},{"level":3,"title":"只能保证一个共享变量的原子操作","slug":"只能保证一个共享变量的原子操作","link":"#只能保证一个共享变量的原子操作","children":[]}]},{"level":2,"title":"ThreadLocal线程本地","slug":"threadlocal线程本地","link":"#threadlocal线程本地","children":[{"level":3,"title":"ThreadLocal有什么用？","slug":"threadlocal有什么用","link":"#threadlocal有什么用","children":[]},{"level":3,"title":"ThreadLocal原理了解吗？","slug":"threadlocal原理了解吗","link":"#threadlocal原理了解吗","children":[]},{"level":3,"title":"ThreadLocal内存泄漏问题是怎么导致的？","slug":"threadlocal内存泄漏问题是怎么导致的","link":"#threadlocal内存泄漏问题是怎么导致的","children":[]},{"level":3,"title":"如何跨线程传递 ThreadLocal 的值？","slug":"如何跨线程传递-threadlocal-的值","link":"#如何跨线程传递-threadlocal-的值","children":[]}]},{"level":2,"title":"线程池","slug":"线程池","link":"#线程池","children":[{"level":3,"title":"什么是线程池？","slug":"什么是线程池","link":"#什么是线程池","children":[]},{"level":3,"title":"为什么要用线程池？","slug":"为什么要用线程池","link":"#为什么要用线程池","children":[]},{"level":3,"title":"如何创建线程池？","slug":"如何创建线程池","link":"#如何创建线程池","children":[]},{"level":3,"title":"为什么不推荐使用内置线程池？","slug":"为什么不推荐使用内置线程池","link":"#为什么不推荐使用内置线程池","children":[]},{"level":3,"title":"线程池常见参数有哪些？如何解释？","slug":"线程池常见参数有哪些-如何解释","link":"#线程池常见参数有哪些-如何解释","children":[]},{"level":3,"title":"线程池的核心线程会被回收吗？","slug":"线程池的核心线程会被回收吗","link":"#线程池的核心线程会被回收吗","children":[]},{"level":3,"title":"核心线程空闲时处于什么状态？","slug":"核心线程空闲时处于什么状态","link":"#核心线程空闲时处于什么状态","children":[]}]}],"git":{"createdTime":1726501168000,"updatedTime":1742870972000,"contributors":[{"name":"Jaeger Eren","email":"erenjaegerking@qq.com","commits":6},{"name":"erenjaeger","email":"ErenJaegerKing@qq.com","commits":1}]},"readingTime":{"minutes":12.09,"words":3626},"filePathRelative":"notes/Java/b_advance/a_juc.md","localizedDate":"2024年9月23日","excerpt":"<h2>线程</h2>\\n<h3>什么是线程和进程？</h3>\\n<p>何为进程？进程是程序的一次执行过程，是系统运行程序的基本单位。比如说在windows系统上查询任务管理器，就可以看到.exe运行的进程</p>\\n<p>何为线程？一个进程在其执行的过程中可以产生多个线程。与线程不同的就是同类的多个线程共享进程中的堆和方法去的资源，但每个线程都有自己的程序计数器、虚拟机栈和本地方法栈。</p>\\n<h3>Java 线程和操作系统的线程有啥区别？</h3>\\n<p>现在的 Java 线程的本质其实就是操作系统的线程。</p>\\n<h3>请简要描述线程与进程的关系,区别及优缺点？</h3>\\n<p>一个进程中可以有多个线程，多个线程共享进程中的堆和方法区（JDK1.8之后的元空间）资源，但是每个线程都有自己的虚拟机栈、程序计数器和本地方法栈</p>","autoDesc":true}');export{p as comp,c as data};
