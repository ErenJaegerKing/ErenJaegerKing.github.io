import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as e,e as a,o as n}from"./app-T23ec4-N.js";const l={};function t(d,s){return n(),e("div",null,s[0]||(s[0]=[a(`<hr><div class="hint-container info"><p class="hint-container-title">相关信息</p><p>学了好多次，尝试了很多错误，发现一定要会用，你学了，也不一定会用啊，要用出来，要和项目结合在一起</p></div><hr><p><a href="https://redis.com.cn/" target="_blank" rel="noopener noreferrer"><strong>贴心小建议：命令不要死记，学会查询就好啦</strong></a></p><p><a href="https://github.com/tporadowski/redis/releases/tag/v5.0.14.1" target="_blank" rel="noopener noreferrer">windows版的redis v5</a></p><p>安装的时候出现了这个问题，哈哈哈，解决了，好舒服啊<a href="https://blog.csdn.net/qq_40799599/article/details/143727015" target="_blank" rel="noopener noreferrer">这个blog</a></p><p><a href="https://redis.com.cn/topics/why-use-redis.html" target="_blank" rel="noopener noreferrer">为什么要选择 Redis 介绍Redis的使用场景与使用 Redis 的原因。</a></p><p>在面试的时候，常被问比较下 Redis 与 Memcache 的优缺点</p><h3 id="主从集群" tabindex="-1"><a class="header-anchor" href="#主从集群"><span>主从集群</span></a></h3><h4 id="集群结构" tabindex="-1"><a class="header-anchor" href="#集群结构"><span>集群结构</span></a></h4><p>集群中有一个master节点、两个slave节点（现在叫replica）。当我们通过Redis的Java客户端访问主从集群时，应该做好路由：</p><ul><li>如果是写操作，应该访问master节点，master会自动将数据同步给两个slave节点</li><li>如果是读操作，建议访问各个slave节点，从而分担并发压力</li></ul><p>建立集群的步骤</p><p>第一步是启动多个Redis实例</p><p>第二步 输入一下命令</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># Redis5.0以前</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">slaveof</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">masteri</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">p&gt; &lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">masterpor</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">t&gt;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># Redis5.0以后</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">replicaof</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">masteri</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">p&gt; &lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">masterpor</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">t&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 查看集群状态</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">info</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> replication</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>有临时和永久两种模式：</p><ul><li>永久生效：在redis.conf文件中利用<code>slaveof</code>命令指定<code>master</code>节点</li><li>临时生效：直接利用redis-cli控制台输入<code>slaveof</code>命令，指定<code>master</code>节点</li></ul><h4 id="主从同步原理" tabindex="-1"><a class="header-anchor" href="#主从同步原理"><span>主从同步原理</span></a></h4><p>这个同步是如何完成的</p><p>这里有一个问题，<code>master</code>如何得知<code>salve</code>是否是第一次来同步呢？？</p><ul><li><strong><code>Replication Id</code></strong>：简称<code>replid</code>，是数据集的标记，replid一致则是同一数据集。每个<code>master</code>都有唯一的<code>replid</code>，<code>slave</code>则会继承<code>master</code>节点的<code>replid</code></li><li><strong><code>offset</code></strong>：偏移量，随着记录在<code>repl_baklog</code>中的数据增多而逐渐增大。<code>slave</code>完成同步时也会记录当前同步的<code>offset</code>。如果<code>slave</code>的<code>offset</code>小于<code>master</code>的<code>offset</code>，说明<code>slave</code>数据落后于<code>master</code>，需要更新。</li></ul><h5 id="全量同步" tabindex="-1"><a class="header-anchor" href="#全量同步"><span>全量同步</span></a></h5><p>主从第一次建立连接时，会执行<strong>全量同步</strong>，将master节点的所有数据都拷贝给slave节点</p><p><strong>master</strong>判断一个节点是否是第一次同步的依据，就是看replid是否一致</p><p>完整流程描述：</p><ul><li><code>slave</code>节点请求增量同步</li><li><code>master</code>节点判断<code>replid</code>，发现不一致，拒绝增量同步</li><li><code>master</code>将完整内存数据生成<code>RDB</code>，发送<code>RDB</code>到<code>slave</code></li><li><code>slave</code>清空本地数据，加载<code>master</code>的<code>RDB</code></li><li><code>master</code>将<code>RDB</code>期间的命令记录在<code>repl_baklog</code>，并持续将log中的命令发送给<code>slave</code></li><li><code>slave</code>执行接收到的命令，保持与<code>master</code>之间的同步</li></ul><h5 id="增量同步" tabindex="-1"><a class="header-anchor" href="#增量同步"><span>增量同步</span></a></h5><p>全量同步需要先做RDB，然后将RDB文件通过网络传输个slave，成本太高了。因此除了第一次做全量同步，其它大多数时候slave与master都是做<strong>增量同步</strong>。</p><p>什么是增量同步？就是只更新slave与master存在差异的部分数据。</p><h5 id="repl-baklog原理" tabindex="-1"><a class="header-anchor" href="#repl-baklog原理"><span>repl_baklog原理</span></a></h5><p>master怎么知道slave与自己的数据差异在哪里呢?</p><p>这就要说到全量同步时的<code>repl_baklog</code>文件了。这个文件是一个固定大小的数组，只不过数组是环形，也就是说<strong>角标到达数组末尾后，会再次从0开始读写</strong>，这样数组头部的数据就会被覆盖。</p><p>如果slave恢复，需要同步，却发现自己的<code>offset</code>都没有了，无法完成增量同步了。只能做<strong>全量同步</strong>。</p><p><code>repl_baklog</code>大小有上限，写满后会覆盖最早的数据。如果slave断开时间过久，导致尚未备份的数据被覆盖，则无法基于<code>repl_baklog</code>做增量同步，只能再次全量同步。</p><h5 id="主从同步优化" tabindex="-1"><a class="header-anchor" href="#主从同步优化"><span>主从同步优化</span></a></h5><p>主从同步可以保证主从数据的一致性</p><p>可以从以下几个方面来优化Redis主从就集群：</p><ul><li>在master中配置<code>repl-diskless-sync yes</code>启用无磁盘复制，避免全量同步时的磁盘IO。</li><li>Redis单节点上的内存占用不要太大，减少RDB导致的过多磁盘IO</li><li>适当提高<code>repl_baklog</code>的大小，发现slave宕机时尽快实现故障恢复，尽可能避免全量同步</li><li>限制一个master上的slave节点数量，如果实在是太多slave，则可以采用<code>主-从-从</code>链式结构，减少master压力</li></ul><p><code>主-从-从</code>架构</p><p>简述全量同步和增量同步区别？</p><ul><li>全量同步：master将完整内存数据生成RDB，发送RDB到slave。后续命令则记录在repl_baklog，逐个发送给slave。</li><li>增量同步：slave提交自己的offset到master，master获取repl_baklog中从offset之后的命令给slave</li></ul><p>什么时候执行全量同步？</p><ul><li>slave节点第一次连接master节点时</li><li>slave节点断开时间太久，repl_baklog中的offset已经被覆盖时</li></ul><p>什么时候执行增量同步？</p><ul><li>slave节点断开又恢复，并且在<code>repl_baklog</code>中能找到offset时</li></ul><h3 id="哨兵" tabindex="-1"><a class="header-anchor" href="#哨兵"><span>哨兵</span></a></h3><p>Redis提供了<code>哨兵</code>（<code>Sentinel</code>）机制来监控主从集群监控状态，确保集群的高可用性。</p><h4 id="哨兵原理" tabindex="-1"><a class="header-anchor" href="#哨兵原理"><span>哨兵原理</span></a></h4><h5 id="哨兵作用" tabindex="-1"><a class="header-anchor" href="#哨兵作用"><span>哨兵作用</span></a></h5><h5 id="状态监控" tabindex="-1"><a class="header-anchor" href="#状态监控"><span>状态监控</span></a></h5><h5 id="选举leader" tabindex="-1"><a class="header-anchor" href="#选举leader"><span>选举leader</span></a></h5><p>首先，Sentinel集群要选出一个执行<code>failover</code>的Sentinel节点，可以成为<code>leader</code>。要成为<code>leader</code>要满足两个条件：</p><ul><li>最先获得超过半数的投票</li><li>获得的投票数不小于<code>quorum</code>值</li></ul><p>而sentinel投票的原则有两条：</p><ul><li>优先投票给目前得票最多的</li><li>如果目前没有任何节点的票，就投给自己</li></ul><p>比如有3个sentinel节点，<code>s1</code>、<code>s2</code>、<code>s3</code>，假如<code>s2</code>先投票：</p><ul><li>此时发现没有任何人在投票，那就投给自己。<code>s2</code>得1票</li><li>接着<code>s1</code>和<code>s3</code>开始投票，发现目前<code>s2</code>票最多，于是也投给<code>s2</code>，<code>s2</code>得3票</li><li><code>s2</code>称为<code>leader</code>，开始故障转移</li></ul><p>不难看出，<strong>谁先</strong>投票，谁就会称为leader，那什么时候会触发投票呢？</p><p>答案是第一个确认master客观下线的人会立刻发起投票，一定会成为leader。</p><p>OK，<code>sentinel</code>找到<code>leader</code>以后，该如何完成<code>failover</code>呢？</p><h5 id="实现故障转移-failover" tabindex="-1"><a class="header-anchor" href="#实现故障转移-failover"><span>实现故障转移（failover）</span></a></h5><h5 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h5><p>Sentinel的三个作用是什么？</p><ul><li>集群监控</li><li>故障恢复</li><li>状态通知</li></ul><p>Sentinel如何判断一个redis实例是否健康？</p><ul><li>每隔1秒发送一次ping命令，如果超过一定时间没有相向则认为是主观下线（<code>sdown</code>）</li><li>如果大多数sentinel都认为实例主观下线，则判定服务客观下线（<code>odown</code>）</li></ul><p>故障转移步骤有哪些？</p><ul><li>首先要在<code>sentinel</code>中选出一个<code>leader</code>，由leader执行<code>failover</code></li><li>选定一个<code>slave</code>作为新的<code>master</code>，执行<code>slaveof noone</code>，切换到master模式</li><li>然后让所有节点都执行<code>slaveof</code> 新master</li><li>修改故障节点配置，添加<code>slaveof</code> 新master</li></ul><p>sentinel选举leader的依据是什么？</p><ul><li>票数超过sentinel节点数量1半</li><li>票数超过quorum数量</li><li>一般情况下最先发起failover的节点会当选</li></ul><p>sentinel从slave中选取master的依据是什么？</p><ul><li>首先会判断slave节点与master节点断开时间长短，如果超过<code>down-after-milliseconds\`\` * 10</code>则会排除该slave节点</li><li>然后判断slave节点的<code>slave-priority</code>值，越小优先级越高，如果是0则永不参与选举（默认都是1）。</li><li>如果<code>slave-prority</code>一样，则判断slave节点的<code>offset</code>值，越大说明数据越新，优先级越高</li><li>最后是判断slave节点的<code>run_id</code>大小，越小优先级越高（<code>通过info server可以查看run_id</code>）。</li></ul><h5 id="redistemplate连接哨兵集群" tabindex="-1"><a class="header-anchor" href="#redistemplate连接哨兵集群"><span>RedisTemplate连接哨兵集群</span></a></h5><p>分为三步：</p><ul><li>1）引入依赖</li><li>2）配置哨兵地址</li><li>3）配置读写分离</li></ul><h6 id="引入依赖" tabindex="-1"><a class="header-anchor" href="#引入依赖"><span>引入依赖</span></a></h6><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" data-title="xml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">dependency</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">groupId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;org.springframework.boot&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">groupId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">artifactId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;spring-boot-starter-data-redis&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">artifactId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">dependency</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h6 id="配置哨兵地址" tabindex="-1"><a class="header-anchor" href="#配置哨兵地址"><span>配置哨兵地址</span></a></h6><div class="language-yaml line-numbers-mode" data-highlighter="shiki" data-ext="yaml" data-title="yaml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">spring</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  redis</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    sentinel</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">      master</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">hmaster</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> # 集群名</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">      nodes</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 哨兵地址列表</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        - </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">192.168.150.101:27001</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        - </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">192.168.150.101:27002</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        - </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">192.168.150.101:27003</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h6 id="配置读写分离" tabindex="-1"><a class="header-anchor" href="#配置读写分离"><span>配置读写分离</span></a></h6><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Bean</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> LettuceClientConfigurationBuilderCustomizer</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> clientConfigurationBuilderCustomizer</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(){</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> clientConfigurationBuilder </span><span style="--shiki-light:#C18401;--shiki-dark:#C678DD;">-&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> clientConfigurationBuilder</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">readFrom</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">ReadFrom</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">REPLICA_PREFERRED</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个bean中配置的就是读写策略，包括四种：</p><ul><li><code>MASTER</code>：从主节点读取</li><li><code>MASTER_PREFERRED</code>：优先从<code>master</code>节点读取，<code>master</code>不可用才读取<code>slave</code></li><li><code>REPLICA</code>：从<code>slave</code>节点读取</li><li><code>REPLICA_PREFERRED</code>：优先从<code>slave</code>节点读取，所有的<code>slave</code>都不可用才读取<code>master</code></li></ul><h3 id="分片集群" tabindex="-1"><a class="header-anchor" href="#分片集群"><span>分片集群</span></a></h3><h4 id="散列插槽" tabindex="-1"><a class="header-anchor" href="#散列插槽"><span>散列插槽</span></a></h4><h4 id="故障转移" tabindex="-1"><a class="header-anchor" href="#故障转移"><span>故障转移</span></a></h4><p>分片集群的节点之间会互相通过ping的方式做心跳检测，超时未回应的节点会被标记为下线状态。当发现master下线时，会将这个master的某个slave提升为master。</p><h4 id="总结-1" tabindex="-1"><a class="header-anchor" href="#总结-1"><span>总结</span></a></h4><p>Redis分片集群如何判断某个key应该在哪个实例？</p><ul><li>将16384个插槽分配到不同的实例</li><li>根据key计算哈希值，对16384取余</li><li>余数作为插槽，寻找插槽所在实例即可</li></ul><p>如何将同一类数据固定的保存在同一个Redis实例？</p><ul><li>Redis计算key的插槽值时会判断key中是否包含<code>{}</code>，如果有则基于<code>{}</code>内的字符计算插槽</li><li>数据的key中可以加入<code>{类型}</code>，例如key都以<code>{typeId}</code>为前缀，这样同类型数据计算的插槽一定相同</li></ul><h4 id="java客户端连接分片集群" tabindex="-1"><a class="header-anchor" href="#java客户端连接分片集群"><span>Java客户端连接分片集群</span></a></h4><p>1）引入redis的starter依赖</p><p>2）配置分片集群地址</p><p>3）配置读写分离</p><div class="language-yaml line-numbers-mode" data-highlighter="shiki" data-ext="yaml" data-title="yaml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">spring</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  redis</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    cluster</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">      nodes</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        - </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">192.168.150.101:7001</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        - </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">192.168.150.101:7002</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        - </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">192.168.150.101:7003</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        - </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">192.168.150.101:8001</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        - </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">192.168.150.101:8002</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        - </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">192.168.150.101:8003</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="数据结构" tabindex="-1"><a class="header-anchor" href="#数据结构"><span>数据结构</span></a></h3><h4 id="redis数据结构" tabindex="-1"><a class="header-anchor" href="#redis数据结构"><span>Redis数据结构</span></a></h4><p>我们常用的Redis数据类型有5种，分别是：</p><ul><li>String</li><li>List</li><li>Set</li><li>SortedSet</li><li>Hash</li></ul><p>还有一些高级数据类型，比如Bitmap、HyperLogLog、GEO等，其底层都是基于上述5种基本数据类型。因此在Redis的源码中，其实只有5种数据类型。</p><h5 id="redisobject" tabindex="-1"><a class="header-anchor" href="#redisobject"><span>RedisObject</span></a></h5><p>可以看到整个结构体中并不包含真实的数据，仅仅是对象头信息，内存占用的大小为4+4+24+32+64 = 128bit</p><p>也就是16字节，然后指针<code>ptr</code>指针指向的才是真实数据存储的内存地址。所以RedisObject的内存开销是很大的。</p><p>属性中的<code>encoding</code>就是当前对象底层采用的<strong>数据结构</strong>或<strong>编码方式</strong>，可选的有11种之多：</p><h6 id="编码方式" tabindex="-1"><a class="header-anchor" href="#编码方式"><span>编码方式</span></a></h6><h6 id="数据结构-1" tabindex="-1"><a class="header-anchor" href="#数据结构-1"><span>数据结构</span></a></h6><h5 id="skiplist" tabindex="-1"><a class="header-anchor" href="#skiplist"><span>SkipList</span></a></h5><p>这种多级指针的查询方式就避免了传统链表的逐个遍历导致的查询效率下降问题。在对有序数据做随机查询和排序时效率非常高。</p><div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" data-title="c" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">typedef</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> struct</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> zskiplist {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 头尾节点指针</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    struct</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> zskiplistNode </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">*</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">header, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">*</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">tail;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 节点数量</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    unsigned</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> long</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> length;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 最大的索引层级</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> level;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">} zskiplist;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到SkipList主要属性是header和tail，也就是头尾指针，因此它是支持双向遍历的。</p><p>跳表中节点的结构体如下：</p><div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" data-title="c" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">typedef</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> struct</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> zskiplistNode {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    sds ele;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 节点存储的字符串</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    double</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> score;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 节点分数，排序、查找用</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    struct</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> zskiplistNode </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">*</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">backward;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 前一个节点指针</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    struct</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> zskiplistLevel {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        struct</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> zskiplistNode </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">*</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">forward;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 下一个节点指针</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        unsigned</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> long</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> span;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 索引跨度</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    } level</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">[]</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 多级索引数组</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">} zskiplistNode;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>每个节点中都包含ele和score两个属性，其中score是得分，也就是节点排序的依据。ele则是节点存储的字符串数据指针。</p><h5 id="sortedset" tabindex="-1"><a class="header-anchor" href="#sortedset"><span>SortedSet</span></a></h5><p>Redis源码中<code>zset</code>，也就是<code>SortedSet</code>的结构体如下：</p><div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" data-title="c" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">typedef</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> struct</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> zset {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    dict </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">*</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">dict;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // dict，底层就是HashTable</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    zskiplist </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">*</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">zsl;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 跳表</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">} zset;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="内存回收" tabindex="-1"><a class="header-anchor" href="#内存回收"><span>内存回收</span></a></h3><p>Redis之所以性能强，最主要的原因就是基于内存存储。然而单节点的Redis其内存大小不宜过大，会影响持久化或主从同步性能。</p><p>我们可以通过修改redis.conf文件，添加下面的配置来配置Redis的最大内存：</p><div class="language-properties line-numbers-mode" data-highlighter="shiki" data-ext="properties" data-title="properties" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#98C379;">maxmemory 1gb</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>当内存达到上限，就无法存储更多数据了。因此，Redis内部会有两套内存回收的策略：</p><ul><li>内存过期策略</li><li>内存淘汰策略</li></ul><h4 id="内存过期处理" tabindex="-1"><a class="header-anchor" href="#内存过期处理"><span>内存过期处理</span></a></h4><p>存入Redis中的数据可以配置过期时间，到期后再次访问会发现这些数据都不存在了，也就是被过期清理了。</p><h5 id="过期命令" tabindex="-1"><a class="header-anchor" href="#过期命令"><span>过期命令</span></a></h5><p>Redis中通过<code>expire</code>命令可以给KEY设置<code>TTL</code>（过期时间）</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 写入一条数据</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">set</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> num</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 123</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 设置20秒过期时间</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">expire</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> num</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 20</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>不过set命令本身也可以支持过期时间的设置：</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 写入一条数据并设置20s过期时间</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">set</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> num</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> EX</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 20</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="过期策略" tabindex="-1"><a class="header-anchor" href="#过期策略"><span>过期策略</span></a></h5><p>Redis的过期KEY删除策略有两种：</p><h4 id="内存淘汰策略" tabindex="-1"><a class="header-anchor" href="#内存淘汰策略"><span>内存淘汰策略</span></a></h4><p>比较容易混淆的有两个算法：</p><ul><li><strong>LRU</strong>（<strong><code>L</code></strong><code>east </code><strong><code>R</code></strong><code>ecently </code><strong><code>U</code></strong><code>sed</code>），最近最久未使用。用当前时间减去最后一次访问时间，这个值越大则淘汰优先级越高。</li><li><strong>LFU</strong>（<strong><code>L</code></strong><code>east </code><strong><code>F</code></strong><code>requently </code><strong><code>U</code></strong><code>sed</code>），最少频率使用。会统计每个key的访问频率，值越小淘汰优先级越高。</li></ul><h4 id="总结-2" tabindex="-1"><a class="header-anchor" href="#总结-2"><span>总结</span></a></h4><h3 id="缓存篇" tabindex="-1"><a class="header-anchor" href="#缓存篇"><span>缓存篇</span></a></h3><h4 id="缓存一致性" tabindex="-1"><a class="header-anchor" href="#缓存一致性"><span>缓存一致性</span></a></h4><p>我们一般会采用Cache Aside 策略，中文是叫旁路缓存策略，然后采用先更新数据库，再删除缓存这个方案，可能也会出现数据不一致的问题，但在实际中，这个问题出现的概率并不高，因为缓存的写入通常要远远快于数据库的写入，所以实际上很难出现请求B已经更新了数据库并且删除了缓存，请求A才更新完缓存的情况，所以「先更新数据库 + 再删除缓存」的方案，是可以保证数据一致性的。但是为了确保万无一失，还是给缓存数据加上过期的时间，就算在这期间存在缓存数据不一致，有过期时间来兜底，这样也能达到最终一致。</p><p>但是现在又有一个问题，就是自己明明更新了数据，但是数据要过一段时间才生效。</p><p>上面这个问题的原因是：在删除缓存（第二个操作）的时候失败了，导致缓存中的数据是旧值。然后因为添加了过期时间作为保底，所以才会过一段时间才生效。</p><p>如何保证「先更新数据库 ，再删除缓存」这两个操作能执行成功？</p><h5 id="缓存命中率有很高的要求" tabindex="-1"><a class="header-anchor" href="#缓存命中率有很高的要求"><span>缓存命中率有很高的要求</span></a></h5><p>「先更新数据库，再删除缓存」的方案虽然保证了数据库与缓存的数据一致性，但是每次更新数据的时候，缓存的数据都会被删除，这样会对缓存的命中率带来影响。<strong>如果我们的业务对缓存命中率有很高的要求，我们可以采用「更新数据库 + 更新缓存」的方案，因为更新缓存并不会出现缓存未命中的情况</strong>。</p><ul><li>在更新缓存前先加个<strong>分布式锁</strong>，保证同一时间只运行一个请求更新缓存，就会不会产生并发问题了，当然引入了锁后，对于写入的性能就会带来影响。</li><li>在更新完缓存时，给缓存加上较短的<strong>过期时间</strong>，这样即时出现缓存不一致的情况，缓存的数据也会很快过期，对业务还是能接受的。</li></ul><h5 id="针对「先删除缓存-再更新数据库」方案在「读-写」并发请求而造成缓存不一致" tabindex="-1"><a class="header-anchor" href="#针对「先删除缓存-再更新数据库」方案在「读-写」并发请求而造成缓存不一致"><span>针对「先删除缓存，再更新数据库」方案在「读 + 写」并发请求而造成缓存不一致</span></a></h5><p>延迟双删</p><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" data-title="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>#删除缓存</span></span>
<span class="line"><span>redis.delKey(X)</span></span>
<span class="line"><span>#更新数据库</span></span>
<span class="line"><span>db.update(X)</span></span>
<span class="line"><span>#睡眠</span></span>
<span class="line"><span>Thread.sleep(N)</span></span>
<span class="line"><span>#再删除缓存</span></span>
<span class="line"><span>redis.delKey(X)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>加了个睡眠时间，主要是为了确保请求 A 在睡眠的时候，请求 B 能够在这这一段时间完成「从数据库读取数据，再把缺失的缓存写入缓存」的操作，然后请求 A 睡眠完，再删除缓存。</p><p>但是具体睡眠多久其实是个<strong>玄学</strong>，很难评估出来，所以这个方案也只是<strong>尽可能</strong>保证一致性而已，极端情况下，依然也会出现缓存不一致的现象。</p><h5 id="如何保证「先更新数据库-再删除缓存」这两个操作能执行成功" tabindex="-1"><a class="header-anchor" href="#如何保证「先更新数据库-再删除缓存」这两个操作能执行成功"><span>如何保证「先更新数据库 ，再删除缓存」这两个操作能执行成功？</span></a></h5><h6 id="消息队列重试机制" tabindex="-1"><a class="header-anchor" href="#消息队列重试机制"><span>消息队列重试机制</span></a></h6><p>我们可以引入<strong>消息队列</strong>，将第二个操作（删除缓存）要操作的数据加入到消息队列，由消费者来操作数据。</p><ul><li>如果应用<strong>删除缓存失败</strong>，可以从消息队列中重新读取数据，然后再次删除缓存，这个就是<strong>重试机制</strong>。当然，如果重试超过的一定次数，还是没有成功，我们就需要向业务层发送报错信息了。</li><li>如果<strong>删除缓存成功</strong>，就要把数据从消息队列中移除，避免重复操作，否则就继续重试。</li></ul><h6 id="订阅-mysql-binlog-再操作缓存" tabindex="-1"><a class="header-anchor" href="#订阅-mysql-binlog-再操作缓存"><span>订阅 MySQL binlog，再操作缓存</span></a></h6><p>「<strong>先更新数据库，再删缓存</strong>」的策略的第一步是更新数据库，那么更新数据库成功，就会产生一条变更日志，记录在 binlog 里。</p><p>于是我们就可以通过订阅 binlog 日志，拿到具体要操作的数据，然后再执行缓存删除，阿里巴巴开源的 Canal 中间件就是基于这个实现的。</p><p>Canal 模拟 MySQL 主从复制的交互协议，把自己伪装成一个 MySQL 的从节点，向 MySQL 主节点发送 dump 请求，MySQL 收到请求后，就会开始推送 Binlog 给 Canal，Canal 解析 Binlog 字节流之后，转换为便于读取的结构化数据，供下游程序订阅使用。</p><p>前面我们说到直接用消息队列重试机制方案的话，会对代码造成入侵，那么 Canal 方案就能很好的规避这个问题，因为它是直接订阅 binlog 日志的，和业务代码没有藕合关系，因此我们可以通过 Canal+ 消息队列的方案来保证数据缓存的一致性。</p><p>具体的做法是：<strong>将binlog日志采集发送到MQ队列里面，然后编写一个简单的缓存删除消息者订阅binlog日志，根据更新log删除缓存，并且通过ACK机制确认处理这条更新log，保证数据缓存一致性</strong></p><p>这里有一个很关键的点，<strong>必须是删除缓存成功，再回 ack 机制给消息队列</strong>，否则可能会造成消息丢失的问题，比如消费服务从消息队列拿到事件之后，直接回了 ack，然后再执行删除缓存操作的话，如果删除缓存的操作还是失败了，那么因为提前给消息队列回 ack了，就没办重试了。</p><p>所以，如果要想保证「先更新数据库，再删缓存」策略第二个操作能执行成功，我们可以使用：</p><ul><li>消息队列来重试缓存的删除，优点是保证缓存一致性的问题，缺点会对业务代码入侵</li><li>订阅 MySQL binlog + 消息队列 + 重试缓存的删除，优点是规避了代码入侵问题，也很好的保证缓存一致性的问题，缺点就是引入的组件比较多，对团队的运维能力比较有高要求。</li></ul><p>这两种方法有一个共同的特点，都是采用<strong>异步操作缓存</strong>。</p><h5 id="为什么是删除缓存-而不是更新缓存呢" tabindex="-1"><a class="header-anchor" href="#为什么是删除缓存-而不是更新缓存呢"><span>为什么是删除缓存，而不是更新缓存呢？</span></a></h5><p>删除一个数据，相比更新一个数据更加轻量级，出问题的概率更小。在实际业务中，缓存的数据可能不是直接来自数据库表，也许来自多张底层数据表的聚合。</p><p>比如商品详情信息，在底层可能会关联商品表、价格表、库存表等，如果更新了一个价格字段，那么就要更新整个数据库，还要关联的去查询和汇总各个周边业务系统的数据，这个操作会非常耗时。 从另外一个角度，不是所有的缓存数据都是频繁访问的，更新后的缓存可能会长时间不被访问，所以说，从计算资源和整体性能的考虑，更新的时候删除缓存，等到下次查询命中再填充缓存，是一个更好的方案。</p><p>系统设计中有一个思想叫 Lazy Loading，适用于那些加载代价大的操作，删除缓存而不是更新缓存，就是懒加载思想的一个应用。</p><p>我们先看下目前企业用的最多的缓存模型。缓存的通用模型有三种：</p><ul><li><code>Cache Aside</code>旁路缓存：有缓存调用者自己维护数据库与缓存的一致性。即： <ul><li>查询时：命中则直接返回，未命中则查询数据库并写入缓存</li><li>更新时：更新数据库并删除缓存，查询时自然会更新缓存</li></ul></li><li><code>Read/Write Through</code>读穿 / 写穿：数据库自己维护一份缓存，底层实现对调用者透明。底层实现： <ul><li>查询时：命中则直接返回，未命中则查询数据库并写入缓存</li><li>更新时：判断缓存是否存在，不存在直接更新数据库。存在则更新缓存，同步更新数据库</li></ul></li><li><code>Write Behind Cahing</code>写回缓存：读写操作都直接操作缓存，由线程异步的将缓存数据同步到数据库</li></ul><p>先删除缓存再更新数据库 由于更新数据库的操作本身比较耗时，在期间有线程来查询数据库并更新缓存的概率非常高。因此不推荐这种方案。</p><p>先更新数据库再删除缓存 可以发现，异常状态发生的概率极为苛刻，线程1必须是查询数据库已经完成，但是缓存尚未写入之前。线程2要完成更新数据库同时删除缓存的两个操作。要知道线程1执行写缓存的速度在毫秒之间，速度非常快，在这么短的时间要完成数据库和缓存的操作，概率非常之低。</p><h4 id="缓存穿透" tabindex="-1"><a class="header-anchor" href="#缓存穿透"><span>缓存穿透</span></a></h4><p>当用户访问的数据，<strong>既不在缓存中，也不在数据库中</strong>，导致请求在访问缓存时，发现缓存缺失，再去访问数据库时，发现数据库中也没有要访问的数据，没办法构建缓存数据，来服务后续的请求。那么当有大量这样的请求到来时，数据库的压力骤增，这就是<strong>缓存穿透</strong>的问题。</p><h5 id="非法请求的限制" tabindex="-1"><a class="header-anchor" href="#非法请求的限制"><span>非法请求的限制</span></a></h5><p>当有大量恶意请求访问不存在的数据的时候，也会发生缓存穿透，因此在 API 入口处我们要判断求请求参数是否合理，请求参数是否含有非法值、请求字段是否存在，如果判断出是恶意请求就直接返回错误，避免进一步访问缓存和数据库。</p><h5 id="缓存空值或者默认值" tabindex="-1"><a class="header-anchor" href="#缓存空值或者默认值"><span>缓存空值或者默认值</span></a></h5><p>当我们线上业务发现缓存穿透的现象时，可以针对查询的数据，在缓存中设置一个空值或者默认值，这样后续请求就可以从缓存中读取到空值或者默认值，返回给应用，而不会继续查询数据库。</p><h5 id="布隆过滤器" tabindex="-1"><a class="header-anchor" href="#布隆过滤器"><span>布隆过滤器</span></a></h5><p>快速判断数据是否存在，避免通过查询数据库来判断数据是否存在。</p><p>即使发生了缓存穿透，大量请求只会查询 Redis 和布隆过滤器，而不会查询数据库，保证了数据库能正常运行，Redis 自身也是支持布隆过滤器的。</p><h6 id="原理" tabindex="-1"><a class="header-anchor" href="#原理"><span>原理</span></a></h6><p>布隆过滤器由「初始值都为 0 的位图数组」和「 N 个哈希函数」两部分组成。当我们在写入数据库数据时，在布隆过滤器里做个标记，这样下次查询数据是否在数据库时，只需要查询布隆过滤器，如果查询到数据没有被标记，说明不在数据库中。</p><p>布隆过滤器会通过 3 个操作完成标记：</p><ul><li>第一步，使用 N 个哈希函数分别对数据做哈希计算，得到 N 个哈希值；</li><li>第二步，将第一步得到的 N 个哈希值对位图数组的长度取模，得到每个哈希值在位图数组的对应位置。</li><li>第三步，将每个哈希值在位图数组的对应位置的值设置为 1；</li></ul><p><strong>当应用要查询数据 x 是否数据库时，通过布隆过滤器只要查到位图数组的第 1、4、6 位置的值是否全为 1，只要有一个为 0，就认为数据 x 不在数据库中</strong>。</p><p>布隆过滤器由于是基于哈希函数实现查找的，高效查找的同时<strong>存在哈希冲突的可能性</strong>，比如数据 x 和数据 y 可能都落在第 1、4、6 位置，而事实上，可能数据库中并不存在数据 y，存在误判的情况。</p><p><strong>查询布隆过滤器说数据存在，并不一定证明数据库中存在这个数据，但是查询到数据不存在，数据库中一定就不存在这个数据</strong>。</p><h4 id="缓存击穿" tabindex="-1"><a class="header-anchor" href="#缓存击穿"><span>缓存击穿</span></a></h4><p>如果缓存中的<strong>某个热点数据过期</strong>了，此时大量的请求访问了该热点数据，就无法从缓存中读取，直接访问数据库，数据库很容易就被高并发的请求冲垮，这就是<strong>缓存击穿</strong>的问题。</p><h5 id="互斥锁方案" tabindex="-1"><a class="header-anchor" href="#互斥锁方案"><span>互斥锁方案</span></a></h5><p>保证同一时间只有一个业务线程更新缓存，未能获取互斥锁的请求，要么等待锁释放后重新读取缓存，要么就返回空值或者默认值。</p><h5 id="不给热点数据设置过期时间" tabindex="-1"><a class="header-anchor" href="#不给热点数据设置过期时间"><span>不给热点数据设置过期时间</span></a></h5><p>由后台异步更新缓存，或者在热点数据准备要过期前，提前通知后台线程更新缓存以及重新设置过期时间；</p><h4 id="缓存雪崩" tabindex="-1"><a class="header-anchor" href="#缓存雪崩"><span>缓存雪崩</span></a></h4><p>当<strong>大量缓存数据在同一时间过期（失效）或者 Redis 故障宕机</strong>时，如果此时有大量的用户请求，都无法在 Redis 中处理，于是全部请求都直接访问数据库，从而导致数据库的压力骤增，严重的会造成数据库宕机，从而形成一系列连锁反应，造成整个系统崩溃，这就是<strong>缓存雪崩</strong>的问题。</p><h5 id="原因" tabindex="-1"><a class="header-anchor" href="#原因"><span>原因</span></a></h5><p>可以看到，发生缓存雪崩有两个原因：</p><ul><li>大量数据同时过期；</li><li>Redis 故障宕机；</li></ul><h5 id="大量数据同时过期" tabindex="-1"><a class="header-anchor" href="#大量数据同时过期"><span>大量数据同时过期</span></a></h5><h6 id="均匀设置过期时间" tabindex="-1"><a class="header-anchor" href="#均匀设置过期时间"><span>均匀设置过期时间</span></a></h6><p>我们可以在对缓存数据设置过期时间时，<strong>给这些数据的过期时间加上一个随机数</strong>，这样就保证数据不会在同一时间过期。</p><h6 id="互斥锁" tabindex="-1"><a class="header-anchor" href="#互斥锁"><span>互斥锁</span></a></h6><p>当业务线程在处理用户请求时，<strong>如果发现访问的数据不在 Redis 里，就加个互斥锁，保证同一时间内只有一个请求来构建缓存</strong>（从数据库读取数据，再将数据更新到 Redis 里），当缓存构建完成后，再释放锁。未能获取互斥锁的请求，要么等待锁释放后重新读取缓存，要么就返回空值或者默认值。</p><p>实现互斥锁的时候，最好设置<strong>超时时间</strong>，不然第一个请求拿到了锁，然后这个请求发生了某种意外而一直阻塞，一直不释放锁，这时其他请求也一直拿不到锁，整个系统就会出现无响应的现象。</p><h6 id="后台更新缓存" tabindex="-1"><a class="header-anchor" href="#后台更新缓存"><span>后台更新缓存</span></a></h6><p>业务线程不再负责更新缓存，缓存也不设置有效期，而是<strong>让缓存“永久有效”，并将更新缓存的工作交由后台线程定时更新</strong>。</p><h5 id="redis-故障宕机" tabindex="-1"><a class="header-anchor" href="#redis-故障宕机"><span>Redis 故障宕机</span></a></h5><h6 id="服务熔断或请求限流机制" tabindex="-1"><a class="header-anchor" href="#服务熔断或请求限流机制"><span>服务熔断或请求限流机制</span></a></h6><p>因为 Redis 故障宕机而导致缓存雪崩问题时，我们可以启动<strong>服务熔断</strong>机制，<strong>暂停业务应用对缓存服务的访问，直接返回错误</strong>，不用再继续访问数据库，从而降低对数据库的访问压力，保证数据库系统的正常运行，然后等到 Redis 恢复正常后，再允许业务应用访问缓存服务。</p><p>服务熔断机制是保护数据库的正常允许，但是暂停了业务应用访问缓存服系统，全部业务都无法正常工作</p><p>为了减少对业务的影响，我们可以启用<strong>请求限流</strong>机制，<strong>只将少部分请求发送到数据库进行处理，再多的请求就在入口直接拒绝服务</strong>，等到 Redis 恢复正常并把缓存预热完后，再解除请求限流的机制。</p><h6 id="构建-redis-缓存高可靠集群" tabindex="-1"><a class="header-anchor" href="#构建-redis-缓存高可靠集群"><span>构建 Redis 缓存高可靠集群</span></a></h6><p>主从节点的方式构建 Redis 缓存高可靠集群。如果 Redis 缓存的主节点故障宕机，从节点可以切换成为主节点，继续提供缓存服务，避免了由于 Redis 故障宕机而导致的缓存雪崩问题。</p>`,216)]))}const p=i(l,[["render",t],["__file","redis_note_2.html.vue"]]),o=JSON.parse('{"path":"/notes/database/b_redis/redis_note_2.html","title":"Redis可以用来做什么","lang":"zh-CN","frontmatter":{"icon":"","description":"相关信息 学了好多次，尝试了很多错误，发现一定要会用，你学了，也不一定会用啊，要用出来，要和项目结合在一起 贴心小建议：命令不要死记，学会查询就好啦 windows版的redis v5 安装的时候出现了这个问题，哈哈哈，解决了，好舒服啊这个blog 为什么要选择 Redis 介绍Redis的使用场景与使用 Redis 的原因。 在面试的时候，常被问比较...","title":"Redis可以用来做什么","date":"2024-11-14T00:00:00.000Z","category":["数据库"],"tag":["Redis"],"order":2,"head":[["meta",{"property":"og:url","content":"https://he9.xin/notes/database/b_redis/redis_note_2.html"}],["meta",{"property":"og:site_name","content":"春风不语即随本心"}],["meta",{"property":"og:title","content":"Redis可以用来做什么"}],["meta",{"property":"og:description","content":"相关信息 学了好多次，尝试了很多错误，发现一定要会用，你学了，也不一定会用啊，要用出来，要和项目结合在一起 贴心小建议：命令不要死记，学会查询就好啦 windows版的redis v5 安装的时候出现了这个问题，哈哈哈，解决了，好舒服啊这个blog 为什么要选择 Redis 介绍Redis的使用场景与使用 Redis 的原因。 在面试的时候，常被问比较..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-12-04T01:53:21.000Z"}],["meta",{"property":"article:author","content":"ErenJaegerKing"}],["meta",{"property":"article:tag","content":"Redis"}],["meta",{"property":"article:published_time","content":"2024-11-14T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-12-04T01:53:21.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Redis可以用来做什么\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-11-14T00:00:00.000Z\\",\\"dateModified\\":\\"2024-12-04T01:53:21.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"ErenJaegerKing\\",\\"url\\":\\"https://he9.xin\\",\\"email\\":\\"erenjaegerking@qq.com\\"}]}"]]},"headers":[{"level":3,"title":"主从集群","slug":"主从集群","link":"#主从集群","children":[]},{"level":3,"title":"哨兵","slug":"哨兵","link":"#哨兵","children":[]},{"level":3,"title":"分片集群","slug":"分片集群","link":"#分片集群","children":[]},{"level":3,"title":"数据结构","slug":"数据结构","link":"#数据结构","children":[]},{"level":3,"title":"内存回收","slug":"内存回收","link":"#内存回收","children":[]},{"level":3,"title":"缓存篇","slug":"缓存篇","link":"#缓存篇","children":[]}],"git":{"createdTime":1731633958000,"updatedTime":1733277201000,"contributors":[{"name":"LiYaoYu","email":"ErenJaegerKing@qq.com","commits":1},{"name":"erenjaeger","email":"ErenJaegerKing@qq.com","commits":1}]},"readingTime":{"minutes":24.19,"words":7258},"filePathRelative":"notes/database/b_redis/redis_note_2.md","localizedDate":"2024年11月14日","excerpt":"<hr>\\n<div class=\\"hint-container info\\">\\n<p class=\\"hint-container-title\\">相关信息</p>\\n<p>学了好多次，尝试了很多错误，发现一定要会用，你学了，也不一定会用啊，要用出来，要和项目结合在一起</p>\\n</div>\\n<hr>\\n<p><a href=\\"https://redis.com.cn/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\"><strong>贴心小建议：命令不要死记，学会查询就好啦</strong></a></p>\\n<p><a href=\\"https://github.com/tporadowski/redis/releases/tag/v5.0.14.1\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">windows版的redis v5</a></p>","autoDesc":true}');export{p as comp,o as data};
