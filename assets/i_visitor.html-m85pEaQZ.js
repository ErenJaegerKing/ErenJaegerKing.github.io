import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,e as i,o as r}from"./app-tK5k8aWv.js";const l={};function o(a,e){return r(),n("div",null,e[0]||(e[0]=[i('<hr><div class="hint-container info"><p class="hint-container-title">相关信息</p><p>设计模式-行为型模式-访问者模式</p></div><hr><h3 id="定义" tabindex="-1"><a class="header-anchor" href="#定义"><span>定义</span></a></h3><p><strong>封装一些作用于某种数据结构中的各元素的操作，它可以在不改变这个数据结构的前提下定义作用于这些元素的新的操作。</strong></p><h3 id="结构" tabindex="-1"><a class="header-anchor" href="#结构"><span>结构</span></a></h3><p>访问者模式包含以下主要角色:</p><ul><li><strong>抽象访问者（Visitor）角色</strong>：定义了对每一个元素<code>（Element）</code>访问的行为，它的参数就是可以访问的元素，它的方法个数理论上来讲与元素类个数（Element的实现类个数）是一样的，从这点不难看出，访问者模式要求元素类的个数不能改变。</li><li><strong>具体访问者（ConcreteVisitor）角色</strong>：给出对每一个元素类访问时所产生的具体行为。</li><li><strong>抽象元素（Element）角色</strong>：定义了一个接受访问者的方法（<code>accept</code>），其意义是指，每一个元素都要可以被访问者访问。</li><li><strong>具体元素（ConcreteElement）角色</strong>： 提供接受访问方法的具体实现，而这个具体的实现，通常情况下是使用访问者提供的访问该元素类的方法。</li><li><strong>对象结构（Object Structure）角色</strong>：定义当中所提到的对象结构，对象结构是一个抽象表述，具体点可以理解为一个具有容器性质或者复合对象特性的类，它会含有一组元素（<code>Element</code>），并且可以迭代这些元素，供访问者访问。</li></ul><h3 id="unl" tabindex="-1"><a class="header-anchor" href="#unl"><span>UNL</span></a></h3><figure><img src="https://drawingbed-686.pages.dev/myblog/202411072124567.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="案例实现" tabindex="-1"><a class="header-anchor" href="#案例实现"><span>案例实现</span></a></h3><p>【例】给宠物喂食</p><p>现在养宠物的人特别多，我们就以这个为例，当然宠物还分为狗，猫等，要给宠物喂食的话，主人可以喂，其他人也可以喂食。</p><ul><li>访问者角色：给宠物喂食的人</li><li>具体访问者角色：主人、其他人</li><li>抽象元素角色：动物抽象类</li><li>具体元素角色：宠物狗、宠物猫</li><li>结构对象角色：主人家</li></ul><figure><img src="https://drawingbed-686.pages.dev/myblog/202411072124579.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="优缺点" tabindex="-1"><a class="header-anchor" href="#优缺点"><span><strong>优缺点</strong></span></a></h3><p><strong>优点：</strong></p><ul><li><p><strong>扩展性好</strong></p><p>在不修改对象结构中的元素的情况下，为对象结构中的元素添加新的功能。</p></li><li><p><strong>复用性好</strong></p><p>通过访问者来定义整个对象结构通用的功能，从而提高复用程度。</p></li><li><p><strong>分离无关行为</strong></p><p>通过访问者来分离无关的行为，把相关的行为封装在一起，构成一个访问者，这样每一个访问者的功能都比较单一。</p></li></ul><p><strong>缺点：</strong></p><ul><li><p><strong>对象结构变化很困难</strong></p><p>在访问者模式中，每增加一个新的元素类，都要在每一个具体访问者类中增加相应的具体操作，这违背了“开闭原则”。</p></li><li><p><strong>违反了依赖倒置原则</strong></p><p>访问者模式依赖了具体类，而没有依赖抽象类。</p></li></ul><h3 id="适用场景" tabindex="-1"><a class="header-anchor" href="#适用场景"><span>适用场景</span></a></h3><ul><li>对象结构相对稳定，但其操作算法经常变化的程序。</li><li>对象结构中的对象需要提供多种不同且不相关的操作，而且要避免让这些操作的变化影响对象的结构。</li></ul>',22)]))}const g=t(l,[["render",o],["__file","i_visitor.html.vue"]]),c=JSON.parse('{"path":"/notes/designPattern/d_behavioral/i_visitor.html","title":"访问者模式","lang":"zh-CN","frontmatter":{"icon":"","description":"相关信息 设计模式-行为型模式-访问者模式 定义 封装一些作用于某种数据结构中的各元素的操作，它可以在不改变这个数据结构的前提下定义作用于这些元素的新的操作。 结构 访问者模式包含以下主要角色: 抽象访问者（Visitor）角色：定义了对每一个元素（Element）访问的行为，它的参数就是可以访问的元素，它的方法个数理论上来讲与元素类个数（Elemen...","title":"访问者模式","date":"2024-11-08T00:00:00.000Z","category":["设计模式"],"tag":["行为型模式","访问者模式"],"order":9,"head":[["meta",{"property":"og:url","content":"https://he9.xin/notes/designPattern/d_behavioral/i_visitor.html"}],["meta",{"property":"og:site_name","content":"春风不语即随本心"}],["meta",{"property":"og:title","content":"访问者模式"}],["meta",{"property":"og:description","content":"相关信息 设计模式-行为型模式-访问者模式 定义 封装一些作用于某种数据结构中的各元素的操作，它可以在不改变这个数据结构的前提下定义作用于这些元素的新的操作。 结构 访问者模式包含以下主要角色: 抽象访问者（Visitor）角色：定义了对每一个元素（Element）访问的行为，它的参数就是可以访问的元素，它的方法个数理论上来讲与元素类个数（Elemen..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://drawingbed-686.pages.dev/myblog/202411072124567.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-11-07T13:25:28.000Z"}],["meta",{"property":"article:author","content":"ErenJaegerKing"}],["meta",{"property":"article:tag","content":"行为型模式"}],["meta",{"property":"article:tag","content":"访问者模式"}],["meta",{"property":"article:published_time","content":"2024-11-08T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-11-07T13:25:28.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"访问者模式\\",\\"image\\":[\\"https://drawingbed-686.pages.dev/myblog/202411072124567.png\\",\\"https://drawingbed-686.pages.dev/myblog/202411072124579.png\\"],\\"datePublished\\":\\"2024-11-08T00:00:00.000Z\\",\\"dateModified\\":\\"2024-11-07T13:25:28.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"ErenJaegerKing\\",\\"url\\":\\"https://he9.xin\\",\\"email\\":\\"erenjaegerking@qq.com\\"}]}"]]},"headers":[{"level":3,"title":"定义","slug":"定义","link":"#定义","children":[]},{"level":3,"title":"结构","slug":"结构","link":"#结构","children":[]},{"level":3,"title":"UNL","slug":"unl","link":"#unl","children":[]},{"level":3,"title":"案例实现","slug":"案例实现","link":"#案例实现","children":[]},{"level":3,"title":"优缺点","slug":"优缺点","link":"#优缺点","children":[]},{"level":3,"title":"适用场景","slug":"适用场景","link":"#适用场景","children":[]}],"git":{"createdTime":1730806731000,"updatedTime":1730985928000,"contributors":[{"name":"LiYaoYu","email":"ErenJaegerKing@qq.com","commits":2}]},"readingTime":{"minutes":2.68,"words":804},"filePathRelative":"notes/designPattern/d_behavioral/i_visitor.md","localizedDate":"2024年11月8日","excerpt":"<hr>\\n<div class=\\"hint-container info\\">\\n<p class=\\"hint-container-title\\">相关信息</p>\\n<p>设计模式-行为型模式-访问者模式</p>\\n</div>\\n<hr>\\n<h3>定义</h3>\\n<p><strong>封装一些作用于某种数据结构中的各元素的操作，它可以在不改变这个数据结构的前提下定义作用于这些元素的新的操作。</strong></p>\\n<h3>结构</h3>\\n<p>访问者模式包含以下主要角色:</p>\\n<ul>\\n<li><strong>抽象访问者（Visitor）角色</strong>：定义了对每一个元素<code>（Element）</code>访问的行为，它的参数就是可以访问的元素，它的方法个数理论上来讲与元素类个数（Element的实现类个数）是一样的，从这点不难看出，访问者模式要求元素类的个数不能改变。</li>\\n<li><strong>具体访问者（ConcreteVisitor）角色</strong>：给出对每一个元素类访问时所产生的具体行为。</li>\\n<li><strong>抽象元素（Element）角色</strong>：定义了一个接受访问者的方法（<code>accept</code>），其意义是指，每一个元素都要可以被访问者访问。</li>\\n<li><strong>具体元素（ConcreteElement）角色</strong>： 提供接受访问方法的具体实现，而这个具体的实现，通常情况下是使用访问者提供的访问该元素类的方法。</li>\\n<li><strong>对象结构（Object Structure）角色</strong>：定义当中所提到的对象结构，对象结构是一个抽象表述，具体点可以理解为一个具有容器性质或者复合对象特性的类，它会含有一组元素（<code>Element</code>），并且可以迭代这些元素，供访问者访问。</li>\\n</ul>","autoDesc":true}');export{g as comp,c as data};
