import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,e as n,o as l}from"./app-Rw91vRZg.js";const e={};function h(k,s){return l(),a("div",null,s[0]||(s[0]=[n(`<div class="hint-container info"><p class="hint-container-title">相关信息</p><p>这是我学校课程的课堂笔记，很详细</p></div><h2 id="_1-简介" tabindex="-1"><a class="header-anchor" href="#_1-简介"><span>1.简介</span></a></h2><ul><li>Docker是一个开源的应用容器引擎</li><li>诞生于2013年初，基于Go语言实现，dotCloud公司出品（后改名为Docker inc）</li><li>Docker可以让开发者打包他们的应用以及依赖包到一个轻量级、可移植的容器中，然后发布到任何流行的Linux机器上；</li><li>容器是完全使用沙箱机制，相互隔离</li><li>容器性能开销极低</li><li>Docker从17.03版本之后 分为CE（Community Edition：社区版）和EE（Enterprise Edition企业版）</li></ul><p>小结：docker是一种容器技术，解决软件跨环境迁移的问题；</p><h2 id="_2-安装docker" tabindex="-1"><a class="header-anchor" href="#_2-安装docker"><span>2.安装Docker</span></a></h2><p>Docker可以 运行在MAC、Windows、CentOS、UBUNTU等操作系统上，我们基于Centos安装Docker。官网：https://www.docker.com 安装Docker步骤命令：</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">1.yum包更新到最新</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    yum</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  update</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">  -y</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">2.安装需要的软件包，yum-util提供yum-config-manager功能，另外两个是devicemapper驱动依赖的；</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">   yum</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  install</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">  -y</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  yum-utils</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  device-mapper-persistent-data</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  1vm2</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">3.设置yum源</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">wget</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -O</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /etc/yum.repos.d/docker-ce.repo</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">如下方式以前的时候也能</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 用</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 但是最近不行了</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">yum-config-manager</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --add-repo</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  https://download.docker.com/linux/centos/docker-ce.repo</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">4.安装docker，出现输入的界面都按y</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">yum</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  install</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">  -y</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">   docker-ce</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">5.查看docker版本</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  验证是否验证成功</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">docker</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -v</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">6.设置docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 开机自启动</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">systemctl</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">   enable</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  docker</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-docker架构" tabindex="-1"><a class="header-anchor" href="#_3-docker架构"><span>3.Docker架构</span></a></h2><figure><img src="https://drawingbed-686.pages.dev/myblog/202409241259032.png" alt="Docker架构" tabindex="0" loading="lazy"><figcaption>Docker架构</figcaption></figure><ul><li>镜像（Image）：Docker镜像（Image），就相当于是一个root文件系统。比如官方镜像ubuntu：16.04就包含了完整的一套Ubuntu16.04最小系统的root文件系统。</li><li>容器（Container）：镜像（Image）和容器（Container）的关系，就像是面向对象程序设计中的类和对象的关系，镜像是静态的定义，容器是镜像运行时的实体。容器可以被创建、启动停止、删除、暂停等；</li><li>仓库（Repository）：仓库可看成一个代码控制中心，用来保存镜像；</li></ul><p>记住一点：镜像 跟容器 之前关系紧密，先有镜像 然后 就可以 生产出很多个该镜像对应的容器出来；</p><h2 id="_4-配置docker镜像加速器" tabindex="-1"><a class="header-anchor" href="#_4-配置docker镜像加速器"><span>4.配置docker镜像加速器</span></a></h2><p>默认情况下，将来从docker hub（https://hub.docker.com/）上下载docker镜像太慢。一般都会配置镜像加速器，国内镜像加速器有：</p><ul><li>USTC：中科大镜像加速器（https://docker.mirrors.ustc.edu.cn）</li><li>阿里云</li><li>网易云</li><li>腾讯云</li></ul><p>容器镜像服务：选择自己对应的系统按照阿里给出的提示指令进行复制黏贴操作这些指令</p><p>最新镜像加速器：</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">  &quot;registry-mirrors&quot;</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">[</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">&quot;https://hub.atomgit.com&quot;</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">]</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>更换加速器 通用方法 但是其中 镜像地址 要根据情况 随时更换：</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">step1：</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">在etc目录下创建一个叫做docker的文件夹（如若没有就创建一下）</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">step2</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ：</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">在/etc/docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 目录下创建一个文件</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  文件里面书写</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 我们的镜像仓库配置内容；</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">vim</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  daemon.json</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">在该配置文件当中书写：</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    &quot;registry-mirrors&quot;</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">[</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">&quot;https://docker.anyhub.us.kg&quot;</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">]</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">step3:</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">重新load一下配置文件</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">systemctl</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">     daemon-reload</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">step4:</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">重启我们的docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 服务</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">systemctl</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">   restart</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  docker</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> </span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">测试下拉镜像：</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  pull</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">   nginx</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当我们进行下载镜像的时候 如果镜像名称后面 没有书写 版本号的话那么默认下载的就是最新的 当前镜像版本 也就是latest（最新的） 如果需要下载指定版本的 某镜像的话可以去docker hub上搜索对应的镜像所有版本 查找到自己需要的镜像的版本号： docker pull 镜像名称:镜像版本号<br> 这样就可以下载到我们需要的指定版本的 镜像了；</p><h2 id="_5-docker命令" tabindex="-1"><a class="header-anchor" href="#_5-docker命令"><span>5.Docker命令</span></a></h2><p>忘记命令的话可以去 https://www.runoob.com/docker/docker-command-manual.html 查找相关命令</p><h3 id="docker服务相关命令" tabindex="-1"><a class="header-anchor" href="#docker服务相关命令"><span>docker服务相关命令</span></a></h3><ul><li>启动docker服务 systemctl start docker</li><li>停止docker服务 systemctl stop docker</li><li>重启docker服务 systemctl restart docker</li><li>查看docker服务状态systemctl status docker</li><li>开机启动docker服务 systemctl enable docker</li></ul><h3 id="docker镜像相关命令" tabindex="-1"><a class="header-anchor" href="#docker镜像相关命令"><span>docker镜像相关命令</span></a></h3><ul><li>查看镜像 (查看本地已经存在的镜像) docker images</li><li>查看所有镜像的 ID docker images -q</li><li>搜索镜像：从网络中查找需要的镜像 docker search 镜像名称（该命令并不能帮助我们查找所有某镜像的版本 帮我们查找的内容是含有搜索内容的名称的所有镜像）</li><li>拉取镜像 从Docker仓库下载镜像到本地，镜像名称格式为 名称：版本号，如果版本号不指定则是最新的版本。如果不知道镜像版本，可以去docker hub 搜索对应镜像查看版本； docker pull 镜像名称</li><li>删除镜像:删除本地镜像 docker rmi 镜像id 也可以 docker rmi 镜像名称:版本号</li><li>删除所有本地镜像 ： docker rmi ·docker images -q· 删除所有本地镜像（符号是tab按键上面的撇）</li></ul><p>其中查看镜像 删除镜像都是对本地仓库进行操作 搜索镜像 拉取镜像 是对远程仓库进行的操作； 在进行下拉镜像过程中可以指定版本号进行下拉镜像，docker pull 镜像名称：版本号 如果不清楚镜像 存在哪些版本 我们可以登录 hub.docker.com(不太好访问) 网站上进行搜索查询；</p><h3 id="docker容器相关命令" tabindex="-1"><a class="header-anchor" href="#docker容器相关命令"><span>Docker容器相关命令</span></a></h3><ul><li>查看正在运行的容器 docker ps</li><li>查看所有容器（包括没有运行的容器） docker ps -a</li><li>创建并启动容器 docker run 参数</li></ul><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" data-title="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>      参数说明</span></span>
<span class="line"><span>      -i  ：保持容器运行，通常与-t同时使用，加入it这两个参数后，容器创建后自动进入容器中，退出容器后，容器自动关闭；</span></span>
<span class="line"><span>      -t  ：为容器重新分配一个伪输入终端，通常与-i同时使用</span></span>
<span class="line"><span>      -d ：以守护（后台）模式运行容器。创建一个容器在后台运行，需要使用docker exec进入容器。退出后  容器不会关闭；</span></span>
<span class="line"><span>      -it ：创建的容器一般称为交互式容器，-id创建的容器一般称为守护式容器</span></span>
<span class="line"><span>     --name：为创建的容器命名</span></span>
<span class="line"><span></span></span>
<span class="line"><span>启动容器：docker  start  容器名称或者容器ID</span></span>
<span class="line"><span>关闭容器：docker   stop   容器名称 或者容器ID</span></span>
<span class="line"><span>进入某容器：docker  exec   容器名称  （docker  exec  -it   my  /bin/bash）</span></span>
<span class="line"><span>删除某容器（注意 删除容器的时候 容器必须是关闭状态才可以进行删除）：docker  rm  容器名称</span></span>
<span class="line"><span>查看容器信息：  docker   inspect  容器名称</span></span>
<span class="line"><span>查看所有容器的id：docker  ps  -aq   </span></span>
<span class="line"><span>删除所有容器   docker  rm  ·docker  ps  -aq·</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>实操：</span></span>
<span class="line"><span>创建一个名字叫做c1  包含xx镜像内容到当前容器的容器  </span></span>
<span class="line"><span>docker   run  -it    --name  c1    镜像名称:镜像版本    /bin/bash  </span></span>
<span class="line"><span>执行后发现直接进入到了新创建的这个叫做c1的容器中  这个时候 如果想要退出当前的 容器 执行  exit即可  就可以退回到 linux容器；</span></span>
<span class="line"><span>docker  run  -id  --name  c2  mysql:latest </span></span>
<span class="line"><span>这个指令执行后是创建启动一个叫做c2的容器 这个容器后台运行并且  默认不进入该容器中；</span></span>
<span class="line"><span>此时想要进入该容器 执行  docker  exec  -it  c2   /bin/bash</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_6-docker-容器数据卷" tabindex="-1"><a class="header-anchor" href="#_6-docker-容器数据卷"><span>6.Docker 容器数据卷</span></a></h2><h3 id="数据卷概念" tabindex="-1"><a class="header-anchor" href="#数据卷概念"><span>数据卷概念</span></a></h3><p>思考： Docker容器删除后再容器中产生的数据还在么？ Docker容器和外部机器可以直接交换文件吗？</p><p>数据卷概念：</p><ul><li>数据卷是宿主机中的一个目录或者文件；</li><li>当容器目录和数据卷绑定后，双方的修改会立即同步；</li><li>一个数据卷可以被多个容器同时挂载</li></ul><p>数据卷作用：</p><ul><li>容器数据持久化（记住一点：当我们删除一个容器的时候 之前同步到 数据卷中的该容器上传的文件数据内容不会被删除）</li><li>外部机器和容器间接通信</li><li>容器之间数据交换</li></ul><h3 id="配置数据卷" tabindex="-1"><a class="header-anchor" href="#配置数据卷"><span>配置数据卷</span></a></h3><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">创建启动容器时，使用-v参数设置数据卷：</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">   run</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    ...</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">  -v</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  宿主机目录（文件）：容器内目录（文件）</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  ...</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">注意事项</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">1.目录必须是绝对路径；</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">2.如果目录不存在，会自动创建（指的是宿主机当中如若没有</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 该目录会去进行创建）；</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">3.一个数据卷可以被多个容器进行挂载</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">   ；一个容器可以挂载多个数据卷；</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">4.当删除某容器后</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  在外的数据卷目录中的数据不会被删除；</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">一般情况下我们建议在创建容器的时候就去挂载数据卷，标准写法是：</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">   run</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">  -it</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">   --name</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  n2</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">      -v</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">   /nginxvol:/etc</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">     nginx:latest</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">   /bin/bash</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>也可以 一个 容器绑定多个数据卷（一般情况下不会这么用）</p><p>多容器之间互相通信：当两个或者两个以上容器共同挂载同一份数据卷的时候，彼此容器之间可以实现文件内容互相传输；</p><h3 id="数据卷容器" tabindex="-1"><a class="header-anchor" href="#数据卷容器"><span>数据卷容器</span></a></h3><p>为什么会出现数据卷容器一说？是因为在docker中一旦容器创建好了 之后不太容易 再去为已经创建好的容器去进行增加数据卷挂载；</p><p>多容器进行数据交换： 1.多个容器挂载同一个数据卷； 2.使用数据卷容器</p><figure><img src="https://drawingbed-686.pages.dev/myblog/202409241313200.png" alt="数据卷容器" tabindex="0" loading="lazy"><figcaption>数据卷容器</figcaption></figure><p>其中这个c3容器就是数据卷容器，相当于 我们先创建一个c3容器，让c3容器挂载到一个数据卷上； 然后创建c1 c2两个容器的时候分别挂载到c3 容器上，这样一来 相当于三个容器都挂载到相同数据卷上； 注意：1.即便c3容器挂掉 也不会影响c1 以及c2 使用数据卷 因为挂载已经完成，内部挂载关系已经成立了； 2.思考：数据卷容器存在的意义是什么？貌似单独创建了一个容器什么也不做，只是一门心思去挂载一个数据卷。 我们之前多个容器自己单独挂载到相同目录实现容器之间互相共用一个数据卷 也能实现现在的效果。那么数据卷容器的存在意义是什么？ 假如有这样一种情形有100个容器都挂载到宿主机相同目录数据卷上 了，突然有一天 宿主机想要更换一下当前目录，那么按照以前的那种处理方式的话我们需要 每个容器都要进行更改，意味着要操作100次更改。但是如果是通过 数据卷容器这种方式的话我们只需要更改 数据卷容器即可，因为通过数据卷容器这种方式 进行的挂载 其他容器是挂载到当前容器的，当前容器发生更改 其他的也会进行同步更改 为我们节约时间提升效率；</p><p>实现数据卷容器案例：</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">创建</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  一个数据卷容器叫做c3</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  ，创建两个其他容器</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  c1、c2</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  让c1</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  c2</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  挂载到c3上</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  然后测试实验数据卷容器：</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">step1：创建启动c3数据卷容器</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> run</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">  -it</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">  --name</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> c3</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -v</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /vdata</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> centos:7</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  /bin/bash</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">step2：创建c1</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  c2</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  容器</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  分别挂载到c3上：</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">   run</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">  -it</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">   --name</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  c1</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">  --volumes-from</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  c3</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  centos:7</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  /bin/bash</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">   run</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">  -it</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">  --name</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">   c2</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --volumes-from</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  c3</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">   centos:7</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  /bin/bash</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">可以通过docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  inspect</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  c1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">   </span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">      docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  inspect</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  c3</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> </span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  inspect</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  c2</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  命令去查看具体每个容器情况</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  在展示内容信息中观察</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> mounts部分内容</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 当中带有对当前容器数据卷内容描述；</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">可观察到</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> c2容器目录中多出vdata目录；</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">c1容器同理；</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">并且</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  c2</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> c1</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 以及c3容器他们mounts</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 部分</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  Source内容也是相同的:</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">二者是相同的（其实三者都是相同的）；</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">即便数据卷容器</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 关闭掉了</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  不会影响其他挂载到数据卷容器之间数据交换；</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">即便数据卷容器关闭掉了</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 依旧可以新建容器的时候</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 挂载到当前数据卷容器当中；</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_7-docker应用部署" tabindex="-1"><a class="header-anchor" href="#_7-docker应用部署"><span>7.Docker应用部署</span></a></h2><h3 id="mysql部署" tabindex="-1"><a class="header-anchor" href="#mysql部署"><span>Mysql部署</span></a></h3><p>需求：在Docker容器中部署Mysql 并通过外部mysql客户端操作Mysql Server 实现步骤： 1.搜索mysql镜像 2.拉取mysq镜像 3.创建容器 4.操作容器中的mysql 注意：容器内的网络服务和外部机器不能直接进行通信，但外部机器和宿主机可以直接通信；宿主机和容器可以直接通信： 当容器中的网络服务需要被外部机器访问时候，可以将容器中提供服务的端口映射到宿主机的端口上。外部及起访问素质及的改端口，从而间接访问容器的服务，这种操作成为端口映射； <img src="https://drawingbed-686.pages.dev/myblog/202409241323412.png" alt="端口映射" loading="lazy"> 实操：</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">1.搜索mysql镜像：</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">  docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">   search</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">   mysql</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">2.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 拉取mysql镜像</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">  docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">   pull</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    mysql：5.6</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">3.创建容器，设置端口映射、目录映射</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    在root目录下创建mysql目录用于存储mysql数据信息</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    mkdir</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  ~/mysql</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">    cd</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  ~/mysql</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    而后开始创建mysql容器：</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  run</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">  -id</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">  \\</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">     -p</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  3307:3306</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">  \\</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">     --</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> name</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  c_mysql</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> \\</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">     -v</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  $PWD</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">/conf:/etc/mysql/conf.d</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">     -v</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> $PWD</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">/logs:/logs</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> \\</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">     -v</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  $PWD</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">/data:/var/lib/mysql</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> \\</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">     -e</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  MYSQL_ROOT_PASSWORD=root</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">  \\</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">   mysql:5.6</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">   参数说明：</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">1.-p</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 3307:3306</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  ：将容器的3306端口映射到宿主机3307端口；</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">2.-v</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  $PWD</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">/conf:/etc/mysql/conf.d:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 将主机当前目录下的conf/my.cnf挂载到容器的</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /etc/mysql/my.cnf</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 配置目录</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">3.-v</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> $PWD</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">/logs:/logs</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ：将主机当前目录下的logs目录挂载到容器的</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /logs</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 日志目录</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">4.-v</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  $PWD</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">/data:/var/lib/mysql</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  ：将主机当前目录西安的data目录</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 挂载到容器的</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  /var/lib/mysql</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 数据目录</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">5.-e</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  MYSQL_ROOT_PASSWORD=root</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  ：初始化root用户的密码</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">进入到当前的容器中：</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  exec</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">   -it</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">   c_mysql</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    /bin/bash</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">在容器中启动进入</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  mysql服务以及客户端：</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">   mysql</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">  -uroot</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">  -proot</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  回车后进入到mysql客户端；</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="tomcat部署" tabindex="-1"><a class="header-anchor" href="#tomcat部署"><span>Tomcat部署</span></a></h3><p>Tomcat简介：tomcat是一个应用服务器 是一个专门用来 运行web项目使用的服务器 该软件 专门用于启动 后 处理 请求与响应使用的；</p><blockquote><p>tomcat软件本身的端口号 是8080；</p></blockquote><p>需求：在docker容器中部署Tomcat，并通过外部机器访问Tomcat部署的项目。 实现步骤： 1.搜索tomcat镜像 2.拉取tomca镜像 3.创建容器 4.部署项目 5.测试访问</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">1.搜索tomcat镜像</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">  docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  search</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  tomcat</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">2.拉取tomcat镜像</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">  docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  pull</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  tomcat</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  </span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">3.创建容器</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ，设置端口映射、目录映射</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">mkdir</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">   ~/tomcat</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">cd</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  ~/tomcat</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  run</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">    -id</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">  --name</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  c_tomcat</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> \\</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">-p  </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">8080:8080</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> \\</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">-v  </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">$PWD</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">:/usr/local/tomcat/webapps</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> \\</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">tomcat：7</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> </span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">参数说明：</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">-p</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  8080:8080：将容器的8080端口</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 映射到主机的8080端口</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">-v</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  $PWD</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">:/usr/local/tomcat/webapps</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  ：将主机中当前目录挂载到容器的webapps</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> </span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">此时在我们linux服务器的</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  ~/tomcat</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 目录下</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 创建一个文件夹</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 在该文件夹中创建一个html页面文件</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">   并编辑一些内容进去保存</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 而后在windows系统中直接访问该页面：访问成功！</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="nginx部署" tabindex="-1"><a class="header-anchor" href="#nginx部署"><span>Nginx部署</span></a></h3><p>需求：在Docker容器中部署Nginx，并通过外部机器访问Nginx</p><p>实现步骤： 1.搜索 2.拉取 3.创建容器 4.部署项目 5.测试访问</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">1.搜索</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> nginx镜像</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  search</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">   nginx</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">2.拉取nginx镜像</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  pull</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  nginx</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">3.创建容器，设置端口映射、目录映射</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#在/root  目录下 创建 nginx 目录用于存储nginx数据信息</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">mkdir</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  ~/nginx</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">cd</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  ~/nginx</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> </span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">4.提前创建好nginx.conf</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 目录</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">mkdir</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">   conf</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">cd</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  conf</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">vim</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  nginx.conf</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>将如下内容添加到配置文件中：</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#user  nobody   nginx启动的所属用户,默认为nobody;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># nginx的最大worker的最大进程数   建议设置为当前服务器的CPU核数</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">worker_processes</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">  1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 错误日志的日志级别 , 错误日志的路径位置</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#error_log  logs/error.log;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#error_log  logs/error.log  notice;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#error_log  logs/error.log  info;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#pid的路径位置</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#pid        logs/nginx.pid;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> </span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">events</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    #单个进程最大连接数</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    worker_connections</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">  1024</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#设定http服务器，利用它的反向代理功能提供负载均衡支持</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">http</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    #文件扩展名与文件类型映射表</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    include</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">       mime.types</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    # 默认的类型</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    default_type</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  application/octet-stream</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    # access.log日志的格式设置,默认为下面的格式</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    #log_format  main  &#39;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#39;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    #                  &#39;$status $body_bytes_sent &quot;$http_referer&quot; &#39;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    #                  &#39;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#39;;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    #access.og文件配置</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    #access_log  logs/access.log  main;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    #开启高效文件传输模式，sendfile指令指定nginx是否调用sendfile函数来输出文件，对于普通应用        设为 on，如果用来进行下载等应用磁盘IO重负载应用，可设置为off，以平衡磁盘与网络I/O处理速度，降低系统的负载。注意：如果图片显示不正常把这个改成off。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    sendfile</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">        on</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    #此选项允许或禁止使用socke的TCP_CORK的选项，此选项仅在使用sendfile的时候使用</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    #tcp_nopush     on;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    #长连接超时时间,单位是秒</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    #keepalive_timeout  0;</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    keepalive_timeout</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">  65</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    # 开启压缩输出,压缩数据使得数据传输更快</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    #gzip  on;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    #虚拟主机的配置</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    server</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        #监听的端口,默认为80</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">        listen</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">       80</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        #域名可以有多个，用空格隔开</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">        server_name</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  localhost</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        #charset koi8-r;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        #定义本虚拟主机的访问日志</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        #access_log  logs/host.access.log  main;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        #对&quot;/&quot;请求路径进行代理</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">        location</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">            #root表示根目录 , html表示根目录下的html文件夹</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">            root</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">   html</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">            #被访问的文件</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">            index</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  index.html</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> index.htm</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        # 错误页面   </span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">        error_page</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">   500</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 502</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 503</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 504</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  /50x.html</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">        location</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /50x.html</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> {</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">            root</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">   html</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>保存 后 开始创建 nginx容器：</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">   run</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">  -id</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">   --name</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  c_nginx</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">  \\</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">-p  </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">80:80</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">  \\</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">-v  </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">/root/conf/nginx.conf:/etc/nginx/nginx.conf</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">  \\</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">-v  </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">/root/conf/logs:/var/log/nginx</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">  \\</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">-v  </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">/root/conf/html:/etc/nginx/html/</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">  \\</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">nginx:latest</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">参数说明：</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">-p</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  80:80：将容器的80端口</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 映射到宿主机的80端口</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">-v</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  $PWD</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">/conf/nginx.conf:/etc/nginx/nginx.conf</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ：将主机当前目录下的</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  /conf/nginx.conf</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 挂载到容器中的</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  etc/nginx/nginx.conf</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  上</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">然后我们进入到html目录</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  去创建一个html文件：</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">cd</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  html</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">vim</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> index.html</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;h1&gt;heello&lt;/h1&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">后保存</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  再次访问</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  ：http:/192.168.141.128</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  回车即可；</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_8-dokcer镜像原理-dockerfile" tabindex="-1"><a class="header-anchor" href="#_8-dokcer镜像原理-dockerfile"><span>8.Dokcer镜像原理 （DockerFile）</span></a></h2><h3 id="概念" tabindex="-1"><a class="header-anchor" href="#概念"><span>概念</span></a></h3><p>首先明确第一个概念 虚拟机 跟容器是有本质不同的，虚拟机具备 独立的 硬件 驱动 网络 等等 相当于是一台独立的pc一样 而我们的容器 相当于是站立在巨人的肩膀上 （站立在我们宿主机的基础上 单独 开辟出来 自己这一部分 必须需要的 特有的 东西 单独拎出来）</p><p>思考：</p><ul><li>Docker镜像本质是什么？</li><li>Docker中一个centos镜像为什么只有200MB，而一个centos操作系统的iso文件要几个G？</li><li>Docker中一个tomcat镜像为什么要有500MB，而一个tomcat安装包只有70多MB？</li></ul><p>操作系统组成部分：</p><ul><li>进程调度子系统</li><li>进程通信子系统</li><li>内存管理子系统</li><li>设备管理子系统</li><li>文件管理子系统</li><li>网络通讯子系统</li><li>作业控制子系统</li></ul><p>Linux文件系统由bootfs和rootfs两部分组成</p><ul><li>bootfs：包含bootloader（引导加载程序）和kernel（内核）</li><li>rootfs：root文件系统，包含的就是典型Linux系统中的/dev，/proc , /bin,/etc等标准目录和文件</li><li>不同的linux发行版，bootfs基本一样，而rootfs不同，如ubuntu ，centos等；</li></ul><p>1.Docker镜像是由特殊的文件系统叠加而成； 2.最低端是bootfs，并使用宿主机的bootfs；（思考能否在linux操作系统上创建一个windows的docker？答案是不能的因为底层bootsfs不同，不能复用） 3.第二层是root文件系统rootfs，称为base image； 4.然后再往上可以叠加其他的镜像文件 5.统一文件系统(Union File System) 技术能够将不同的层整合成一个文件系统，为这些层提供了一个统一的视角，这样 就隐藏了多层的存在，在用户的角度看来，只存在一个文件系统。 6.一个镜像可以放在另一个镜像的上面。位于下面的镜像称为父镜像，最底部的镜像成为基础镜像。 7.当从一个镜像启动容器时，Docker会在最顶层加载一个读写文件系统作为容器。</p><figure><img src="https://drawingbed-686.pages.dev/myblog/202409241335679.png" alt="新的镜像" tabindex="0" loading="lazy"><figcaption>新的镜像</figcaption></figure><p>思考总结：</p><ol><li>Docker镜像本质是什么？ 是一个分层文件系统；</li><li>Docker中一个centos镜像为什么只有200MB，而一个centos操作系统的iso文件要几个G？ centos的iso镜像文件包含bootfs和rootfs，而docker的centos镜像复用操作系统的bootfs（较大较占体积），只有rootfs和其他镜像层；</li><li>Docker中一个tomcat镜像为什么有500MB，而一个tomcat安装包只有70多mb？ 由于docker中镜像是分层的，tomcat虽然只有70多MB，但他需要依赖于父镜像和基础镜像，所有整个对外暴露的tomcat镜像大小500多MB</li></ol><h3 id="镜像制作" tabindex="-1"><a class="header-anchor" href="#镜像制作"><span>镜像制作</span></a></h3><p>Dokcer镜像如何制作？</p><ol><li>容器转为镜像</li></ol><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  commit</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  容器</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> id</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">       镜像名称:版本号</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  save</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">   -o</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  压缩文件名称</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">   镜像名称:版本号</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  load</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">   -i</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    压缩文件名称</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  (解压压缩文件成为镜像文件)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://drawingbed-686.pages.dev/myblog/202409241340557.png" alt="容器转为镜像" loading="lazy"> 通过上述这种方式(docker commit)封装成的镜像是存在一定问题的， 除去当初原始镜像数据卷上的文件还在 镜像本身内部原始容器中的文件都不存在了；例如 放置在tomcat容器webapps目录中的内容 不存在了 ；一般情况下我们不建议使用该种方法进行打包镜像； 总结用上述方法会导致容器中 通过数据卷方式添加进来的数据内容在进行打包镜像的时候会被遗弃；</p><ol start="2"><li>DockerFile 去打包镜像</li></ol><p>DockerFile基本概念 dockerfile就是一个文本文件，其中包含了一条条的指令； 每一条指令构建一层，基于基础镜像，最终构建出一个新的镜像； 对开发人员来说：可以为开发团队提供一个完全一致的开发环境； 对于测试人员：可以直接拿开发时所构建的镜像或者通过DockerFile文件构建一个新的镜像开始工作；</p><p>dockerhub官网网址：https://hub.docker.com</p><p>dockerFile关键字介绍： <img src="https://drawingbed-686.pages.dev/myblog/202409241339167.png" alt="dockerFile关键字" loading="lazy"></p><p><strong>dockerFile案例1：</strong> 案例1需求： 自定义centos7镜像，要求： 1.默认登录路径为/usr 2.可以使用vim 案例1实现步骤： 1.定义父镜像：FROM centos:7 2.定义作者信息：MAINTAINER sunzheng<a href="mailto:kuizhewudi@163.com" target="_blank" rel="noopener noreferrer">kuizhewudi@163.com</a> 3.执行安装vim命令：RUN yum install -y vim 4.定义默认的工作目录 ：WORKDIR /usr 5.定义容器启动执行的命令：CMD /bin/bash</p><p>注意：如何区分理解 RUN命令跟CMD命令 RUN ：是当容器已经启动并且进入以后要去进行执行的 CMD：是容器刚启动起来立即要进行的（跟容器刚刚start相关）</p><p>实操：</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">cd</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  ~</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">mkdir</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">   docker-files</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">cd</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">   docker-files/</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">vim</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  centos_dockerfile</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#进入编辑内容部分 编辑内容为：</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">FROM</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> centos:7</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">MAINTAINER</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  sunzheng</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">kuizhewudi@163.co</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">m&gt;</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">RUN</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">     yum</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  install</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">  -y</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  vim</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">WORKDIR</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  /user</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">CMD</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">   /bin/bash</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#esc  输入  ：wq进行保存</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  build</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">   -f</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  ./centos_dockerfile</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">  -t</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  sunzheng_centos:1</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> .</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#执行当看到 succesfully 提示文案的时候代表  该镜像  创建成功</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用dockerFile进行打包镜像的语句：</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  build</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">  -f</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    dockerfile文件的相对路径/绝对路径</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">   -t</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">   镜像名称:版本名称</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  .</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>dockerFile 案例2：</strong> 案例2需求： 定义dockerfile，发布springboot项目； 案例2实现步骤： 1.定义父镜像： FROM java:8 2.定义作者信息：MAINTARNER sunzheng <a href="mailto:kuizhewudi@163.com" target="_blank" rel="noopener noreferrer">kuizhewudi@163.com</a> 3.将jar包添加到容器：add springboot.jar app.jar 4.定义容器启动执行的命令： CMD java -jar app.jar 5.通过dickerfile构建镜像：docker build -f dockerfile 文件路径 -t 镜像名称：版本 实操： 首先要在自己本地创建一个springboot项目： 最好是maven的 Springmvc项目，而后通过maven打包成一个jar文件 将该jar文件上传到 linux home目录账户目录下；</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">cd</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  ~</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">cd</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  docker-files</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">vim</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> springboot_dockerfile</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#进入编辑界面开始编辑</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">FROM</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">   java:8</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">MAINTAINER</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  sunzheng</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">kuizhewudi@163.co</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">m&gt;</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">ADD</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> test.jar</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  /app.jar</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">CMD</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  java</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -jar</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  /app.jar</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">EXPOSE</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">  8080</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#而后  ESA  ：wq保存</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  build</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">  -f</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ./springboot_dockerfile</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">  -t</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> app:1</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> .</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#然后创建容器</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  run</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">   -it</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">  --name</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  myboot</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -p</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  8080:8080</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  app:1</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  /bin/bash</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_9-docker服务编排工具-docker-compose" tabindex="-1"><a class="header-anchor" href="#_9-docker服务编排工具-docker-compose"><span>9.Docker服务编排工具 Docker Compose</span></a></h2><h3 id="服务编排概念" tabindex="-1"><a class="header-anchor" href="#服务编排概念"><span>服务编排概念</span></a></h3><p>微服务架构的应用系统中一般包含若干个微服务，每个微服务一般都会部署多个实例，如果每个微服务都要手动启停 维护的工作量会很大。例如：</p><ul><li>要从Dockerfilebuildimage或者去dockerhub拉取image</li><li>要创建多个container</li><li>要管理这些container(启动停止删除)</li></ul><p>服务编排（Docker pose）：按照一定的业务规则批量的管理容器的过程</p><p>DockerCompose：Docker Compose是一个编排多容器分布式部署的工具，提供命令集管理容器化应用的完整开发周期，包括服务构建启动和停止。</p><ol><li>利用 Dockerfile定义运行环境镜像</li><li>使用 docker-compose.yml定义组成应用的各服务</li><li>运行 docker-compose up 启动应用</li></ol><h3 id="docker-compose安装和使用-参考网站" tabindex="-1"><a class="header-anchor" href="#docker-compose安装和使用-参考网站"><span>Docker compose安装和使用（参考网站）</span></a></h3><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#下载docker-compose文件</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> curl</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -SL</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> https://github.com/docker/compose/releases/download/v2.27.0/docker-compose-linux-x86_64</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -o</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /usr/local/bin/docker-compose</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> #将文件复制到/usr/local/bin环境变量下面</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">mv</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> docker-compose</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /usr/local/bin</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#给他一个执行权限</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">chmod</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> +x</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /usr/local/bin/docker-compose</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#查看是否安装成功</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">docker-compose</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -v</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">查看到版本号即表示安装成功</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果以上方式下载过于缓慢 可以通过自行下载上传 然后安装该工具方式进行实现：</p><p>https://blog.csdn.net/m0_63459865/article/details/136693757</p><p>下载后手动ftp上传 进行 移动文件目录 等 同上述后者操作；</p><p>如果想要卸载的话 直接执行 rm /usr/local/bin/docker-compose即可</p><p>全称叫做yaml格式类型配置文件 。是一种配置文件的格式而已，就像XML类型配置文件的特点是标签之间包裹标签去实现层级关系一样，yaml配置文件也存有一定的配置规则： 1.同层级关系内容在进行配置的时候要求左边对齐； 2.高级的比下一级的要偏左 或者说下一级的要比上一级进行缩进书写（注意整个yml配置文件在进行实现缩进的时候不可以使用tab进行缩进，只能使用空格进行缩进关系） 3.一般我们要对一些属性进行赋值的时候 是属性 : 值（强调的是 冒号后面跟随值的时候冒号后面一定要加空格 至少一个空格） 4.我们在使用yml格式表达一些配置内容的时候 通过 - 表示数组中很多项的值,需要注意的是-符号后方跟随值得时候也要添加空格</p><p>当docker-compose安装成功之后我们来对其进行学习了解： Docker Compose是一个编排多容器分布式部署的工具，提供命令集管理容器化应用的完整开发周期，包括服务构建 启动和停止。</p><p>使用步骤: 1.利用 Dockerfile定义运行环境镜像 2.使用 docker-compose.yml定义组成应用的各服务 3.运行 docker-compose up 启动应用</p><p>案例借助docker-compose实现nginx反向代理springboot app应用的案例（至少需要两个容器实现：）： 首先我们创建一个文件夹：dockercompose（这个随意） 进入当前文件夹后我们创建一个名字叫做 docker-compose.yml的文件（该文件名固定 不可以乱写） docker-compose.yml中的内容(注意书写格式内容要遵循之前Java中yml格式要求 例如空格要求 以及缩进等): 该案例实现的是 nginx作为反向代理服务器（单独一个容器） 去访问我们的springboot项目（另外独立的一个容器）：</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">version:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;3&#39;</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">services:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> </span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">  nginx:</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">     image:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> nginx</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">     ports:</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">       -</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;80:80&quot;</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">     links:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> </span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">       -</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> app</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">     volumes:</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">      -</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ./nginx/conf.d:/etc/nginx/conf.d</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">  app:</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">   image:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> myboot</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">   expose:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> </span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">     -</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;8080&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">解释说明参数：</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">version：指的是</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  当前docker-compose.yml配置文件的版本级别</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 不是docker-compose</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 软件的版本级别</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">services：指的是我们要创建的容器们（也就是服务们）</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">里面要开始去嵌套书写</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 一个一个的容器了</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">  image属性：当前容器要去进行创建使用使用的镜像（建议大家</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 镜像名称:版本号）</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">  ports属性：进行映射端口使用的</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  </span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">     -</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;80:80&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (注意在这里 </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">左边的80指的是指向给宿主机的端口号</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  :右边的80指的是绑定到容器的端口</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">  links属性：Nginx服务反向代理</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 的应用是哪个</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">   </span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">  volumes：数据卷</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后做好其他准备工作： 在宿主机上创建对应数据卷目录./nginx/conf.d 在该目录中创建一个文件名为 default.conf的文件，在该文件中输入如下内容：</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">server</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">{</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">      listen</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">  80</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">      access_log</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  off</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">      location</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> {</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">      proxy_pass</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  http://app:8000</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">   } </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>保存后 执行docker compose的指令：</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">docker-compose</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  up</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -d</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>然后访问：http://192.168.178.128/test 即可访问成功证明nginx 反向代理boot项目成功；</p><h3 id="docker私有仓库搭建" tabindex="-1"><a class="header-anchor" href="#docker私有仓库搭建"><span>docker私有仓库搭建</span></a></h3><p>像maven一样，一般情况下我们去引入本地不存在的资源的时候是通过远程服务资源中下载到本地仓库，下次如果还需要引入相同资源我们直接使用本地仓库内容即可；</p><p>docker也可以进行搭建私有仓库在公司内部进行使用；</p><p>Docker官方的Dockerhub(https://hub.docker.com)是一个用于管理公共镜像的仓库，我们可以从上面拉取镜像到本地，也可以把我们自己的镜像推送上去。但是，有时候我们的服务器无法访问互联网，或者你不希望将自己的镜像放到公网当中，那么我们就需要搭建自己的私有仓库来存储和管理自己的镜像。</p><p>私有仓库的搭建： (ps:注意一般情况下我们私有服务仓库要跟我们的服务器分开 安全第一)</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">1.私有仓库镜像拉取</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">  docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  pull</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  registery</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">2.创建启动私有仓库容器</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  run</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -id</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">  --name</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  registry</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">  -p</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 5000:5000</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> registry</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">3.打开浏览器输入地址</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> http://私有仓库服务器ip:5000/v2/_catalog</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">如果看到</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">{</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&quot;</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">repositories</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">&quot;:[]}表示私有仓库搭建成功</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">或者直接直接执行curl http://localhost:5000/v2/_catalog  展示如上内容证明私有仓库容器搭建成功</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">4.修改daemon.json（相当于添加信任  让当前私有仓库信任访问的服务ip）</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">vim  /etc/docker/daemon.json</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">在该文件中 添加一个key 保存退出 。此步骤用于让docker 信任私有仓库地址；</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">注意将私有仓库服务器ip修改为自己私有仓库服务器真实ip</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">{&quot;</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">insecure-registies</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">&quot;:[&quot;</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">私有仓库服务器ip:5000</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">&quot;]}</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">5.重启docker服务</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">systemctl  restart docker</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">docker  start  registry（启动私服容器）</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>==========》上传镜像： 1.先标记<br> docker tag 镜像名称：版本号 私有仓库服务器ip:5000/ 私服中镜像新名称：版本号 2.再上传push docker push 私有仓库服务器ip:5000/私服镜像名称：版本号 ========》下拉镜像： docker pull 私有仓局服务器ip:5000/私服务镜像名称：版本号</p><p>======================================================================= Docker 支持的可视化客户端工具： 有很多很多，例如国内的1Panel 以及 Docker UI 等 在这里以1Panel+Centos7环境介绍使用： 概念:1Panel :是一个开源的服务器运维管理面板； 首先去官网访问进行下载安装： 官网：https://1panel.cn/</p><p>补充：ip addr 可以查看 当前centos地址 让当前 虚拟机能够联网 设置:\uFEFFhttps://blog.csdn.net/weixin_45213317/article/details/132171346</p><h3 id="_10-docker-compose实现springboot项目集群" tabindex="-1"><a class="header-anchor" href="#_10-docker-compose实现springboot项目集群"><span>10.Docker Compose实现SpringBoot项目集群</span></a></h3><blockquote><p>要求描述：启动三个项目 做 一个 Nginx 作为反向代理工具；启动一个 mysql 容器为三个服务提供数据支撑服务；</p></blockquote><p>准备基础镜像：</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> pull</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  openjdk:8</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> pull</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  mysql:5.6</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> pull</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  nginx</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在SpringBoot项目根目录下创建 Dockerfile文件，内容为：</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 使用官方Java运行时作为父镜像  </span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">FROM</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> openjdk:8</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 将Spring Boot应用的jar文件添加到容器中  </span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">ADD</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> target/blog-1.0-SNAPSHOT.jar</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  /blog.jar</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 暴露容器的8080端口（根据你的Spring Boot应用配置调整）  </span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">EXPOSE</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 8000</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 设置容器启动时执行的命令  </span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">ENTRYPOINT</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;java&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;-jar&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;/blog.jar&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在构建项目镜像之前请首先注意配置文件部分有关数据库部分相关配置</p><p>在包含Dockerfile的目录中打开终端或命令行界面，运行以下命令来构建Docker镜像：</p><div class="language-cmd line-numbers-mode" data-highlighter="shiki" data-ext="cmd" data-title="cmd" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">docker </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">build</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> -</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">t</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> blog</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">-0.0.1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> .</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>此时检查镜像：</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> images</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>就可以查看到我们刚打包的镜像；</p><p>接下来 下载docker compose 我们要借助 该工具来帮助我们实现docker compose功能;</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">curl</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -SL</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> https://github.com/docker/compose/releases/download/v2.27.0/docker-compose-linux-x86_64</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -o</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /usr/local/bin/docker-compose</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>创建docker-compose.yaml文件（建议在root目录下创建）</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">cd</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ~</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">vim</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  docker-compose.yaml</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">version:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;3&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  </span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">services:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  #Nginx Server  part</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">  nginx:</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    image:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> nginx:latest</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  </span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    ports:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  </span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">      -</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;80:80&quot;</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    depends_on:</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">      -</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> app1</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">      -</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> app2</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">      -</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> app3</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    volumes:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  </span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">      -</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /root/docker-compose/nginx/nginx.conf:/etc/nginx/nginx.conf</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  #Springboot  server  part</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">  app1:</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">     image:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> blog-0.0.1:latest</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">     ports:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  </span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">      -</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;8001:8000&quot;</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">     depends_on:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  </span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">      -</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> db</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">      -</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> redis</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">     environment:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  </span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">      SPRING_DATASOURCE_URL:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> jdbc:mysql://db:3306/jiance</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> </span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">      spring.redis.host:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> redis</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">      REDIS_HOST:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> redis</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">      REDIS_PORT:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 6379</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">  app2:</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">     image:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> blog-0.0.1:latest</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">     ports:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  </span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">      -</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;8002:8000&quot;</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">     depends_on:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> </span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">      -</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> db</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">      -</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> redis</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">     environment:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  </span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">      SPRING_DATASOURCE_URL:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> jdbc:mysql://db:3306/jiance</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">      REDIS_HOST:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> redis</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">      REDIS_PORT:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 6379</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">  app3:</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">     image:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> blog-0.0.1:latest</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">     ports:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  </span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">      -</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;8003:8000&quot;</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">     depends_on:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> </span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">      -</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> db</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">      -</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> redis</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">     environment:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  </span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">      SPRING_DATASOURCE_URL:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> jdbc:mysql://db:3306/jiance</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">      spring.redis.host:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> redis</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">      REDIS_HOST:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> redis</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">      REDIS_PORT:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 6379</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  #Mysql Server  part    </span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">  db:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  </span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    image:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> mysql:5.6</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    ports:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  </span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">      -</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;3306:3306&quot;</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    environment:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  </span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">      MYSQL_ROOT_PASSWORD:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> root</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  </span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">      MYSQL_DATABASE:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> jiance</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  </span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    volumes:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  </span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">      -</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /root/docker-compose/mysqldb:/var/lib/mysql</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">      -</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /root/docker-compose/mysql/my.cnf:/etc/mysql/my.cnf</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">   #redis  Server part</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">  redis:</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    image:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> redis:alpine3.17</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    ports:</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">     -</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;6379:6379&quot;</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    environment:</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">     -</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> TZ=Asia/Shanghai</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    volumes:</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">     -</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /root/redisvol/data:/data</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来在宿主机的/root/docker-compose/mysql目录下 创建我们的my.cnf配置文件 直接在该配置文件中 书写以下内容进行保存退出：</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[client]</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">default-character-set</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">utf8mb4</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[mysql]</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">default-character-set</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">utf8mb4</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[mysqld]</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">character-set-client-handshake</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">FALSE</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">character-set-server</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">utf8mb4</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">collation-server</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">utf8mb4_unicode_ci</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来在宿主机的root/docker-compose/nginx目录下创建我们的nignx.conf配置文件,配置文件内容为：</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">user</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  nginx</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;  </span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">worker_processes</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">  1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;  </span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">error_log</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  /var/log/nginx/error.log</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> warn</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;  </span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">pid</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">        /var/run/nginx.pid</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;  </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  </span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">events</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> {</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  </span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    worker_connections</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">  1024</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;  </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}  </span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">http</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> {</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  </span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    include</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">       /etc/nginx/mime.types</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;  </span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    default_type</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  application/octet-stream</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;  </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  </span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    log_format</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  main</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  &#39;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  </span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">                      &#39;$status $body_bytes_sent &quot;$http_referer&quot; &#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  </span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">                      &#39;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;  </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  </span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    access_log</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  /var/log/nginx/access.log</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;  </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  </span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    sendfile</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">        on</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;  </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    #tcp_nopush     on;  </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  </span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    keepalive_timeout</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">  65</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;  </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  </span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    upstream</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> blog</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> {</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  </span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">        server</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> app1:8000</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;  </span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">        server</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> app2:8000</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">        server</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> app3:8000</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">        ip_hash</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }  </span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    server</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> {</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  </span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">        listen</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">       80</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;  </span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">        server_name</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  localhost</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;  </span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">        location</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> {</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  </span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">            proxy_pass</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> http://blog</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;  </span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">            proxy_set_header</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Host</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> $host</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;  </span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">            proxy_set_header</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> X-Real-IP</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> $remote_addr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;  </span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">            proxy_set_header</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> X-Forwarded-For</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> $proxy_add_x_forwarded_for</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;  </span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">            proxy_set_header</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> X-Forwarded-Proto</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> $scheme</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        }  </span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">        error_page</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">   500</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 502</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 503</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 504</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  /50x.html</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;  </span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">        location</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /50x.html</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> {</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  </span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">            root</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">   /usr/share/nginx/html</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;  </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        }  </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    } </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>保存后 ，切换到docker-compose.yml配置文件所在目录 借助 docker-compose启动 ，执行命令：</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">docker-compose</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> up</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">  -d</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>然后访问：http://宿主机ip/login.html 访问即可；</p><p>然后我们通过navicat链接我们容器中mysql 运行我们的数据脚本 后即可进行登录；</p><p>以上操作建议关闭掉防火墙并重启docker服务后进行以免防火墙对我们访问带来一定阻挠；</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">接下来我们进入到mysql容器中对数据库进行脚本操作：</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  ps</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  查看</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> mysql容器id；</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">进入到mysql容器中：</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> exec</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -it</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> mysqlid内容</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> bash</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">进入容器后</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  进入到mysql客户端执行命令：</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">mysql</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -uroot</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -p</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>或者使用Navicat链接当前数据库都行;</p><p>运行数据库脚本后 插入数据进行登录测试，测试成功；</p><p>截止目前 集群完成；</p>`,157)]))}const d=i(e,[["render",h],["__file","docker_note.html.vue"]]),r=JSON.parse('{"path":"/notes/devops/c_Containerization/docker_note.html","title":"Docker学校课堂笔记","lang":"zh-CN","frontmatter":{"title":"Docker学校课堂笔记","description":"相关信息 这是我学校课程的课堂笔记，很详细 1.简介 Docker是一个开源的应用容器引擎 诞生于2013年初，基于Go语言实现，dotCloud公司出品（后改名为Docker inc） Docker可以让开发者打包他们的应用以及依赖包到一个轻量级、可移植的容器中，然后发布到任何流行的Linux机器上； 容器是完全使用沙箱机制，相互隔离 容器性能开销极...","icon":"","date":"2024-09-24T00:00:00.000Z","category":["运维"],"tag":["Docker"],"head":[["meta",{"property":"og:url","content":"https://he9.xin/notes/devops/c_Containerization/docker_note.html"}],["meta",{"property":"og:site_name","content":"春风不语即随本心"}],["meta",{"property":"og:title","content":"Docker学校课堂笔记"}],["meta",{"property":"og:description","content":"相关信息 这是我学校课程的课堂笔记，很详细 1.简介 Docker是一个开源的应用容器引擎 诞生于2013年初，基于Go语言实现，dotCloud公司出品（后改名为Docker inc） Docker可以让开发者打包他们的应用以及依赖包到一个轻量级、可移植的容器中，然后发布到任何流行的Linux机器上； 容器是完全使用沙箱机制，相互隔离 容器性能开销极..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://drawingbed-686.pages.dev/myblog/202409241259032.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-11-27T14:28:57.000Z"}],["meta",{"property":"article:author","content":"ErenJaegerKing"}],["meta",{"property":"article:tag","content":"Docker"}],["meta",{"property":"article:published_time","content":"2024-09-24T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-11-27T14:28:57.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Docker学校课堂笔记\\",\\"image\\":[\\"https://drawingbed-686.pages.dev/myblog/202409241259032.png\\",\\"https://drawingbed-686.pages.dev/myblog/202409241313200.png\\",\\"https://drawingbed-686.pages.dev/myblog/202409241323412.png\\",\\"https://drawingbed-686.pages.dev/myblog/202409241335679.png\\",\\"https://drawingbed-686.pages.dev/myblog/202409241340557.png\\",\\"https://drawingbed-686.pages.dev/myblog/202409241339167.png\\"],\\"datePublished\\":\\"2024-09-24T00:00:00.000Z\\",\\"dateModified\\":\\"2024-11-27T14:28:57.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"ErenJaegerKing\\",\\"url\\":\\"https://he9.xin\\",\\"email\\":\\"erenjaegerking@qq.com\\"}]}"]]},"headers":[{"level":2,"title":"1.简介","slug":"_1-简介","link":"#_1-简介","children":[]},{"level":2,"title":"2.安装Docker","slug":"_2-安装docker","link":"#_2-安装docker","children":[]},{"level":2,"title":"3.Docker架构","slug":"_3-docker架构","link":"#_3-docker架构","children":[]},{"level":2,"title":"4.配置docker镜像加速器","slug":"_4-配置docker镜像加速器","link":"#_4-配置docker镜像加速器","children":[]},{"level":2,"title":"5.Docker命令","slug":"_5-docker命令","link":"#_5-docker命令","children":[{"level":3,"title":"docker服务相关命令","slug":"docker服务相关命令","link":"#docker服务相关命令","children":[]},{"level":3,"title":"docker镜像相关命令","slug":"docker镜像相关命令","link":"#docker镜像相关命令","children":[]},{"level":3,"title":"Docker容器相关命令","slug":"docker容器相关命令","link":"#docker容器相关命令","children":[]}]},{"level":2,"title":"6.Docker 容器数据卷","slug":"_6-docker-容器数据卷","link":"#_6-docker-容器数据卷","children":[{"level":3,"title":"数据卷概念","slug":"数据卷概念","link":"#数据卷概念","children":[]},{"level":3,"title":"配置数据卷","slug":"配置数据卷","link":"#配置数据卷","children":[]},{"level":3,"title":"数据卷容器","slug":"数据卷容器","link":"#数据卷容器","children":[]}]},{"level":2,"title":"7.Docker应用部署","slug":"_7-docker应用部署","link":"#_7-docker应用部署","children":[{"level":3,"title":"Mysql部署","slug":"mysql部署","link":"#mysql部署","children":[]},{"level":3,"title":"Tomcat部署","slug":"tomcat部署","link":"#tomcat部署","children":[]},{"level":3,"title":"Nginx部署","slug":"nginx部署","link":"#nginx部署","children":[]}]},{"level":2,"title":"8.Dokcer镜像原理 （DockerFile）","slug":"_8-dokcer镜像原理-dockerfile","link":"#_8-dokcer镜像原理-dockerfile","children":[{"level":3,"title":"概念","slug":"概念","link":"#概念","children":[]},{"level":3,"title":"镜像制作","slug":"镜像制作","link":"#镜像制作","children":[]}]},{"level":2,"title":"9.Docker服务编排工具  Docker Compose","slug":"_9-docker服务编排工具-docker-compose","link":"#_9-docker服务编排工具-docker-compose","children":[{"level":3,"title":"服务编排概念","slug":"服务编排概念","link":"#服务编排概念","children":[]},{"level":3,"title":"Docker  compose安装和使用（参考网站）","slug":"docker-compose安装和使用-参考网站","link":"#docker-compose安装和使用-参考网站","children":[]},{"level":3,"title":"docker私有仓库搭建","slug":"docker私有仓库搭建","link":"#docker私有仓库搭建","children":[]},{"level":3,"title":"10.Docker Compose实现SpringBoot项目集群","slug":"_10-docker-compose实现springboot项目集群","link":"#_10-docker-compose实现springboot项目集群","children":[]}]}],"git":{"createdTime":1727157757000,"updatedTime":1732717737000,"contributors":[{"name":"LiYaoYu","email":"ErenJaegerKing@qq.com","commits":1}]},"readingTime":{"minutes":29.14,"words":8743},"filePathRelative":"notes/devops/c_Containerization/docker_note.md","localizedDate":"2024年9月24日","excerpt":"<div class=\\"hint-container info\\">\\n<p class=\\"hint-container-title\\">相关信息</p>\\n<p>这是我学校课程的课堂笔记，很详细</p>\\n</div>\\n<h2>1.简介</h2>\\n<ul>\\n<li>Docker是一个开源的应用容器引擎</li>\\n<li>诞生于2013年初，基于Go语言实现，dotCloud公司出品（后改名为Docker  inc）</li>\\n<li>Docker可以让开发者打包他们的应用以及依赖包到一个轻量级、可移植的容器中，然后发布到任何流行的Linux机器上；</li>\\n<li>容器是完全使用沙箱机制，相互隔离</li>\\n<li>容器性能开销极低</li>\\n<li>Docker从17.03版本之后  分为CE（Community  Edition：社区版）和EE（Enterprise  Edition企业版）</li>\\n</ul>","autoDesc":true}');export{d as comp,r as data};
