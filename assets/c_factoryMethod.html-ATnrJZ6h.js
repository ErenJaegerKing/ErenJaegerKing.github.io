import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,a as r,o as a}from"./app-9wiy9bDp.js";const o={};function i(p,t){return a(),n("div",null,t[0]||(t[0]=[r('<hr><div class="hint-container info"><p class="hint-container-title">相关信息</p><p>设计模式-创建型模式-工厂方法模式</p></div><hr><h3 id="动机" tabindex="-1"><a class="header-anchor" href="#动机"><span>动机</span></a></h3><p>针对简单工厂模式的缺点，使用工厂方法模式就可以完美的解决，完全遵循开闭原则。</p><h3 id="定义" tabindex="-1"><a class="header-anchor" href="#定义"><span>定义</span></a></h3><p><strong>工厂方法模式</strong>是一种创建型设计模式， 其在父类中提供一个创建对象的方法， 允许子类决定实例化对象的类型。</p><h3 id="结构" tabindex="-1"><a class="header-anchor" href="#结构"><span>结构</span></a></h3><p>工厂方法模式的主要角色：</p><ul><li><strong>抽象工厂</strong>（Abstract Factory）：提供了创建产品的接口，调用者通过它访问具体工厂的工厂方法来创建产品。</li><li><strong>具体工厂</strong>（ConcreteFactory）：主要是实现抽象工厂中的抽象方法，完成具体产品的创建。</li><li><strong>抽象产品</strong>（Product）：定义了产品的规范，描述了产品的主要特性和功能。</li><li><strong>具体产品</strong>（ConcreteProduct）：实现了抽象产品角色所定义的接口，由具体工厂来创建，它同具体工厂之间一一对应。</li></ul><h3 id="案例" tabindex="-1"><a class="header-anchor" href="#案例"><span>案例</span></a></h3><p>要增加产品类时也要相应地增加工厂类，不需要修改工厂类的代码了，这样就解决了简单工厂模式的缺点。</p><p>工厂方法模式是简单工厂模式的进一步抽象。由于使用了多态性，工厂方法模式保持了简单工厂模式的优点，而且克服了它的缺点。</p><h3 id="优缺点" tabindex="-1"><a class="header-anchor" href="#优缺点"><span>优缺点</span></a></h3><p><strong>优点：</strong></p><ul><li><p><strong>减少耦合</strong></p><p>你可以避免创建者和具体产品之间的紧密耦合。</p></li><li><p><strong><em>单一职责原则</em>。</strong></p><p>你可以将产品创建代码放在程序的单一位置， 从而使得代码更容易维护。</p></li><li><p><strong><em>开闭原则</em>。</strong></p><p>无需更改现有客户端代码， 你就可以在程序中引入新的产品类型。</p></li></ul><p><strong>缺点：</strong></p><ul><li><p><strong>引入更多的子类，代码会复杂</strong></p><p>应用工厂方法模式需要引入许多新的子类， 代码可能会因此变得更复杂。 最好的情况是将该模式引入创建者类的现有层次结构中。</p></li></ul>',18)]))}const c=e(o,[["render",i],["__file","c_factoryMethod.html.vue"]]),h=JSON.parse('{"path":"/notes/designPattern/b_creation/c_factoryMethod.html","title":"工厂方法模式","lang":"zh-CN","frontmatter":{"icon":"","description":"相关信息 设计模式-创建型模式-工厂方法模式 动机 针对简单工厂模式的缺点，使用工厂方法模式就可以完美的解决，完全遵循开闭原则。 定义 工厂方法模式是一种创建型设计模式， 其在父类中提供一个创建对象的方法， 允许子类决定实例化对象的类型。 结构 工厂方法模式的主要角色： 抽象工厂（Abstract Factory）：提供了创建产品的接口，调用者通过它访...","title":"工厂方法模式","date":"2024-11-14T00:00:00.000Z","category":["设计模式"],"tag":["创建型模式","工厂方法模式"],"order":3,"head":[["meta",{"property":"og:url","content":"https://ErenJaegerKing.github.io/notes/designPattern/b_creation/c_factoryMethod.html"}],["meta",{"property":"og:site_name","content":"ErenJaeger"}],["meta",{"property":"og:title","content":"工厂方法模式"}],["meta",{"property":"og:description","content":"相关信息 设计模式-创建型模式-工厂方法模式 动机 针对简单工厂模式的缺点，使用工厂方法模式就可以完美的解决，完全遵循开闭原则。 定义 工厂方法模式是一种创建型设计模式， 其在父类中提供一个创建对象的方法， 允许子类决定实例化对象的类型。 结构 工厂方法模式的主要角色： 抽象工厂（Abstract Factory）：提供了创建产品的接口，调用者通过它访..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-11-11T15:12:51.000Z"}],["meta",{"property":"article:author","content":"ErenJaegerKing"}],["meta",{"property":"article:tag","content":"创建型模式"}],["meta",{"property":"article:tag","content":"工厂方法模式"}],["meta",{"property":"article:published_time","content":"2024-11-14T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-11-11T15:12:51.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"工厂方法模式\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-11-14T00:00:00.000Z\\",\\"dateModified\\":\\"2024-11-11T15:12:51.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"ErenJaegerKing\\",\\"url\\":\\"https://ErenJaegerKing.github.io\\",\\"email\\":\\"erenjaegerking@qq.com\\"}]}"]]},"headers":[{"level":3,"title":"动机","slug":"动机","link":"#动机","children":[]},{"level":3,"title":"定义","slug":"定义","link":"#定义","children":[]},{"level":3,"title":"结构","slug":"结构","link":"#结构","children":[]},{"level":3,"title":"案例","slug":"案例","link":"#案例","children":[]},{"level":3,"title":"优缺点","slug":"优缺点","link":"#优缺点","children":[]}],"git":{"createdTime":1730808096000,"updatedTime":1731337971000,"contributors":[{"name":"LiYaoYu","email":"ErenJaegerKing@qq.com","commits":3}]},"readingTime":{"minutes":1.81,"words":543},"filePathRelative":"notes/designPattern/b_creation/c_factoryMethod.md","localizedDate":"2024年11月14日","excerpt":"<hr>\\n<div class=\\"hint-container info\\">\\n<p class=\\"hint-container-title\\">相关信息</p>\\n<p>设计模式-创建型模式-工厂方法模式</p>\\n</div>\\n<hr>\\n<h3>动机</h3>\\n<p>针对简单工厂模式的缺点，使用工厂方法模式就可以完美的解决，完全遵循开闭原则。</p>\\n<h3>定义</h3>\\n<p><strong>工厂方法模式</strong>是一种创建型设计模式，&nbsp;其在父类中提供一个创建对象的方法，&nbsp;允许子类决定实例化对象的类型。</p>\\n<h3>结构</h3>\\n<p>工厂方法模式的主要角色：</p>","autoDesc":true}');export{c as comp,h as data};
