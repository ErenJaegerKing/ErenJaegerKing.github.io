import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,a as t,o as a}from"./app-DFxhKsBE.js";const l={};function n(r,i){return a(),s("div",null,i[0]||(i[0]=[t(`<h2 id="基础" tabindex="-1"><a class="header-anchor" href="#基础"><span>基础</span></a></h2><p>【Redis】对redis这个中间件进行深入学习，要会用，懂原理，并整理成博客记录 （配置文件详解：https://blog.csdn.net/w15558056319/article/details/121414742）</p><p>【Redis】用二进制文件安装Redis，设置密码为强密码：XXXXXXX，开放6379安全组 Redis学习中文网：https://redis.com.cn/</p><h2 id="实战" tabindex="-1"><a class="header-anchor" href="#实战"><span>实战</span></a></h2><h3 id="【redis】短信登录" tabindex="-1"><a class="header-anchor" href="#【redis】短信登录"><span>【Redis】短信登录：</span></a></h3><ol><li>验证手机号以及生成验证码的工具类（hutool）</li><li>保存用户信息到Redis中可以隐藏用户敏感信息 Key唯一、Token（hutool）</li><li>状态登录刷新的问题（对于不需要拦截的路径）</li></ol><h3 id="【redis】缓存三剑客" tabindex="-1"><a class="header-anchor" href="#【redis】缓存三剑客"><span>【Redis】缓存三剑客：</span></a></h3><ol><li>为什么要使用缓存？</li><li>缓存模型和思路</li><li>缓存更新/淘汰策略（内存淘汰、超时剔除、主动更新）</li><li>数据库缓存不一致的问题（Cache Aside Pattern 人工编码方式：双写方案）三个问题：删除缓存还是更新缓存？如何保证缓存与数据库的操作的同时成功或失败？先操作缓存还是先操作数据库？（主要是两个操作之间所花时间的长短）</li><li>缓存穿透</li><li>缓存雪崩</li><li>缓存击穿（互斥锁[SETNX]、逻辑过期）</li><li>封装Redis工具类</li></ol><h3 id="【redis】高并发下的线程安全" tabindex="-1"><a class="header-anchor" href="#【redis】高并发下的线程安全"><span>【Redis】高并发下的线程安全：</span></a></h3><ol><li>分布式全局唯一ID（唯一性、高性能、安全性、递增性、高可用）（符号位、时间戳、序列号）</li><li>乐观锁解决超卖问题 （关键在于数据是否有被修改过 ） 常见的方法：1、版本号法 2、字段对比机制</li></ol><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">UPDATE</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> table_name </span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">SET</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> stock </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> stock </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> </span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">WHERE</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> voucher_id </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> ?</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> AND</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> stock </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>为什么可以保证并发安全？(1)、UPDATE语句的原子性(2)、数据库的行级锁机制(3)、条件限制 (stock &gt; 0) (4)、秒杀业务（一人一单）需要控制锁的粒度 synchronized</p><ol start="3"><li>分布式锁redis：满足分布式系统或集群模式下多进程可见并且互斥的锁（可见性、互斥、高可用、高性能、安全性）常见的分布式锁有三种：MySQL（利用MySQL本身的互斥锁机制）、Redis（利用setnx这样的互斥命令，需要去深入学习这个的原理Lua脚本）、Zookeeper (1)、利用setnx方法的原子性 有过期时间防止死锁 (2)、会出现锁误删的情况（解决方法：存入线程标示）(3)、会出现原子性问题 （解决方法：使用Lua脚本解决多条命令原子性问题https://www.runoob.com/lua/lua-tutorial.html）Redis调用脚本的常见命令：help @scripting</li><li>分布式锁redission（重入问题（Lock-voaltile+state synchronized-count redission-hash（big-key、exprie、small-key））、不可重试、超时释放、主从一致性）(Lock + Synchronizer)</li></ol><p>会出现的问题：(1)、事务与锁会发生事务还没提交(2)、锁就会释放的问题 事务与this会发生不生效的问题（this指向当前实例、代理对象的角色被绕过） 5. 异步秒杀思路：先利用Redis完成库存余量、一人一单判断，完成抢单业务，再将下单业务放入阻塞队列，利用独立线程异步下单</p><h3 id="【redis】排序方式-唯一性-查找方式-redis具体场景下的使用" tabindex="-1"><a class="header-anchor" href="#【redis】排序方式-唯一性-查找方式-redis具体场景下的使用"><span>【Redis】排序方式 唯一性 查找方式 redis具体场景下的使用</span></a></h3><ol><li>Redis消息队列（Stream支持消息持久化、支持阻塞读取、支持消息确认机制、支持消息回溯、受限于队列长度，消费堆积处理 可以利用消费者组提高消费速度，减少堆积）</li><li>点赞（set）</li><li>排行榜（sortedSet根据score值排序、唯一性为唯一、查找方式为根据元素查找）</li><li>共同关注（set 求交集）</li><li>Feed流（拉模式、推模式、推拉结合）</li><li>附近商户 GEO（Geolocation）地理坐标</li><li>用户签到（BitMap）</li><li>UV统计（UV：全称Unique Visitor，也叫独立访客量 PV：全称Page View，也叫页面访问量或点击量）Hyperloglog(HLL)是从Loglog算法派生的概率算法，也就是统计功能</li></ol>`,16)]))}const o=e(l,[["render",n],["__file","redis_note_1.html.vue"]]),p=JSON.parse('{"path":"/notes/database/b_redis/redis_note_1.html","title":"Redis在项目中的使用","lang":"zh-CN","frontmatter":{"icon":"","description":"基础 【Redis】对redis这个中间件进行深入学习，要会用，懂原理，并整理成博客记录 （配置文件详解：https://blog.csdn.net/w15558056319/article/details/121414742） 【Redis】用二进制文件安装Redis，设置密码为强密码：XXXXXXX，开放6379安全组 Redis学习中文网：htt...","title":"Redis在项目中的使用","date":"2024-12-04T00:00:00.000Z","category":["数据库"],"tag":["Redis"],"order":1,"head":[["meta",{"property":"og:url","content":"https://he9.xin/notes/database/b_redis/redis_note_1.html"}],["meta",{"property":"og:site_name","content":"春风不语即随本心"}],["meta",{"property":"og:title","content":"Redis在项目中的使用"}],["meta",{"property":"og:description","content":"基础 【Redis】对redis这个中间件进行深入学习，要会用，懂原理，并整理成博客记录 （配置文件详解：https://blog.csdn.net/w15558056319/article/details/121414742） 【Redis】用二进制文件安装Redis，设置密码为强密码：XXXXXXX，开放6379安全组 Redis学习中文网：htt..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-12-04T01:53:21.000Z"}],["meta",{"property":"article:author","content":"ErenJaegerKing"}],["meta",{"property":"article:tag","content":"Redis"}],["meta",{"property":"article:published_time","content":"2024-12-04T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-12-04T01:53:21.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Redis在项目中的使用\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-12-04T00:00:00.000Z\\",\\"dateModified\\":\\"2024-12-04T01:53:21.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"ErenJaegerKing\\",\\"url\\":\\"https://he9.xin\\",\\"email\\":\\"erenjaegerking@qq.com\\"}]}"]]},"headers":[{"level":2,"title":"基础","slug":"基础","link":"#基础","children":[]},{"level":2,"title":"实战","slug":"实战","link":"#实战","children":[{"level":3,"title":"【Redis】短信登录：","slug":"【redis】短信登录","link":"#【redis】短信登录","children":[]},{"level":3,"title":"【Redis】缓存三剑客：","slug":"【redis】缓存三剑客","link":"#【redis】缓存三剑客","children":[]},{"level":3,"title":"【Redis】高并发下的线程安全：","slug":"【redis】高并发下的线程安全","link":"#【redis】高并发下的线程安全","children":[]},{"level":3,"title":"【Redis】排序方式 唯一性 查找方式 redis具体场景下的使用","slug":"【redis】排序方式-唯一性-查找方式-redis具体场景下的使用","link":"#【redis】排序方式-唯一性-查找方式-redis具体场景下的使用","children":[]}]}],"git":{"createdTime":1726414121000,"updatedTime":1733277201000,"contributors":[{"name":"LiYaoYu","email":"ErenJaegerKing@qq.com","commits":1},{"name":"erenjaeger","email":"ErenJaegerKing@qq.com","commits":1}]},"readingTime":{"minutes":3.37,"words":1010},"filePathRelative":"notes/database/b_redis/redis_note_1.md","localizedDate":"2024年12月4日","excerpt":"<h2>基础</h2>\\n<p>【Redis】对redis这个中间件进行深入学习，要会用，懂原理，并整理成博客记录 （配置文件详解：https://blog.csdn.net/w15558056319/article/details/121414742）</p>\\n<p>【Redis】用二进制文件安装Redis，设置密码为强密码：XXXXXXX，开放6379安全组\\nRedis学习中文网：https://redis.com.cn/</p>\\n<h2>实战</h2>\\n<h3>【Redis】短信登录：</h3>\\n<ol>\\n<li>验证手机号以及生成验证码的工具类（hutool）</li>\\n<li>保存用户信息到Redis中可以隐藏用户敏感信息   Key唯一、Token（hutool）</li>\\n<li>状态登录刷新的问题（对于不需要拦截的路径）</li>\\n</ol>","autoDesc":true}');export{o as comp,p as data};
