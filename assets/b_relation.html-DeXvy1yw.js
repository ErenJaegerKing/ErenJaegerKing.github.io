import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as i,e as n,o as a}from"./app-BVWX-tRK.js";const o={};function r(l,e){return a(),i("div",null,e[0]||(e[0]=[n('<h2 id="关联关系-3种" tabindex="-1"><a class="header-anchor" href="#关联关系-3种"><span>关联关系 3种</span></a></h2><ul><li>在UML类图中，关联通常使用实现箭头表示</li><li>关联关系：指的是<code>类与类之间的联接</code>，<strong><code>它使一个类知道另一个类的属性和方法（实例变量体现）</code></strong>。A类依赖于B对象,并且<code>把B作为A的一个成员变量</code>, 则A和B存在关联关系.</li><li><strong>关联可以是双向的，也可以是单向的</strong>。两个类之前是一个层次的，不存在部分跟整体之间的关系。</li></ul><p><strong>关联关系的判断方法：</strong></p><ul><li>判断都是从对象的实例上面来看的</li><li>判断关系必须确定一对属性</li><li>判断关系必须确定具体需求</li></ul><h3 id="_1、单向关联" tabindex="-1"><a class="header-anchor" href="#_1、单向关联"><span>1、单向关联</span></a></h3><p>在UML类图中单向关联用一个带箭头的实线表示。上图表示每个顾客都有一个地址，这通过让Customer类持有一个类型为Address的成员变量类实现。</p><figure><img src="https://drawingbed-686.pages.dev/myblog/202411032106094.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_2、双向关联" tabindex="-1"><a class="header-anchor" href="#_2、双向关联"><span><strong>2、双向关联</strong></span></a></h3><p>从上图中我们很容易看出，所谓的双向关联就是双方各自持有对方类型的成员变量。</p><p>在UML类图中，双向关联用一个不带箭头的直线表示。上图中在Customer类中维护一个List&lt;Product&gt;，表示一个顾客可以购买多个商品；在Product类中维护一个Customer类型的成员变量表示这个产品被哪个顾客所购买。</p><figure><img src="https://drawingbed-686.pages.dev/myblog/202411032106846.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_3、自关联" tabindex="-1"><a class="header-anchor" href="#_3、自关联"><span>3、<strong>自关联</strong></span></a></h3><p>自关联在UML类图中用一个带有箭头且指向自身的线表示。上图的意思就是Node类包含类型为Node的成员变量，也就是“自己包含自己”。</p><figure><img src="https://drawingbed-686.pages.dev/myblog/202411032107962.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="聚合关系" tabindex="-1"><a class="header-anchor" href="#聚合关系"><span><strong>聚合关系</strong></span></a></h2><ul><li>在UML类图中，聚合通常使用<strong>空心菱形+实线箭头</strong>表示</li><li>聚合关系是<code>关联关系的一种特例</code>，他体现的是<code>整体与部分</code>，是一种<code>“弱拥有”</code>的关系，即<code>has-a</code>的关系。聚合是<code>整体</code>和<code>个体</code>之间的关系。</li><li>例如，汽车类与引擎类、轮胎类，以及其它的零件类之间的关系便整体和个体的关系。</li><li>与关联关系一样，<strong><code>聚合关系</code></strong> 也是通过<code>实例变量</code>实现的。<strong><code>但是关联关系所涉及的两个类是处在同一层次上的，而在聚合关系中，两个类是处在不平等层次上的，一个代表整体，另一个代表部分。</code></strong></li><li>聚合关系表示整体和个体的关系，整体和个体可以相互独立存在，一定是有两个模块分别管理整体和个体。</li></ul><figure><img src="https://drawingbed-686.pages.dev/myblog/202411032107482.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="组合关系" tabindex="-1"><a class="header-anchor" href="#组合关系"><span><strong>组合关系</strong></span></a></h2><ul><li>在UML类图中，组合通常使用<strong>实心菱形+实线箭头</strong>表示</li><li>组合关系是<code>关联关系的一种特例</code>，他体现的是一种<code>contains-a</code>(包含)的关系，这种关系比聚合更强，也称为<code>强聚合</code>。</li><li>它要求普通的聚合关系中代表整体的对象负责代表部分对象的生命周期，组合关系是不能共享的。代表整体的对象需要负责保持部分对象和存活，在一些情况下将负责代表部分的对象湮灭掉。代表整体的对象可以将代表部分的对象传递给另一个对象，由后者负责此对象的生命周期。换言之，代表部分的对象在每一个时刻只能与一个对象发生组合关系，由后者排他地负责生命周期。部分和整体的生命周期一样。</li><li><strong><code>整体和个体不能独立存在，一定是在一个模块中同时管理整体和个体，生命周期必须相同(级联)。</code></strong></li></ul><figure><img src="https://drawingbed-686.pages.dev/myblog/202411032107724.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="依赖关系" tabindex="-1"><a class="header-anchor" href="#依赖关系"><span><strong>依赖关系</strong></span></a></h2><ul><li>在UML类图中，依赖通常使用<strong>虚线箭头</strong>表示</li><li>依赖关系：指的是类与类之间的联接。依赖关系表示<code>一个类依赖于另一个类的定义</code>。一般而言，依赖关系在Java语言中体现为<code>成员变量、局域变量、方法的形参、方法返回值</code>，或者对<strong>静态方法的调用。</strong></li><li>表示一个A类依赖于B类的定义,如果A对象离开B对象,A对象就不能正常编译,则A对象依赖于B对象(A类中使用到了B对象)；</li><li><strong>比如某人要过河，需要借用一条船，此时人与船之间的关系就是依赖；</strong> 表现在代码层面，类B作为参数被类A在某个method方法中使用。</li></ul><figure><img src="https://drawingbed-686.pages.dev/myblog/202411032108077.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="泛化关系-generalization-继承关系" tabindex="-1"><a class="header-anchor" href="#泛化关系-generalization-继承关系"><span><strong>泛化关系（generalization）/ 继承关系</strong></span></a></h2><ul><li>在UML类图中，继承通常使用 <strong>空心三角+实线</strong> 表示</li><li>泛化关系其实就是<code>继承关系</code>：指的是一个类（称为子类、子接口）继承(<code>extends</code>)另外的一个类（称为父类、父接口）的功能，并可以增加自己额外的一些功能，<strong>继承是类与类或者接口与接口之间最常见的关系</strong></li></ul><figure><img src="https://drawingbed-686.pages.dev/myblog/202411032109620.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="实现关系-realization" tabindex="-1"><a class="header-anchor" href="#实现关系-realization"><span><strong>实现关系（realization）</strong></span></a></h2><ul><li>在UML类图中，实现通常使用<strong>空心三角+虚线</strong>表示</li><li>实现关系：指的是一个class类实现 interface接口（可以实现多个接口）的功能；实现是类与接口之间最常见的关系；</li></ul><figure><img src="https://drawingbed-686.pages.dev/myblog/202411032109656.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>',29)]))}const s=t(o,[["render",r],["__file","b_relation.html.vue"]]),c=JSON.parse('{"path":"/notes/designPattern/a_basic/b_relation.html","title":"类与类之间关系的表示方式","lang":"zh-CN","frontmatter":{"icon":"","description":"关联关系 3种 在UML类图中，关联通常使用实现箭头表示 关联关系：指的是类与类之间的联接，它使一个类知道另一个类的属性和方法（实例变量体现）。A类依赖于B对象,并且把B作为A的一个成员变量, 则A和B存在关联关系. 关联可以是双向的，也可以是单向的。两个类之前是一个层次的，不存在部分跟整体之间的关系。 关联关系的判断方法： 判断都是从对象的实例上面来...","title":"类与类之间关系的表示方式","date":"2024-11-03T00:00:00.000Z","category":["设计模式"],"tag":["类与类之间关系的表示方式"],"order":2,"head":[["meta",{"property":"og:url","content":"https://he9.xin/notes/designPattern/a_basic/b_relation.html"}],["meta",{"property":"og:site_name","content":"春风不语即随本心"}],["meta",{"property":"og:title","content":"类与类之间关系的表示方式"}],["meta",{"property":"og:description","content":"关联关系 3种 在UML类图中，关联通常使用实现箭头表示 关联关系：指的是类与类之间的联接，它使一个类知道另一个类的属性和方法（实例变量体现）。A类依赖于B对象,并且把B作为A的一个成员变量, 则A和B存在关联关系. 关联可以是双向的，也可以是单向的。两个类之前是一个层次的，不存在部分跟整体之间的关系。 关联关系的判断方法： 判断都是从对象的实例上面来..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://drawingbed-686.pages.dev/myblog/202411032106094.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-11-03T13:13:35.000Z"}],["meta",{"property":"article:author","content":"ErenJaegerKing"}],["meta",{"property":"article:tag","content":"类与类之间关系的表示方式"}],["meta",{"property":"article:published_time","content":"2024-11-03T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-11-03T13:13:35.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"类与类之间关系的表示方式\\",\\"image\\":[\\"https://drawingbed-686.pages.dev/myblog/202411032106094.png\\",\\"https://drawingbed-686.pages.dev/myblog/202411032106846.png\\",\\"https://drawingbed-686.pages.dev/myblog/202411032107962.png\\",\\"https://drawingbed-686.pages.dev/myblog/202411032107482.png\\",\\"https://drawingbed-686.pages.dev/myblog/202411032107724.png\\",\\"https://drawingbed-686.pages.dev/myblog/202411032108077.png\\",\\"https://drawingbed-686.pages.dev/myblog/202411032109620.png\\",\\"https://drawingbed-686.pages.dev/myblog/202411032109656.png\\"],\\"datePublished\\":\\"2024-11-03T00:00:00.000Z\\",\\"dateModified\\":\\"2024-11-03T13:13:35.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"ErenJaegerKing\\",\\"url\\":\\"https://he9.xin\\",\\"email\\":\\"erenjaegerking@qq.com\\"}]}"]]},"headers":[{"level":2,"title":"关联关系 3种","slug":"关联关系-3种","link":"#关联关系-3种","children":[{"level":3,"title":"1、单向关联","slug":"_1、单向关联","link":"#_1、单向关联","children":[]},{"level":3,"title":"2、双向关联","slug":"_2、双向关联","link":"#_2、双向关联","children":[]},{"level":3,"title":"3、自关联","slug":"_3、自关联","link":"#_3、自关联","children":[]}]},{"level":2,"title":"聚合关系","slug":"聚合关系","link":"#聚合关系","children":[]},{"level":2,"title":"组合关系","slug":"组合关系","link":"#组合关系","children":[]},{"level":2,"title":"依赖关系","slug":"依赖关系","link":"#依赖关系","children":[]},{"level":2,"title":"泛化关系（generalization）/ 继承关系","slug":"泛化关系-generalization-继承关系","link":"#泛化关系-generalization-继承关系","children":[]},{"level":2,"title":"实现关系（realization）","slug":"实现关系-realization","link":"#实现关系-realization","children":[]}],"git":{"createdTime":1730639615000,"updatedTime":1730639615000,"contributors":[{"name":"LiYaoYu","email":"ErenJaegerKing@qq.com","commits":1}]},"readingTime":{"minutes":4.57,"words":1370},"filePathRelative":"notes/designPattern/a_basic/b_relation.md","localizedDate":"2024年11月3日","excerpt":"<h2>关联关系 3种</h2>\\n<ul>\\n<li>在UML类图中，关联通常使用实现箭头表示</li>\\n<li>关联关系：指的是<code>类与类之间的联接</code>，<strong><code>它使一个类知道另一个类的属性和方法（实例变量体现）</code></strong>。A类依赖于B对象,并且<code>把B作为A的一个成员变量</code>, 则A和B存在关联关系.</li>\\n<li><strong>关联可以是双向的，也可以是单向的</strong>。两个类之前是一个层次的，不存在部分跟整体之间的关系。</li>\\n</ul>\\n<p><strong>关联关系的判断方法：</strong></p>","autoDesc":true}');export{s as comp,c as data};
