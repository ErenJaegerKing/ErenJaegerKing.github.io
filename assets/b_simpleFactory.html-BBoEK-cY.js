import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,e,o as n}from"./app-DlORvGGj.js";const t={};function l(p,i){return n(),a("div",null,i[0]||(i[0]=[e(`<hr><div class="hint-container info"><p class="hint-container-title">相关信息</p><p>设计模式-创建型模式-简单工厂模式</p></div><hr><h3 id="动机" tabindex="-1"><a class="header-anchor" href="#动机"><span>动机</span></a></h3><p>简单工厂不是一种设计模式，反而比较像是一种编程习惯。</p><h3 id="结构" tabindex="-1"><a class="header-anchor" href="#结构"><span><strong>结构</strong></span></a></h3><ul><li><strong>抽象产品</strong> ：定义了产品的规范，描述了产品的主要特性和功能。</li><li><strong>具体产品</strong> ：实现或者继承抽象产品的子类</li><li><strong>具体工厂</strong> ：提供了创建产品的方法，调用者通过该方法来获取产品。</li></ul><h3 id="uml" tabindex="-1"><a class="header-anchor" href="#uml"><span>UML</span></a></h3><figure><img src="https://drawingbed-686.pages.dev/myblog/202411122235793.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="案例" tabindex="-1"><a class="header-anchor" href="#案例"><span>案例</span></a></h3><figure><img src="https://drawingbed-686.pages.dev/myblog/202411122236209.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="优缺点" tabindex="-1"><a class="header-anchor" href="#优缺点"><span>优缺点</span></a></h3><p><strong>优点：</strong></p><ul><li><p><strong>封装了创建对象的过程，可以通过参数直接获取对象。</strong></p><p>把对象的创建和业务逻辑层分开，这样以后就避免了修改客户代码，如果要实现新产品直接修改工厂类，而不需要在原代码中修改，这样就降低了客户代码修改的可能性，更加容易扩展。</p></li></ul><p><strong>缺点：</strong></p><ul><li><p><strong>违背了“开闭原则”</strong></p><p>增加新产品时还是需要修改工厂类的代码。</p></li></ul><h3 id="扩展" tabindex="-1"><a class="header-anchor" href="#扩展"><span>扩展</span></a></h3><p><strong>静态工厂</strong></p><p>在开发中也有一部分人将工厂类中的创建对象的功能定义为静态的，这个就是静态工厂模式，它也不是23种设计模式中的。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> SimpleCoffeeFactory</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Coffee</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> createCoffee</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> type</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">        Coffee</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> coffee</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> null</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;americano&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">equals</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(type)) {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            coffee </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> AmericanoCoffee</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        } </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">else</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;latte&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">equals</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(type)) {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            coffee </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> LatteCoffee</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        }</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> coffe;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,20)]))}const d=s(t,[["render",l],["__file","b_simpleFactory.html.vue"]]),k=JSON.parse('{"path":"/notes/designPattern/b_creation/b_simpleFactory.html","title":"简单工厂模式","lang":"zh-CN","frontmatter":{"icon":"","description":"相关信息 设计模式-创建型模式-简单工厂模式 动机 简单工厂不是一种设计模式，反而比较像是一种编程习惯。 结构 抽象产品 ：定义了产品的规范，描述了产品的主要特性和功能。 具体产品 ：实现或者继承抽象产品的子类 具体工厂 ：提供了创建产品的方法，调用者通过该方法来获取产品。 UML 案例 优缺点 优点： 封装了创建对象的过程，可以通过参数直接获取对象。...","title":"简单工厂模式","date":"2024-11-13T00:00:00.000Z","category":["设计模式"],"tag":["创建型模式","简单工厂模式"],"order":2,"head":[["meta",{"property":"og:url","content":"https://he9.xin/notes/designPattern/b_creation/b_simpleFactory.html"}],["meta",{"property":"og:site_name","content":"春风不语即随本心"}],["meta",{"property":"og:title","content":"简单工厂模式"}],["meta",{"property":"og:description","content":"相关信息 设计模式-创建型模式-简单工厂模式 动机 简单工厂不是一种设计模式，反而比较像是一种编程习惯。 结构 抽象产品 ：定义了产品的规范，描述了产品的主要特性和功能。 具体产品 ：实现或者继承抽象产品的子类 具体工厂 ：提供了创建产品的方法，调用者通过该方法来获取产品。 UML 案例 优缺点 优点： 封装了创建对象的过程，可以通过参数直接获取对象。..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://drawingbed-686.pages.dev/myblog/202411122235793.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-11-12T14:53:10.000Z"}],["meta",{"property":"article:author","content":"ErenJaegerKing"}],["meta",{"property":"article:tag","content":"创建型模式"}],["meta",{"property":"article:tag","content":"简单工厂模式"}],["meta",{"property":"article:published_time","content":"2024-11-13T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-11-12T14:53:10.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"简单工厂模式\\",\\"image\\":[\\"https://drawingbed-686.pages.dev/myblog/202411122235793.png\\",\\"https://drawingbed-686.pages.dev/myblog/202411122236209.png\\"],\\"datePublished\\":\\"2024-11-13T00:00:00.000Z\\",\\"dateModified\\":\\"2024-11-12T14:53:10.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"ErenJaegerKing\\",\\"url\\":\\"https://he9.xin\\",\\"email\\":\\"erenjaegerking@qq.com\\"}]}"]]},"headers":[{"level":3,"title":"动机","slug":"动机","link":"#动机","children":[]},{"level":3,"title":"结构","slug":"结构","link":"#结构","children":[]},{"level":3,"title":"UML","slug":"uml","link":"#uml","children":[]},{"level":3,"title":"案例","slug":"案例","link":"#案例","children":[]},{"level":3,"title":"优缺点","slug":"优缺点","link":"#优缺点","children":[]},{"level":3,"title":"扩展","slug":"扩展","link":"#扩展","children":[]}],"git":{"createdTime":1730808096000,"updatedTime":1731423190000,"contributors":[{"name":"LiYaoYu","email":"ErenJaegerKing@qq.com","commits":4}]},"readingTime":{"minutes":1.24,"words":371},"filePathRelative":"notes/designPattern/b_creation/b_simpleFactory.md","localizedDate":"2024年11月13日","excerpt":"<hr>\\n<div class=\\"hint-container info\\">\\n<p class=\\"hint-container-title\\">相关信息</p>\\n<p>设计模式-创建型模式-简单工厂模式</p>\\n</div>\\n<hr>\\n<h3>动机</h3>\\n<p>简单工厂不是一种设计模式，反而比较像是一种编程习惯。</p>\\n<h3><strong>结构</strong></h3>\\n<ul>\\n<li><strong>抽象产品</strong> ：定义了产品的规范，描述了产品的主要特性和功能。</li>\\n<li><strong>具体产品</strong> ：实现或者继承抽象产品的子类</li>\\n<li><strong>具体工厂</strong> ：提供了创建产品的方法，调用者通过该方法来获取产品。</li>\\n</ul>","autoDesc":true}');export{d as comp,k as data};
