import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as i,e as l,o as s}from"./app-D5nBtrwS.js";const n={};function h(t,a){return s(),i("div",null,a[0]||(a[0]=[l(`<h2 id="基础概念与常识" tabindex="-1"><a class="header-anchor" href="#基础概念与常识"><span>基础概念与常识</span></a></h2><h3 id="java-语言有哪些特点" tabindex="-1"><a class="header-anchor" href="#java-语言有哪些特点"><span>Java 语言有哪些特点?</span></a></h3><ul><li>简单易学</li><li>面向对象（封装，继承，多态）</li><li>平台无关性（ Java 虚拟机实现平台无关性）</li><li>支持多线程（ C++ 语言没有内置的多线程机制，因此必须调用操作系统的多线程功能来进行多线程程序设计，而 Java 语言却提供了多线程支持）；</li><li>可靠性（具备异常处理和自动内存管理机制）；</li></ul><h3 id="java-se-vs-java-ee" tabindex="-1"><a class="header-anchor" href="#java-se-vs-java-ee"><span>Java SE vs Java EE</span></a></h3><p>Java SE 是 Java 的基础版本，Java EE 是 Java 的高级版本</p><p>Java SE 更适合开发桌面应用程序或简单的服务器应用程序，Java EE 更适合开发复杂的企业级应用程序或 Web 应用程序。</p><h3 id="jvm-vs-jdk-vs-jre" tabindex="-1"><a class="header-anchor" href="#jvm-vs-jdk-vs-jre"><span>JVM vs JDK vs JRE</span></a></h3><h4 id="jvm" tabindex="-1"><a class="header-anchor" href="#jvm"><span>JVM</span></a></h4><p>Java 虚拟机（Java Virtual Machine, JVM）是运行 Java 字节码的虚拟机。</p><h4 id="jdk-和-jre" tabindex="-1"><a class="header-anchor" href="#jdk-和-jre"><span>JDK 和 JRE</span></a></h4><p>JDK（Java Development Kit）是一个功能齐全的 Java 开发工具包，供开发者使用，用于创建和编译 Java 程序。它包含了 JRE（Java Runtime Environment），以及编译器 javac 和其他工具，如 javadoc（文档生成器）、jdb（调试器）、jconsole（监控工具）、javap（反编译工具）等。</p><h3 id="什么是字节码-采用字节码的好处是什么" tabindex="-1"><a class="header-anchor" href="#什么是字节码-采用字节码的好处是什么"><span>什么是字节码?采用字节码的好处是什么?</span></a></h3><p>在java中，JVM可以理解的代码就叫做字节码（即扩展名为.class的文件），只面向虚拟机。</p><p>解决了传统解释型语言执行效率低的问题，同时又保留了解释型语言可移植的特点。</p><p>由于字节码并不针对一种特定的机器，因此，java程序无须重新编译便可在多种不同操作系统的计算机上运行</p><h3 id="为什么说-java-语言-编译与解释并存" tabindex="-1"><a class="header-anchor" href="#为什么说-java-语言-编译与解释并存"><span>为什么说 Java 语言“编译与解释并存”？</span></a></h3><p>这是因为java语言既具有编译型语言的特征，也具有解释型语言的特征。因为java程序要经过先编译，后解释两个步骤，由java编写的程序需要先经过编译步骤，生成字节码（.class文件），这种字节码必须由java解释器来解释执行</p><h2 id="基本语法" tabindex="-1"><a class="header-anchor" href="#基本语法"><span>基本语法</span></a></h2><h3 id="注释有哪几种形式" tabindex="-1"><a class="header-anchor" href="#注释有哪几种形式"><span>注释有哪几种形式？</span></a></h3><ul><li>单行注释</li><li>多行注释</li><li>文档注释</li></ul><h3 id="标识符和关键字的区别是什么" tabindex="-1"><a class="header-anchor" href="#标识符和关键字的区别是什么"><span>标识符和关键字的区别是什么？</span></a></h3><p>标识符就是一个名字，我们需要给程序、类、接口等取名字。</p><p>关键字就是被赋予特殊含义的标识符。</p><h3 id="java-语言关键字有哪些" tabindex="-1"><a class="header-anchor" href="#java-语言关键字有哪些"><span>Java 语言关键字有哪些？</span></a></h3><p>访问控制 类、方法和变量修饰符 程序控制 错误处理 包相关 基本类型 变量引用 保留字</p><h3 id="自增自减运算符" tabindex="-1"><a class="header-anchor" href="#自增自减运算符"><span>自增自减运算符</span></a></h3><p>符号在前就先加/减，符号在后就后加/减。</p><h3 id="移位运算符" tabindex="-1"><a class="header-anchor" href="#移位运算符"><span>移位运算符</span></a></h3><p>高效</p><h3 id="continue、break-和-return-的区别是什么" tabindex="-1"><a class="header-anchor" href="#continue、break-和-return-的区别是什么"><span>continue、break 和 return 的区别是什么？</span></a></h3><ol><li>continue 跳出当前的这一次循环，继续下一次循环</li><li>break 跳出真个循环体，继续执行循环下面的语句</li><li>return 用于跳出所在方法，结束该方法的运行</li></ol><h2 id="基本数据类型" tabindex="-1"><a class="header-anchor" href="#基本数据类型"><span>基本数据类型</span></a></h2><h3 id="java-中的几种基本数据类型了解么" tabindex="-1"><a class="header-anchor" href="#java-中的几种基本数据类型了解么"><span>Java 中的几种基本数据类型了解么？</span></a></h3><p>java中有8个基本数据类型</p><ul><li>6种数字类型： <ul><li>4种整数型：byte short int long</li><li>2种浮点型：float、double</li></ul></li><li>1种字符类型：char</li><li>1种布尔型：boolean</li></ul><p>这八种基本类型都有对应的包装类分别为：Byte、Short、Integer、Long、Float、Double、Character、Boolean 。</p><h3 id="基本类型和包装类型的区别" tabindex="-1"><a class="header-anchor" href="#基本类型和包装类型的区别"><span>基本类型和包装类型的区别？</span></a></h3><ul><li>用途：包装类可用于泛型，而基本类型不可以</li><li>存储方式：基本类型的局部变量存放在java虚拟机栈种的局部变量表中，基本数据类型的成员变量存放在java虚拟机的堆中。包装类属于对象类型，几乎所有的对象实例都存在堆。</li><li>占用空间：相比于包装类（对象类型），基本数据类型占用的空间往往非常小</li><li>默认值：成员变量包装类不赋值就是null，而基本类型由默认值且不是null</li><li>比较方式：对于基本数据类型来说，==比较的是值。对于包装数据来说，==比较的是对象的内存地址。</li></ul><h3 id="包装类型的缓存机制了解么" tabindex="-1"><a class="header-anchor" href="#包装类型的缓存机制了解么"><span>包装类型的缓存机制了解么？</span></a></h3><p>Java基本数据类型的包装类型的大部分都用到了缓存机制来提升性能。</p><p>Byte，Short，Integer，Long这4包装类默认创建了数值[-128,127]的相应类型的缓存数据 Character创建了数值在[0，127]范围的缓存数据，Boolean直接返回True Or False</p><p>所有整型包装类对象之间值的比较，全部使用 equals 方法比较。</p><h3 id="自动装箱与拆箱了解吗-原理是什么" tabindex="-1"><a class="header-anchor" href="#自动装箱与拆箱了解吗-原理是什么"><span>自动装箱与拆箱了解吗？原理是什么？</span></a></h3><p>什么是自动拆装箱？</p><ul><li>装箱：将基本类型用它们对应的引用类型包装起来</li><li>拆箱：将包装类型转换为基本数据类型</li></ul><h3 id="为什么浮点数运算的时候会有精度丢失的风险" tabindex="-1"><a class="header-anchor" href="#为什么浮点数运算的时候会有精度丢失的风险"><span>为什么浮点数运算的时候会有精度丢失的风险？</span></a></h3><p>这个和计算机保存浮点数的机制有很大关系。</p><p>我们知道计算机是二进制的，而计算机在表示一个数字时，宽度是有限的，无限循环的小数存储在计算机时，只能被截断，所以就会导致小数精度发生损失的情况。</p><p>这也就是解释了为什么浮点数没有办法用二进制精确表示</p><h3 id="如何解决浮点数运算的精度丢失问题" tabindex="-1"><a class="header-anchor" href="#如何解决浮点数运算的精度丢失问题"><span>如何解决浮点数运算的精度丢失问题？</span></a></h3><p>BigDecimal 可以实现对浮点数的运算，不会造成精度丢失。通常情况下，大部分需要浮点数精确运算结果的业务场景（比如涉及到钱的场景）都是通过 BigDecimal 来做的。</p><h3 id="超过-long-整型的数据应该如何表示" tabindex="-1"><a class="header-anchor" href="#超过-long-整型的数据应该如何表示"><span>超过 long 整型的数据应该如何表示？</span></a></h3><p>基本数值类型都有一个表达范围，如果超过这个范围就会有数值溢出的风险。</p><p>在 Java 中，64 位 long 整型是最大的整数类型。</p><p>BigInteger 内部使用 int[] 数组来存储任意大小的整形数据。</p><h2 id="变量" tabindex="-1"><a class="header-anchor" href="#变量"><span>变量</span></a></h2><h3 id="成员变量与局部变量的区别" tabindex="-1"><a class="header-anchor" href="#成员变量与局部变量的区别"><span>成员变量与局部变量的区别？</span></a></h3><ul><li>语法形式：成员变量属于类 局部变量是在代码块中或方法定义的变量或者参数；成员变量可以被public，private，static等修饰符所修饰，而局部变量不能被访问控制修饰符以及static所修饰；但是成员变量和局部变量都能被final修饰。</li><li>存储方式：而对象存在于堆内存，局部变量则存在于栈内存。</li><li>生存时间：成员变量是对象的一部分，它随着对象的创建而存在 局部变量随着方法的调用而自动生成，随着方法的调用结束而消亡</li><li>默认值:成员变量如果没有被赋初始值，则会自动以类型的默认值而赋值</li></ul><h3 id="静态变量有什么作用" tabindex="-1"><a class="header-anchor" href="#静态变量有什么作用"><span>静态变量有什么作用？</span></a></h3><p>静态变量也就是被 static 关键字修饰的变量。</p><p>它可以被类的所有实例共享，无论一个类创建了多少个对象，它们都共享同一份静态变量。</p><p>也就是说，静态变量只会被分配一次内存，即使创建多个对象，这样可以节省内存。</p><h3 id="字符型常量和字符串常量的区别" tabindex="-1"><a class="header-anchor" href="#字符型常量和字符串常量的区别"><span>字符型常量和字符串常量的区别?</span></a></h3><ul><li>形式：&#39;&#39; &quot;&quot;。</li><li>含义：字符常量相当于一个整数值（ASCII值）；字符串常量代表一个地址值。</li><li>占内存大小：字符常量只占用2个字节；字符串常量占若干个字节。</li></ul><h2 id="方法" tabindex="-1"><a class="header-anchor" href="#方法"><span>方法</span></a></h2><h3 id="什么是方法的返回值-方法有哪几种类型" tabindex="-1"><a class="header-anchor" href="#什么是方法的返回值-方法有哪几种类型"><span>什么是方法的返回值?方法有哪几种类型？</span></a></h3><p>方法的返回值就是获取某个方法体中的代码执行后产生的结果</p><ol><li>无参数无返回值</li><li>有参数无返回值</li><li>有返回值无参数</li><li>有返回值有参数</li></ol><h3 id="静态方法为什么不能调用非静态成员" tabindex="-1"><a class="header-anchor" href="#静态方法为什么不能调用非静态成员"><span>静态方法为什么不能调用非静态成员?</span></a></h3><p>静态方法是属于类的，在类的加载的时候就会分配内存，可以通过类名直接访问。而非静态成员变量属于实例对象，只有在对象实例化之后才存在，需要通过类的实例对象去访问。</p><h3 id="静态方法和实例方法有何不同" tabindex="-1"><a class="header-anchor" href="#静态方法和实例方法有何不同"><span>静态方法和实例方法有何不同？</span></a></h3><ol><li>调用方式：调用静态方法可以无需创建对象。类名.方法名</li><li>访问类成员是否存在限制：静态方法在访问本类的成员时，只允许访问静态成员，不允许访问实例成员。</li></ol><h3 id="重载和重写有什么区别" tabindex="-1"><a class="header-anchor" href="#重载和重写有什么区别"><span>重载和重写有什么区别？</span></a></h3><h4 id="重载" tabindex="-1"><a class="header-anchor" href="#重载"><span>重载</span></a></h4><p>发生在同一个类中，方法名必须相同，参数类型不同、个数不同、顺序不同，方法返回值和访问修饰符可以不同</p><h4 id="重写" tabindex="-1"><a class="header-anchor" href="#重写"><span>重写</span></a></h4><p>重写发生在运行时期，是子类对父类的允许访问的方法的实现过程进行重新编写</p><h4 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h4><p>方法重写要遵循&quot;两同两小一大&quot;</p><h3 id="什么是可变长参数" tabindex="-1"><a class="header-anchor" href="#什么是可变长参数"><span>什么是可变长参数？</span></a></h3><p>允许在调用方法时传入不定长度的参数。就可以接受0个或者多个参数</p><p>遇到方法重载的情况怎么办呢？会优先匹配固定参数</p><h2 id="面向对象基础" tabindex="-1"><a class="header-anchor" href="#面向对象基础"><span>面向对象基础</span></a></h2><h3 id="面向对象和面向过程的区别" tabindex="-1"><a class="header-anchor" href="#面向对象和面向过程的区别"><span>面向对象和面向过程的区别</span></a></h3><p>面向过程编程是 POP ：将解决问题的过程拆成一个个方法，通过一个个方法的执行解决问题</p><p>面向对象编程是 OOP ：先抽象出对象，然后用对象执行方法的方式解决问题</p><h3 id="创建一个对象用什么运算符-对象实体与对象引用有何不同" tabindex="-1"><a class="header-anchor" href="#创建一个对象用什么运算符-对象实体与对象引用有何不同"><span>创建一个对象用什么运算符?对象实体与对象引用有何不同?</span></a></h3><p>new，创建对象实例存放在堆内存中，对象引用指向对象实例，对象引用存放在栈内存中</p><ul><li>一个对象引用可以指向0个或1个对象</li><li>一个对象可以有n个引用指向它</li></ul><h3 id="对象的相等和引用相等的区别" tabindex="-1"><a class="header-anchor" href="#对象的相等和引用相等的区别"><span>对象的相等和引用相等的区别</span></a></h3><p>对象相等指的是内存中存放的内容是否相同</p><p>引用相同指的是他们指向的内存地址是否相同</p><h3 id="如果一个类没有声明构造方法-该程序能正确执行吗" tabindex="-1"><a class="header-anchor" href="#如果一个类没有声明构造方法-该程序能正确执行吗"><span>如果一个类没有声明构造方法，该程序能正确执行吗?</span></a></h3><p>可以</p><p>默认会有不带参数的构造方法</p><h3 id="构造方法有哪些特点-是否可被-override" tabindex="-1"><a class="header-anchor" href="#构造方法有哪些特点-是否可被-override"><span>构造方法有哪些特点？是否可被 override?</span></a></h3><ul><li>名称与类型相同</li><li>没有返回值</li><li>自动执行</li></ul><p>构造方法不能被重写，但可以被重载。</p><p>可以有多个构造方法，根据参数列表的不同。</p><h3 id="面向对象三大特征" tabindex="-1"><a class="header-anchor" href="#面向对象三大特征"><span>面向对象三大特征</span></a></h3><h4 id="封装" tabindex="-1"><a class="header-anchor" href="#封装"><span>封装</span></a></h4><p>把一个对象的信息隐藏在对象内部，不允许外部对象直接访问对象的内部信息，但是可以提供一些可以被外界访问的方法来操作属性。</p><h4 id="继承" tabindex="-1"><a class="header-anchor" href="#继承"><span>继承</span></a></h4><ul><li>子类拥有父类所有的方法和属性，但是父类中的私有属性和方法子类是无法访问，只是拥有</li><li>子类可以拥有自己的属性和方法，即子类可以对父类进行扩展</li><li>子类可以用自己的方法实现父类的方法</li></ul><h4 id="多态" tabindex="-1"><a class="header-anchor" href="#多态"><span>多态</span></a></h4><p>表示一个对象具有多种的状态，具体表现为父类的引用指向子类的实例。</p><h3 id="接口和抽象类有什么共同点和区别" tabindex="-1"><a class="header-anchor" href="#接口和抽象类有什么共同点和区别"><span>接口和抽象类有什么共同点和区别？</span></a></h3><p>共同点：</p><ul><li>实例化</li><li>抽象方法 不同点：</li><li>继承和实现</li><li>设计目的</li><li>成员变量</li><li>方法</li></ul><h3 id="深拷贝和浅拷贝区别了解吗-什么是引用拷贝" tabindex="-1"><a class="header-anchor" href="#深拷贝和浅拷贝区别了解吗-什么是引用拷贝"><span>深拷贝和浅拷贝区别了解吗？什么是引用拷贝？</span></a></h3><p>浅拷贝：在堆上创建一个新的对象，如果原对象的属性是引用地址的话，浅拷贝就会复制内部对象的引用地址，也就是说拷贝对象和原对象共用一个内部对象</p><p>深拷贝：会完全复制整个对象，包含这个对象所包含的内部对象</p><p>引用拷贝：共同引用堆上的</p><h2 id="object" tabindex="-1"><a class="header-anchor" href="#object"><span>Object</span></a></h2><h3 id="object-类的常见方法有哪些" tabindex="-1"><a class="header-anchor" href="#object-类的常见方法有哪些"><span>Object 类的常见方法有哪些？</span></a></h3><p>getClass</p><p>hashCode</p><p>equals</p><p>clone</p><p>toString</p><p>notify</p><p>notifyAll</p><p>wait</p><p>finalize</p><h3 id="和-equals-的区别" tabindex="-1"><a class="header-anchor" href="#和-equals-的区别"><span>== 和 equals() 的区别</span></a></h3><ul><li>如果是基本数据类型，==比较是值</li><li>如果是引用类型，==比较的是对象的内存地址</li></ul><p>equals() 方法存在两种使用情况：</p><ul><li>类没有重写 equals()方法：通过equals()比较该类的两个对象时，等价于通过“==”比较这两个对象，使用的默认是 Object类equals()方法。</li><li>类重写了 equals()方法：一般我们都重写 equals()方法来比较两个对象中的属性是否相等；若它们的属性相等，则返回 true(即，认为这两个对象相等)。</li></ul><h3 id="hashcode-有什么用" tabindex="-1"><a class="header-anchor" href="#hashcode-有什么用"><span>hashCode() 有什么用？</span></a></h3><p>用来获得哈希码（int整数），作用就是确定该对象在哈希表中的索引位置</p><h3 id="为什么要有-hashcode" tabindex="-1"><a class="header-anchor" href="#为什么要有-hashcode"><span>为什么要有 hashCode？</span></a></h3><p>我们以“HashSet 如何检查重复”为例子来说明为什么要有 hashCode？</p><h3 id="为什么重写-equals-时必须重写-hashcode-方法" tabindex="-1"><a class="header-anchor" href="#为什么重写-equals-时必须重写-hashcode-方法"><span>为什么重写 equals() 时必须重写 hashCode() 方法？</span></a></h3><ul><li>equals 方法判断两个对象是相等的，那这两个对象的 hashCode 值也要相等。</li><li>两个对象有相同的 hashCode 值，他们也不一定是相等的（哈希碰撞）。</li></ul><h2 id="string" tabindex="-1"><a class="header-anchor" href="#string"><span>String</span></a></h2><h3 id="string、stringbuffer、stringbuilder-的区别" tabindex="-1"><a class="header-anchor" href="#string、stringbuffer、stringbuilder-的区别"><span>String、StringBuffer、StringBuilder 的区别？</span></a></h3><ul><li>可变性：String不可变</li><li>线程安全性：String、StringBuffer线程安全</li><li>性能：</li></ul><p>总结：</p><ul><li>操作少量数据，String</li><li>单线程操作字符串缓冲区下操作大量数据，StringBuilder</li><li>多线程操作字符串缓冲区下操作大量数据，StringBuffer</li></ul><h3 id="string-为什么是不可变的" tabindex="-1"><a class="header-anchor" href="#string-为什么是不可变的"><span>String 为什么是不可变的?</span></a></h3><ol><li>String类被final修饰导致其不能被继承，进而避免子类破坏String不可变</li><li>保存字符串数组被final修饰且为私有的，并且String类并没有提供/暴露修改这个字符串的方法</li></ol><h3 id="字符串拼接用-还是-stringbuilder" tabindex="-1"><a class="header-anchor" href="#字符串拼接用-还是-stringbuilder"><span>字符串拼接用“+” 还是 StringBuilder?</span></a></h3><ul><li>是通过StringBuilder调用append方法来实现的，拼接完成之后调用toString得到一个String对象。缺陷就是在循环体中，编译器不会创建单个 StringBuilder 以复用，会导致创建过多的 StringBuilder 对象。</li></ul><p>如果直接使用 StringBuilder 对象进行字符串拼接的话，就不会存在这个问题了。</p><h3 id="string-equals-和-object-equals-有何区别" tabindex="-1"><a class="header-anchor" href="#string-equals-和-object-equals-有何区别"><span>String#equals() 和 Object#equals() 有何区别？</span></a></h3><p>String 中的 equals 方法是被重写过的，比较的是 String 字符串的值是否相等。</p><p>Object 的 equals 方法是比较的对象的内存地址。</p><h3 id="字符串常量池的作用了解吗" tabindex="-1"><a class="header-anchor" href="#字符串常量池的作用了解吗"><span>字符串常量池的作用了解吗？</span></a></h3><p>是jvm为了提升性能和减少内存和减少内存消耗针对字符串专门开辟的一块区域，主要目的是为了避免字符串的重复创建</p><h3 id="string-s1-new-string-abc-这句话创建了几个字符串对象" tabindex="-1"><a class="header-anchor" href="#string-s1-new-string-abc-这句话创建了几个字符串对象"><span>String s1 = new String(&quot;abc&quot;);这句话创建了几个字符串对象？</span></a></h3><p>如果字符串常量池里面有这个字符串，那么就只会创建一个字符串对象。如果没有在这个字符串，那么就会在字符串常量池里面创建一个，在堆上也创建一个，创建了两个字符串对象。</p><h3 id="string-intern-方法有什么作用" tabindex="-1"><a class="header-anchor" href="#string-intern-方法有什么作用"><span>String#intern 方法有什么作用?</span></a></h3><p>用来处理字符串常量池中的字符串对象引用</p><ol><li>字符串已有相同内容的字符串对象：直接返回该对象的引用</li><li>常量池中没有相同内容的字符串对象：这个方法就会将当前字符串对象的引用添加到字符串常量池中，并返回该引用。</li></ol><h3 id="string-类型的变量和常量做-运算时发生了什么" tabindex="-1"><a class="header-anchor" href="#string-类型的变量和常量做-运算时发生了什么"><span>String 类型的变量和常量做“+”运算时发生了什么？</span></a></h3><p>无法理解</p><h2 id="异常" tabindex="-1"><a class="header-anchor" href="#异常"><span>异常</span></a></h2><h3 id="exception-和-error-有什么区别" tabindex="-1"><a class="header-anchor" href="#exception-和-error-有什么区别"><span>Exception 和 Error 有什么区别？</span></a></h3><p>Exception 程序本身可以处理的异常</p><p>Error 程序无法处理的错误</p><h3 id="checked-exception-和-unchecked-exception-有什么区别" tabindex="-1"><a class="header-anchor" href="#checked-exception-和-unchecked-exception-有什么区别"><span>Checked Exception 和 Unchecked Exception 有什么区别？</span></a></h3><p>Checked Exception 即 受检查异常 ，Java 代码在编译过程中，如果受检查异常没有被 catch或者throws 关键字处理的话，就没办法通过编译。</p><p>Unchecked Exception 即 不受检查异常 ，Java 代码在编译过程中 ，我们即使不处理不受检查异常也可以正常通过编译。</p><h3 id="throwable-类常用方法有哪些" tabindex="-1"><a class="header-anchor" href="#throwable-类常用方法有哪些"><span>Throwable 类常用方法有哪些？</span></a></h3><p>toString</p><p>getMessage</p><p>getLocalizedMessage</p><p>printStackTrace</p><h3 id="try-catch-finally-如何使用" tabindex="-1"><a class="header-anchor" href="#try-catch-finally-如何使用"><span>try-catch-finally 如何使用？</span></a></h3><p>try 用于捕获异常</p><p>catch 用于处理try捕获到的异常</p><p>finally 在return之前执行这段代码</p><h3 id="finally-中的代码一定会执行吗" tabindex="-1"><a class="header-anchor" href="#finally-中的代码一定会执行吗"><span>finally 中的代码一定会执行吗？</span></a></h3><p>不一定，在finally之前虚拟机被终止运行的话，finally中的代码就不会别执行</p><h3 id="如何使用-try-with-resources-代替try-catch-finally" tabindex="-1"><a class="header-anchor" href="#如何使用-try-with-resources-代替try-catch-finally"><span>如何使用 try-with-resources 代替try-catch-finally？</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">try</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">BufferedInputStream</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> bin </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> BufferedInputStream</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> FileInputStream</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> File</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;test.txt&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)))</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">     BufferedOutputStream</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> bout </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> BufferedOutputStream</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> FileOutputStream</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> File</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;out.txt&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)))) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> b</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    while</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> ((b </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> bin</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">read</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">!=</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> -</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        bout</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">write</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(b);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">catch</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">IOException</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> e</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">    e</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">printStackTrace</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="异常使用有哪些需要注意的地方" tabindex="-1"><a class="header-anchor" href="#异常使用有哪些需要注意的地方"><span>异常使用有哪些需要注意的地方？</span></a></h3><ul><li>抛出的异常信息一定要有意义。</li></ul><h2 id="泛型" tabindex="-1"><a class="header-anchor" href="#泛型"><span>泛型</span></a></h2><h3 id="什么是泛型-有什么作用" tabindex="-1"><a class="header-anchor" href="#什么是泛型-有什么作用"><span>什么是泛型？有什么作用？</span></a></h3><p>Java 泛型（Generics） 是 JDK 5 中引入的一个新特性。使用泛型参数，可以增强代码的可读性以及稳定性。</p><p>举个例子 ArrayList Person,这段代码指明了只能传入Person对象，如果传入其他对象就会发生错误</p><h3 id="泛型的使用方式有哪几种" tabindex="-1"><a class="header-anchor" href="#泛型的使用方式有哪几种"><span>泛型的使用方式有哪几种？</span></a></h3><ol><li>泛型类</li><li>泛型接口</li><li>泛型方法</li></ol><h3 id="项目中哪里用到了泛型" tabindex="-1"><a class="header-anchor" href="#项目中哪里用到了泛型"><span>项目中哪里用到了泛型？</span></a></h3><ul><li>自定义接口通用返回结果Result可根据具体的返回类型动态指定结果的数据类型</li><li>定义Excel处理类用于动态指定Excel导出的数据类型</li><li>构建集合工具类</li></ul><h2 id="反射" tabindex="-1"><a class="header-anchor" href="#反射"><span>反射</span></a></h2><h3 id="何谓反射" tabindex="-1"><a class="header-anchor" href="#何谓反射"><span>何谓反射？</span></a></h3><p>在运行时分析类以及执行类中方法的能力。</p><p>通过反射你可以获取任意一个类的所有属性和方法，你还可以调用这些方法和属性。</p><h3 id="反射的优缺点" tabindex="-1"><a class="header-anchor" href="#反射的优缺点"><span>反射的优缺点？</span></a></h3><p>反射可以让我们的代码更加灵活、为各种框架提供开箱即用的功能提供了便利。</p><h3 id="反射的应用场景" tabindex="-1"><a class="header-anchor" href="#反射的应用场景"><span>反射的应用场景？</span></a></h3><p>这些框架中也大量使用了动态代理，而动态代理的实现也依赖反射。</p><h2 id="注解" tabindex="-1"><a class="header-anchor" href="#注解"><span>注解</span></a></h2><h3 id="何谓注解" tabindex="-1"><a class="header-anchor" href="#何谓注解"><span>何谓注解？</span></a></h3><p>主要用于修饰类、方法或者变量，提供某些信息供程序在编译或者运行时使用。</p><h3 id="注解的解析方法有哪几种" tabindex="-1"><a class="header-anchor" href="#注解的解析方法有哪几种"><span>注解的解析方法有哪几种？</span></a></h3><ul><li>编译期直接扫描：@Override</li><li>运行期通过反射处理：比如说Spring框架自带的注解@Value、@Component都是通过反射来进行处理的</li></ul><h2 id="spi" tabindex="-1"><a class="header-anchor" href="#spi"><span>SPI</span></a></h2><h3 id="何谓-spi" tabindex="-1"><a class="header-anchor" href="#何谓-spi"><span>何谓 SPI?</span></a></h3><p>SPI service provider interface 服务提供者的接口</p><p>将服务接口和具体的服务实现分离开来，将服务调用方和服务实现者解耦，能够提升程序的扩展性、可维护性。</p><p>很多框架都使用了Java的SPI机制，比如：Spring框架、数据库加载驱动、日志接口、以及Dubbo的扩展</p><h3 id="spi-和-api-有什么区别" tabindex="-1"><a class="header-anchor" href="#spi-和-api-有什么区别"><span>SPI 和 API 有什么区别？</span></a></h3><p>当实现方提供了接口和实现，我们可以通过调用实现方的接口从而拥有实现方给我们提供的能力，这就是API</p><p>当接口存在与调用方这边时，这就是SPI</p><h3 id="spi-的优缺点" tabindex="-1"><a class="header-anchor" href="#spi-的优缺点"><span>SPI 的优缺点？</span></a></h3><p>提高接口的设计的灵活性</p><ul><li>并发问题</li><li>不能按需加载，需要全部遍历</li></ul><h2 id="序列化和反序列化" tabindex="-1"><a class="header-anchor" href="#序列化和反序列化"><span>序列化和反序列化</span></a></h2><h3 id="什么是序列化-什么是反序列化" tabindex="-1"><a class="header-anchor" href="#什么是序列化-什么是反序列化"><span>什么是序列化?什么是反序列化?</span></a></h3><p>序列化：将数据结构或对象转换成可以存储或传输的形式，通常是二进制字节流，也就是JSON,XML等文本格式</p><p>反序列化：将在序列化过程中所生成的数据转换为原始数据结构或者对象的过程</p><h3 id="如果有些字段不想进行序列化怎么办" tabindex="-1"><a class="header-anchor" href="#如果有些字段不想进行序列化怎么办"><span>如果有些字段不想进行序列化怎么办？</span></a></h3><p>对于不想进行序列化的变量，使用 transient 关键字修饰。</p><h3 id="常见序列化协议有哪些" tabindex="-1"><a class="header-anchor" href="#常见序列化协议有哪些"><span>常见序列化协议有哪些？</span></a></h3><p>Hessian、Kryo、Protobuf、ProtoStuff，这些都是基于二进制的序列化协议。</p><h3 id="为什么不推荐使用-jdk-自带的序列化" tabindex="-1"><a class="header-anchor" href="#为什么不推荐使用-jdk-自带的序列化"><span>为什么不推荐使用 JDK 自带的序列化？</span></a></h3><ul><li>不支持跨语言调用</li><li>性能差</li><li>存在安全问题</li></ul><h2 id="i-o" tabindex="-1"><a class="header-anchor" href="#i-o"><span>I/O</span></a></h2><h3 id="java-io-流了解吗" tabindex="-1"><a class="header-anchor" href="#java-io-流了解吗"><span>Java IO 流了解吗？</span></a></h3><p>java io即输入和输出。</p><p>数据输入到计算机内存的过程即输入，反之输出到外部存储的过程即输出。</p><p>数据传输过程类似于水流，因此称为io流。</p><h3 id="i-o-流为什么要分为字节流和字符流呢" tabindex="-1"><a class="header-anchor" href="#i-o-流为什么要分为字节流和字符流呢"><span>I/O 流为什么要分为字节流和字符流呢?</span></a></h3><ul><li>字符流是由java虚拟机将字节转换得到的，这个过程还算是比较耗时</li><li>如果我们不知道编码类型的话，使用字节流的过程很容易出现乱码问题</li></ul><h3 id="java-io-中的设计模式有哪些" tabindex="-1"><a class="header-anchor" href="#java-io-中的设计模式有哪些"><span>Java IO 中的设计模式有哪些？</span></a></h3><p>装饰器</p><p>适配器</p><p>工厂</p><p>观察者模式</p><h3 id="bio、nio-和-aio-的区别" tabindex="-1"><a class="header-anchor" href="#bio、nio-和-aio-的区别"><span>BIO、NIO 和 AIO 的区别？</span></a></h3><p>BIO 阻塞直到处理完成</p><p>NIO Selector监听多个Channel非阻塞</p><p>AIO 通知回调</p><h2 id="语法糖" tabindex="-1"><a class="header-anchor" href="#语法糖"><span>语法糖</span></a></h2><h3 id="什么是语法糖" tabindex="-1"><a class="header-anchor" href="#什么是语法糖"><span>什么是语法糖？</span></a></h3><p>实现相同的功能，基于语法糖写出来的代码往往更简单简洁且更易阅读。</p><h3 id="java-中有哪些常见的语法糖" tabindex="-1"><a class="header-anchor" href="#java-中有哪些常见的语法糖"><span>Java 中有哪些常见的语法糖？</span></a></h3><p>Java 中最常用的语法糖主要有泛型、自动拆装箱、变长参数、枚举、内部类、增强 for 循环、try-with-resources 语法、lambda 表达式等。</p>`,241)]))}const d=e(n,[["render",h],["__file","a_base.html.vue"]]),c=JSON.parse('{"path":"/notes/Java/a_base/a_base.html","title":"Java基础","lang":"zh-CN","frontmatter":{"icon":"","description":"基础概念与常识 Java 语言有哪些特点? 简单易学 面向对象（封装，继承，多态） 平台无关性（ Java 虚拟机实现平台无关性） 支持多线程（ C++ 语言没有内置的多线程机制，因此必须调用操作系统的多线程功能来进行多线程程序设计，而 Java 语言却提供了多线程支持）； 可靠性（具备异常处理和自动内存管理机制）； Java SE vs Java E...","title":"Java基础","date":"2024-09-23T00:00:00.000Z","category":["Java"],"tag":["Java基础"],"head":[["meta",{"property":"og:url","content":"https://he9.xin/notes/Java/a_base/a_base.html"}],["meta",{"property":"og:site_name","content":"春风不语即随本心"}],["meta",{"property":"og:title","content":"Java基础"}],["meta",{"property":"og:description","content":"基础概念与常识 Java 语言有哪些特点? 简单易学 面向对象（封装，继承，多态） 平台无关性（ Java 虚拟机实现平台无关性） 支持多线程（ C++ 语言没有内置的多线程机制，因此必须调用操作系统的多线程功能来进行多线程程序设计，而 Java 语言却提供了多线程支持）； 可靠性（具备异常处理和自动内存管理机制）； Java SE vs Java E..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-03-15T13:32:03.000Z"}],["meta",{"property":"article:author","content":"ErenJaegerKing"}],["meta",{"property":"article:tag","content":"Java基础"}],["meta",{"property":"article:published_time","content":"2024-09-23T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-03-15T13:32:03.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java基础\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-09-23T00:00:00.000Z\\",\\"dateModified\\":\\"2025-03-15T13:32:03.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"ErenJaegerKing\\",\\"url\\":\\"https://he9.xin\\",\\"email\\":\\"erenjaegerking@qq.com\\"}]}"]]},"headers":[{"level":2,"title":"基础概念与常识","slug":"基础概念与常识","link":"#基础概念与常识","children":[{"level":3,"title":"Java 语言有哪些特点?","slug":"java-语言有哪些特点","link":"#java-语言有哪些特点","children":[]},{"level":3,"title":"Java SE vs Java EE","slug":"java-se-vs-java-ee","link":"#java-se-vs-java-ee","children":[]},{"level":3,"title":"JVM vs JDK vs JRE","slug":"jvm-vs-jdk-vs-jre","link":"#jvm-vs-jdk-vs-jre","children":[]},{"level":3,"title":"什么是字节码?采用字节码的好处是什么?","slug":"什么是字节码-采用字节码的好处是什么","link":"#什么是字节码-采用字节码的好处是什么","children":[]},{"level":3,"title":"为什么说 Java 语言“编译与解释并存”？","slug":"为什么说-java-语言-编译与解释并存","link":"#为什么说-java-语言-编译与解释并存","children":[]}]},{"level":2,"title":"基本语法","slug":"基本语法","link":"#基本语法","children":[{"level":3,"title":"注释有哪几种形式？","slug":"注释有哪几种形式","link":"#注释有哪几种形式","children":[]},{"level":3,"title":"标识符和关键字的区别是什么？","slug":"标识符和关键字的区别是什么","link":"#标识符和关键字的区别是什么","children":[]},{"level":3,"title":"Java 语言关键字有哪些？","slug":"java-语言关键字有哪些","link":"#java-语言关键字有哪些","children":[]},{"level":3,"title":"自增自减运算符","slug":"自增自减运算符","link":"#自增自减运算符","children":[]},{"level":3,"title":"移位运算符","slug":"移位运算符","link":"#移位运算符","children":[]},{"level":3,"title":"continue、break 和 return 的区别是什么？","slug":"continue、break-和-return-的区别是什么","link":"#continue、break-和-return-的区别是什么","children":[]}]},{"level":2,"title":"基本数据类型","slug":"基本数据类型","link":"#基本数据类型","children":[{"level":3,"title":"Java 中的几种基本数据类型了解么？","slug":"java-中的几种基本数据类型了解么","link":"#java-中的几种基本数据类型了解么","children":[]},{"level":3,"title":"基本类型和包装类型的区别？","slug":"基本类型和包装类型的区别","link":"#基本类型和包装类型的区别","children":[]},{"level":3,"title":"包装类型的缓存机制了解么？","slug":"包装类型的缓存机制了解么","link":"#包装类型的缓存机制了解么","children":[]},{"level":3,"title":"自动装箱与拆箱了解吗？原理是什么？","slug":"自动装箱与拆箱了解吗-原理是什么","link":"#自动装箱与拆箱了解吗-原理是什么","children":[]},{"level":3,"title":"为什么浮点数运算的时候会有精度丢失的风险？","slug":"为什么浮点数运算的时候会有精度丢失的风险","link":"#为什么浮点数运算的时候会有精度丢失的风险","children":[]},{"level":3,"title":"如何解决浮点数运算的精度丢失问题？","slug":"如何解决浮点数运算的精度丢失问题","link":"#如何解决浮点数运算的精度丢失问题","children":[]},{"level":3,"title":"超过 long 整型的数据应该如何表示？","slug":"超过-long-整型的数据应该如何表示","link":"#超过-long-整型的数据应该如何表示","children":[]}]},{"level":2,"title":"变量","slug":"变量","link":"#变量","children":[{"level":3,"title":"成员变量与局部变量的区别？","slug":"成员变量与局部变量的区别","link":"#成员变量与局部变量的区别","children":[]},{"level":3,"title":"静态变量有什么作用？","slug":"静态变量有什么作用","link":"#静态变量有什么作用","children":[]},{"level":3,"title":"字符型常量和字符串常量的区别?","slug":"字符型常量和字符串常量的区别","link":"#字符型常量和字符串常量的区别","children":[]}]},{"level":2,"title":"方法","slug":"方法","link":"#方法","children":[{"level":3,"title":"什么是方法的返回值?方法有哪几种类型？","slug":"什么是方法的返回值-方法有哪几种类型","link":"#什么是方法的返回值-方法有哪几种类型","children":[]},{"level":3,"title":"静态方法为什么不能调用非静态成员?","slug":"静态方法为什么不能调用非静态成员","link":"#静态方法为什么不能调用非静态成员","children":[]},{"level":3,"title":"静态方法和实例方法有何不同？","slug":"静态方法和实例方法有何不同","link":"#静态方法和实例方法有何不同","children":[]},{"level":3,"title":"重载和重写有什么区别？","slug":"重载和重写有什么区别","link":"#重载和重写有什么区别","children":[]},{"level":3,"title":"什么是可变长参数？","slug":"什么是可变长参数","link":"#什么是可变长参数","children":[]}]},{"level":2,"title":"面向对象基础","slug":"面向对象基础","link":"#面向对象基础","children":[{"level":3,"title":"面向对象和面向过程的区别","slug":"面向对象和面向过程的区别","link":"#面向对象和面向过程的区别","children":[]},{"level":3,"title":"创建一个对象用什么运算符?对象实体与对象引用有何不同?","slug":"创建一个对象用什么运算符-对象实体与对象引用有何不同","link":"#创建一个对象用什么运算符-对象实体与对象引用有何不同","children":[]},{"level":3,"title":"对象的相等和引用相等的区别","slug":"对象的相等和引用相等的区别","link":"#对象的相等和引用相等的区别","children":[]},{"level":3,"title":"如果一个类没有声明构造方法，该程序能正确执行吗?","slug":"如果一个类没有声明构造方法-该程序能正确执行吗","link":"#如果一个类没有声明构造方法-该程序能正确执行吗","children":[]},{"level":3,"title":"构造方法有哪些特点？是否可被 override?","slug":"构造方法有哪些特点-是否可被-override","link":"#构造方法有哪些特点-是否可被-override","children":[]},{"level":3,"title":"面向对象三大特征","slug":"面向对象三大特征","link":"#面向对象三大特征","children":[]},{"level":3,"title":"接口和抽象类有什么共同点和区别？","slug":"接口和抽象类有什么共同点和区别","link":"#接口和抽象类有什么共同点和区别","children":[]},{"level":3,"title":"深拷贝和浅拷贝区别了解吗？什么是引用拷贝？","slug":"深拷贝和浅拷贝区别了解吗-什么是引用拷贝","link":"#深拷贝和浅拷贝区别了解吗-什么是引用拷贝","children":[]}]},{"level":2,"title":"Object","slug":"object","link":"#object","children":[{"level":3,"title":"Object 类的常见方法有哪些？","slug":"object-类的常见方法有哪些","link":"#object-类的常见方法有哪些","children":[]},{"level":3,"title":"== 和 equals() 的区别","slug":"和-equals-的区别","link":"#和-equals-的区别","children":[]},{"level":3,"title":"hashCode() 有什么用？","slug":"hashcode-有什么用","link":"#hashcode-有什么用","children":[]},{"level":3,"title":"为什么要有 hashCode？","slug":"为什么要有-hashcode","link":"#为什么要有-hashcode","children":[]},{"level":3,"title":"为什么重写 equals() 时必须重写 hashCode() 方法？","slug":"为什么重写-equals-时必须重写-hashcode-方法","link":"#为什么重写-equals-时必须重写-hashcode-方法","children":[]}]},{"level":2,"title":"String","slug":"string","link":"#string","children":[{"level":3,"title":"String、StringBuffer、StringBuilder 的区别？","slug":"string、stringbuffer、stringbuilder-的区别","link":"#string、stringbuffer、stringbuilder-的区别","children":[]},{"level":3,"title":"String 为什么是不可变的?","slug":"string-为什么是不可变的","link":"#string-为什么是不可变的","children":[]},{"level":3,"title":"字符串拼接用“+” 还是 StringBuilder?","slug":"字符串拼接用-还是-stringbuilder","link":"#字符串拼接用-还是-stringbuilder","children":[]},{"level":3,"title":"String#equals() 和 Object#equals() 有何区别？","slug":"string-equals-和-object-equals-有何区别","link":"#string-equals-和-object-equals-有何区别","children":[]},{"level":3,"title":"字符串常量池的作用了解吗？","slug":"字符串常量池的作用了解吗","link":"#字符串常量池的作用了解吗","children":[]},{"level":3,"title":"String s1 = new String(\\"abc\\");这句话创建了几个字符串对象？","slug":"string-s1-new-string-abc-这句话创建了几个字符串对象","link":"#string-s1-new-string-abc-这句话创建了几个字符串对象","children":[]},{"level":3,"title":"String#intern 方法有什么作用?","slug":"string-intern-方法有什么作用","link":"#string-intern-方法有什么作用","children":[]},{"level":3,"title":"String 类型的变量和常量做“+”运算时发生了什么？","slug":"string-类型的变量和常量做-运算时发生了什么","link":"#string-类型的变量和常量做-运算时发生了什么","children":[]}]},{"level":2,"title":"异常","slug":"异常","link":"#异常","children":[{"level":3,"title":"Exception 和 Error 有什么区别？","slug":"exception-和-error-有什么区别","link":"#exception-和-error-有什么区别","children":[]},{"level":3,"title":"Checked Exception 和 Unchecked Exception 有什么区别？","slug":"checked-exception-和-unchecked-exception-有什么区别","link":"#checked-exception-和-unchecked-exception-有什么区别","children":[]},{"level":3,"title":"Throwable 类常用方法有哪些？","slug":"throwable-类常用方法有哪些","link":"#throwable-类常用方法有哪些","children":[]},{"level":3,"title":"try-catch-finally 如何使用？","slug":"try-catch-finally-如何使用","link":"#try-catch-finally-如何使用","children":[]},{"level":3,"title":"finally 中的代码一定会执行吗？","slug":"finally-中的代码一定会执行吗","link":"#finally-中的代码一定会执行吗","children":[]},{"level":3,"title":"如何使用 try-with-resources 代替try-catch-finally？","slug":"如何使用-try-with-resources-代替try-catch-finally","link":"#如何使用-try-with-resources-代替try-catch-finally","children":[]},{"level":3,"title":"异常使用有哪些需要注意的地方？","slug":"异常使用有哪些需要注意的地方","link":"#异常使用有哪些需要注意的地方","children":[]}]},{"level":2,"title":"泛型","slug":"泛型","link":"#泛型","children":[{"level":3,"title":"什么是泛型？有什么作用？","slug":"什么是泛型-有什么作用","link":"#什么是泛型-有什么作用","children":[]},{"level":3,"title":"泛型的使用方式有哪几种？","slug":"泛型的使用方式有哪几种","link":"#泛型的使用方式有哪几种","children":[]},{"level":3,"title":"项目中哪里用到了泛型？","slug":"项目中哪里用到了泛型","link":"#项目中哪里用到了泛型","children":[]}]},{"level":2,"title":"反射","slug":"反射","link":"#反射","children":[{"level":3,"title":"何谓反射？","slug":"何谓反射","link":"#何谓反射","children":[]},{"level":3,"title":"反射的优缺点？","slug":"反射的优缺点","link":"#反射的优缺点","children":[]},{"level":3,"title":"反射的应用场景？","slug":"反射的应用场景","link":"#反射的应用场景","children":[]}]},{"level":2,"title":"注解","slug":"注解","link":"#注解","children":[{"level":3,"title":"何谓注解？","slug":"何谓注解","link":"#何谓注解","children":[]},{"level":3,"title":"注解的解析方法有哪几种？","slug":"注解的解析方法有哪几种","link":"#注解的解析方法有哪几种","children":[]}]},{"level":2,"title":"SPI","slug":"spi","link":"#spi","children":[{"level":3,"title":"何谓 SPI?","slug":"何谓-spi","link":"#何谓-spi","children":[]},{"level":3,"title":"SPI 和 API 有什么区别？","slug":"spi-和-api-有什么区别","link":"#spi-和-api-有什么区别","children":[]},{"level":3,"title":"SPI 的优缺点？","slug":"spi-的优缺点","link":"#spi-的优缺点","children":[]}]},{"level":2,"title":"序列化和反序列化","slug":"序列化和反序列化","link":"#序列化和反序列化","children":[{"level":3,"title":"什么是序列化?什么是反序列化?","slug":"什么是序列化-什么是反序列化","link":"#什么是序列化-什么是反序列化","children":[]},{"level":3,"title":"如果有些字段不想进行序列化怎么办？","slug":"如果有些字段不想进行序列化怎么办","link":"#如果有些字段不想进行序列化怎么办","children":[]},{"level":3,"title":"常见序列化协议有哪些？","slug":"常见序列化协议有哪些","link":"#常见序列化协议有哪些","children":[]},{"level":3,"title":"为什么不推荐使用 JDK 自带的序列化？","slug":"为什么不推荐使用-jdk-自带的序列化","link":"#为什么不推荐使用-jdk-自带的序列化","children":[]}]},{"level":2,"title":"I/O","slug":"i-o","link":"#i-o","children":[{"level":3,"title":"Java IO 流了解吗？","slug":"java-io-流了解吗","link":"#java-io-流了解吗","children":[]},{"level":3,"title":"I/O 流为什么要分为字节流和字符流呢?","slug":"i-o-流为什么要分为字节流和字符流呢","link":"#i-o-流为什么要分为字节流和字符流呢","children":[]},{"level":3,"title":"Java IO 中的设计模式有哪些？","slug":"java-io-中的设计模式有哪些","link":"#java-io-中的设计模式有哪些","children":[]},{"level":3,"title":"BIO、NIO 和 AIO 的区别？","slug":"bio、nio-和-aio-的区别","link":"#bio、nio-和-aio-的区别","children":[]}]},{"level":2,"title":"语法糖","slug":"语法糖","link":"#语法糖","children":[{"level":3,"title":"什么是语法糖？","slug":"什么是语法糖","link":"#什么是语法糖","children":[]},{"level":3,"title":"Java 中有哪些常见的语法糖？","slug":"java-中有哪些常见的语法糖","link":"#java-中有哪些常见的语法糖","children":[]}]}],"git":{"createdTime":1733324628000,"updatedTime":1742045523000,"contributors":[{"name":"Jaeger Eren","email":"erenjaegerking@qq.com","commits":7},{"name":"erenjaeger","email":"ErenJaegerKing@qq.com","commits":1}]},"readingTime":{"minutes":17.4,"words":5221},"filePathRelative":"notes/Java/a_base/a_base.md","localizedDate":"2024年9月23日","excerpt":"<h2>基础概念与常识</h2>\\n<h3>Java 语言有哪些特点?</h3>\\n<ul>\\n<li>简单易学</li>\\n<li>面向对象（封装，继承，多态）</li>\\n<li>平台无关性（ Java 虚拟机实现平台无关性）</li>\\n<li>支持多线程（ C++ 语言没有内置的多线程机制，因此必须调用操作系统的多线程功能来进行多线程程序设计，而 Java 语言却提供了多线程支持）；</li>\\n<li>可靠性（具备异常处理和自动内存管理机制）；</li>\\n</ul>\\n<h3>Java SE vs Java EE</h3>\\n<p>Java SE 是 Java 的基础版本，Java EE 是 Java 的高级版本</p>","autoDesc":true}');export{d as comp,c as data};
