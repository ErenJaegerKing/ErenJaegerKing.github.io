import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as t,a as r,o as l}from"./app-BSrKWhei.js";const n={};function o(a,e){return l(),t("div",null,e[0]||(e[0]=[r('<div class="hint-container info"><p class="hint-container-title">相关信息</p><p>本笔记参考<a href="https://www.bilibili.com/video/BV1Np4y1z7BU?vd_source=834d9d69a86c55d6acbaf9e5dbe37bb2&amp;spm_id_from=333.788.videopod.episodes" target="_blank" rel="noopener noreferrer">黑马程序员设计模式</a> <a href="https://blog.csdn.net/lovelion/article/details/17517213" target="_blank" rel="noopener noreferrer">LoveLion</a> <a href="https://refactoringguru.cn/" target="_blank" rel="noopener noreferrer">Rrefactoringguru</a> <a href="https://www.cnblogs.com/chenssy/p/3357683.html" target="_blank" rel="noopener noreferrer">chenssy</a> <a href="http://www.techzhang.cn/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF-by-%E7%A8%8B%E5%BA%8F%E5%91%98%E9%B1%BC%E7%9A%AE/" target="_blank" rel="noopener noreferrer">程序员鱼皮</a></p></div><p>优先：</p><ol><li>单例模式【学习难度：★☆☆☆☆，使用频率：★★★★☆】</li><li>工厂方法模式【学习难度：★★☆☆☆，使用频率：★★★★★】</li><li>迭代器模式【学习难度：★★★☆☆，使用频率：★★★★★】</li><li>策略模式【学习难度：★☆☆☆☆，使用频率：★★★★☆】</li><li>建造者模式【学习难度：★★★★☆，使用频率：★★☆☆☆】</li><li>模板方法模式【学习难度：★★☆☆☆，使用频率：★★★☆☆】</li><li>代理模式【学习难度：★★★☆☆，使用频率：★★★★☆】</li><li>责任链模式【学习难度：★★★☆☆，使用频率：★★☆☆☆】</li><li>抽象工厂模式【学习难度：★★★★☆，使用频率：★★★★★】</li><li>适配器模式【学习难度：★★☆☆☆，使用频率：★★★★☆】</li><li>观察者模式【学习难度：★★★☆☆，使用频率：★★★★★】</li><li>外观模式【学习难度：★☆☆☆☆，使用频率：★★★★★】</li></ol><p>一般：</p><ol><li>桥接模式【学习难度：★★★☆☆，使用频率：★★★☆☆】</li><li>组合模式【学习难度：★★★☆☆，使用频率：★★★★☆】</li><li>装饰器模式【学习难度：★★★☆☆，使用频率：★★★☆☆】</li><li>状态模式【学习难度：★★★☆☆，使用频率：★★★☆☆】</li><li>访问者模式【学习难度：★★★★☆，使用频率：★☆☆☆☆】</li><li>中介者模式【学习难度：★★★☆☆，使用频率：★★☆☆☆】</li><li>命令模式【学习难度：★★★☆☆，使用频率：★★★★☆】</li><li>备忘录模式【学习难度：★★☆☆☆，使用频率：★★☆☆☆】</li></ol><p>低优先：</p><ol><li>原型模式【学习难度：★★★☆☆，使用频率：★★★☆☆】</li><li>享元模式【学习难度：★★★★☆，使用频率：★☆☆☆☆】</li><li>解释器模式【学习难度：★★★★★，使用频率：★☆☆☆☆】</li></ol><ul><li><p>Spring</p><ul><li>工厂模式：通过 BeanFactory 和 ApplicationContext 来创建对象</li><li>单例模式：Spring Bean 默认为单例模式</li><li>策略模式：例如 Resource 的实现类，针对不同的资源文件，实现了不同方式的资源获取策略</li><li>代理模式：Spring 的 AOP 功能用到了 JDK 的动态代理和 CGLIB 字节码生成技术</li><li>模板方法：可以将相同部分的代码放在父类中，而将不同的代码放入不同的子类中，用来解决代码重复的问题。比如RestTemplate、JmsTemplate、JpaTemplate</li><li>适配器模式：Spring AOP 的增强或通知（Advice）使用到了适配器模式</li><li>观察者模式：Spring 事件驱动模型</li><li>桥接模式：可以根据客户的需求能够动态切换不同的数据源。比如我们的项目需要连接多个数据库，客户在每次访问中根据需要会去访问不同的数据库</li></ul></li><li><p>Spring MVC</p><ul><li>组合模式：WebMvcConfigurerComposite，树枝和树叶都实现了相同的抽象类或接口 WebMvcConfigurer</li><li>责任链模式：DispatcherServlet 依次拦截和处理请求</li><li>适配器模式：HandlerAdapter 处理器适配</li></ul></li><li><p>SpringBoot</p></li><li><p>Netty</p></li><li><p>Dubbo</p></li><li><p>Spring Cloud</p></li><li><p>MyBatis</p><ul><li>Builder + Factory 模式：创建 SqlSession 工厂和 SqlSession</li><li>模板方法模式：BaseExecutor 定义执行器基本流程</li><li>解释器模式：SqlNode 动态解析 SQL</li><li>单例模式：ErrorContext 线程唯一</li><li>装饰器模式：Cache 的实现用组合而非继承实现更灵活地缓存方式结合</li><li>迭代器模式：PropertyTokenizer 利用迭代器模式实现属性解析器</li><li>适配器模式：Log 适配不同的日志框架</li></ul></li><li><p>Tomcat</p></li></ul>',8)]))}const s=i(n,[["render",o],["__file","d_summarization.html.vue"]]),d=JSON.parse('{"path":"/notes/designPattern/a_basic/d_summarization.html","title":"设计模式总结","lang":"zh-CN","frontmatter":{"icon":"","description":"相关信息 本笔记参考黑马程序员设计模式 LoveLion Rrefactoringguru chenssy 程序员鱼皮 优先： 单例模式【学习难度：★☆☆☆☆，使用频率：★★★★☆】 工厂方法模式【学习难度：★★☆☆☆，使用频率：★★★★★】 迭代器模式【学习难度：★★★☆☆，使用频率：★★★★★】 策略模式【学习难度：★☆☆☆☆，使用频率：★★★★☆...","title":"设计模式总结","date":"2024-11-10T00:00:00.000Z","category":["设计模式"],"tag":["设计模式总结"],"order":4,"head":[["meta",{"property":"og:url","content":"https://ErenJaegerKing.github.io/notes/designPattern/a_basic/d_summarization.html"}],["meta",{"property":"og:site_name","content":"ErenJaeger"}],["meta",{"property":"og:title","content":"设计模式总结"}],["meta",{"property":"og:description","content":"相关信息 本笔记参考黑马程序员设计模式 LoveLion Rrefactoringguru chenssy 程序员鱼皮 优先： 单例模式【学习难度：★☆☆☆☆，使用频率：★★★★☆】 工厂方法模式【学习难度：★★☆☆☆，使用频率：★★★★★】 迭代器模式【学习难度：★★★☆☆，使用频率：★★★★★】 策略模式【学习难度：★☆☆☆☆，使用频率：★★★★☆..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-11-08T01:46:38.000Z"}],["meta",{"property":"article:author","content":"ErenJaegerKing"}],["meta",{"property":"article:tag","content":"设计模式总结"}],["meta",{"property":"article:published_time","content":"2024-11-10T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-11-08T01:46:38.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"设计模式总结\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-11-10T00:00:00.000Z\\",\\"dateModified\\":\\"2024-11-08T01:46:38.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"ErenJaegerKing\\",\\"url\\":\\"https://ErenJaegerKing.github.io\\",\\"email\\":\\"erenjaegerking@qq.com\\"}]}"]]},"headers":[],"git":{"createdTime":1731030398000,"updatedTime":1731030398000,"contributors":[{"name":"LiYaoYu","email":"ErenJaegerKing@qq.com","commits":1}]},"readingTime":{"minutes":2.77,"words":832},"filePathRelative":"notes/designPattern/a_basic/d_summarization.md","localizedDate":"2024年11月10日","excerpt":"<div class=\\"hint-container info\\">\\n<p class=\\"hint-container-title\\">相关信息</p>\\n<p>本笔记参考<a href=\\"https://www.bilibili.com/video/BV1Np4y1z7BU?vd_source=834d9d69a86c55d6acbaf9e5dbe37bb2&amp;spm_id_from=333.788.videopod.episodes\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">黑马程序员设计模式</a>  <a href=\\"https://blog.csdn.net/lovelion/article/details/17517213\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">LoveLion</a> <a href=\\"https://refactoringguru.cn/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">Rrefactoringguru</a> <a href=\\"https://www.cnblogs.com/chenssy/p/3357683.html\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">chenssy</a> <a href=\\"http://www.techzhang.cn/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF-by-%E7%A8%8B%E5%BA%8F%E5%91%98%E9%B1%BC%E7%9A%AE/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">程序员鱼皮</a></p>\\n</div>","autoDesc":true}');export{s as comp,d as data};
