import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,a,o as r}from"./app-B3Rc3VSG.js";const i={};function l(o,e){return r(),n("div",null,e[0]||(e[0]=[a('<h3 id="概念" tabindex="-1"><a class="header-anchor" href="#概念"><span>概念</span></a></h3><p>软件设计模式（Software Design Pattern），又称设计模式，是一套被反复使用、多数人知晓的、经过分类编目的、代码设计经验的总结。它描述了在软件设计过程中的一些不断重复发生的问题，以及该问题的解决方案。也就是说，它是解决特定问题的一系列套路，是前辈们的代码设计经验的总结，具有一定的普遍性，可以反复使用。</p><h3 id="必要性" tabindex="-1"><a class="header-anchor" href="#必要性"><span><strong>必要性</strong></span></a></h3><p>设计模式的本质是面向对象设计原则的实际运用，是对类的封装性、继承性和多态性以及类的关联关系和组合关系的充分理解。</p><p>正确使用设计模式具有以下优点。</p><ul><li>可以提高程序员的思维能力、编程能力和设计能力。</li><li>使程序设计更加标准化、代码编制更加工程化，使软件开发效率大大提高，从而缩短软件的开发周期。</li><li>使设计的代码可重用性高、可读性强、可靠性高、灵活性好、可维护性强。</li></ul><h3 id="分类" tabindex="-1"><a class="header-anchor" href="#分类"><span>分类</span></a></h3><ul><li><p><strong>创建型模式</strong></p><p>用于描述“怎样创建对象”，它的主要特点是“将对象的创建与使用分离”。GoF（四人组）书中提供了单例、原型、工厂方法、抽象工厂、建造者等 5 种创建型模式。</p></li><li><p><strong>结构型模式</strong></p><p>用于描述如何将类或对象按某种布局组成更大的结构，GoF（四人组）书中提供了代理、适配器、桥接、装饰、外观、享元、组合等 7 种结构型模式。</p></li><li><p><strong>行为型模式</strong></p><p>用于描述类或对象之间怎样相互协作共同完成单个对象无法单独完成的任务，以及怎样分配职责。GoF（四人组）书中提供了模板方法、策略、命令、职责链、状态、观察者、中介者、迭代器、访问者、备忘录、解释器等 11 种行为型模式。</p></li></ul><h3 id="uml图" tabindex="-1"><a class="header-anchor" href="#uml图"><span><strong>UML图</strong></span></a></h3><p>统一建模语言（Unified Modeling Language，UML）是用来设计软件的可视化建模语言。它的特点是简单、统一、图形化、能表达软件设计中的动态与静态信息。</p><p>UML 从目标系统的不同角度出发，定义了用例图、类图、对象图、状态图、活动图、时序图、协作图、构件图、部署图等 9 种图。</p><h3 id="类图表示法" tabindex="-1"><a class="header-anchor" href="#类图表示法"><span><strong>类图表示法</strong></span></a></h3><p>属性/方法名称前加的加号和减号表示了这个属性/方法的可见性，UML类图中表示可见性的符号有三种：</p><ul><li>+：表示public</li><li>：表示private</li><li>#：表示protected</li></ul><p>属性的完整表示方式是： <strong>可见性 名称 ：类型 [ = 缺省值]</strong></p><p>方法的完整表示方式是： <strong>可见性 名称(参数列表) [ ： 返回类型]</strong></p>',16)]))}const c=t(i,[["render",l],["__file","a_basic.html.vue"]]),g=JSON.parse('{"path":"/notes/designPattern/a_basic/a_basic.html","title":"基础理论知识","lang":"zh-CN","frontmatter":{"icon":"","description":"概念 软件设计模式（Software Design Pattern），又称设计模式，是一套被反复使用、多数人知晓的、经过分类编目的、代码设计经验的总结。它描述了在软件设计过程中的一些不断重复发生的问题，以及该问题的解决方案。也就是说，它是解决特定问题的一系列套路，是前辈们的代码设计经验的总结，具有一定的普遍性，可以反复使用。 必要性 设计模式的本质是面...","title":"基础理论知识","date":"2024-11-03T00:00:00.000Z","category":["设计模式"],"tag":["基础理论知识"],"order":1,"head":[["meta",{"property":"og:url","content":"https://ErenJaegerKing.github.io/notes/designPattern/a_basic/a_basic.html"}],["meta",{"property":"og:site_name","content":"ErenJaeger"}],["meta",{"property":"og:title","content":"基础理论知识"}],["meta",{"property":"og:description","content":"概念 软件设计模式（Software Design Pattern），又称设计模式，是一套被反复使用、多数人知晓的、经过分类编目的、代码设计经验的总结。它描述了在软件设计过程中的一些不断重复发生的问题，以及该问题的解决方案。也就是说，它是解决特定问题的一系列套路，是前辈们的代码设计经验的总结，具有一定的普遍性，可以反复使用。 必要性 设计模式的本质是面..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-11-03T13:13:35.000Z"}],["meta",{"property":"article:author","content":"ErenJaegerKing"}],["meta",{"property":"article:tag","content":"基础理论知识"}],["meta",{"property":"article:published_time","content":"2024-11-03T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-11-03T13:13:35.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"基础理论知识\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-11-03T00:00:00.000Z\\",\\"dateModified\\":\\"2024-11-03T13:13:35.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"ErenJaegerKing\\",\\"url\\":\\"https://ErenJaegerKing.github.io\\",\\"email\\":\\"erenjaegerking@qq.com\\"}]}"]]},"headers":[{"level":3,"title":"概念","slug":"概念","link":"#概念","children":[]},{"level":3,"title":"必要性","slug":"必要性","link":"#必要性","children":[]},{"level":3,"title":"分类","slug":"分类","link":"#分类","children":[]},{"level":3,"title":"UML图","slug":"uml图","link":"#uml图","children":[]},{"level":3,"title":"类图表示法","slug":"类图表示法","link":"#类图表示法","children":[]}],"git":{"createdTime":1730639615000,"updatedTime":1730639615000,"contributors":[{"name":"LiYaoYu","email":"ErenJaegerKing@qq.com","commits":1}]},"readingTime":{"minutes":2.46,"words":737},"filePathRelative":"notes/designPattern/a_basic/a_basic.md","localizedDate":"2024年11月3日","excerpt":"<h3>概念</h3>\\n<p>软件设计模式（Software Design Pattern），又称设计模式，是一套被反复使用、多数人知晓的、经过分类编目的、代码设计经验的总结。它描述了在软件设计过程中的一些不断重复发生的问题，以及该问题的解决方案。也就是说，它是解决特定问题的一系列套路，是前辈们的代码设计经验的总结，具有一定的普遍性，可以反复使用。</p>\\n<h3><strong>必要性</strong></h3>\\n<p>设计模式的本质是面向对象设计原则的实际运用，是对类的封装性、继承性和多态性以及类的关联关系和组合关系的充分理解。</p>\\n<p>正确使用设计模式具有以下优点。</p>\\n<ul>\\n<li>可以提高程序员的思维能力、编程能力和设计能力。</li>\\n<li>使程序设计更加标准化、代码编制更加工程化，使软件开发效率大大提高，从而缩短软件的开发周期。</li>\\n<li>使设计的代码可重用性高、可读性强、可靠性高、灵活性好、可维护性强。</li>\\n</ul>","autoDesc":true}');export{c as comp,g as data};
