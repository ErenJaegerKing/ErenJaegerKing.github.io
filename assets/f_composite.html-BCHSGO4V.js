import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,e as a,o as i}from"./app-DlORvGGj.js";const r={};function o(p,e){return i(),n("div",null,e[0]||(e[0]=[a('<hr><div class="hint-container info"><p class="hint-container-title">相关信息</p><p>设计模式-结构性模式-组合模式</p></div><hr><h3 id="动机" tabindex="-1"><a class="header-anchor" href="#动机"><span>动机</span></a></h3><figure><img src="https://drawingbed-686.pages.dev/myblog/202411101621466.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>组合模式依据树形结构来组合对象，用来表示部分以及整体层次。这种类型的设计模式属于结构型模式，它创建了对象组的树形结构。又名部分整体模式</p><h3 id="定义" tabindex="-1"><a class="header-anchor" href="#定义"><span>定义</span></a></h3><p><strong>是用于把一组相似的对象当作一个单一的对象</strong>。</p><h3 id="uml" tabindex="-1"><a class="header-anchor" href="#uml"><span>UML</span></a></h3><figure><img src="https://drawingbed-686.pages.dev/myblog/202411101620121.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="结构" tabindex="-1"><a class="header-anchor" href="#结构"><span><strong>结构</strong></span></a></h3><p>组合模式主要包含三种角色：</p><ul><li><strong>抽象根节点（Component）</strong>：定义系统各层次对象的共有方法和属性，可以预先定义一些默认行为和属性。</li><li><strong>树枝节点（Composite）</strong>：定义树枝节点的行为，存储子节点，组合树枝节点和叶子节点形成一个树形结构。</li><li><strong>叶子节点（Leaf）</strong>：叶子节点对象，其下再无分支，是系统层次遍历的最小单位。</li></ul><h3 id="案例实现" tabindex="-1"><a class="header-anchor" href="#案例实现"><span><strong>案例实现</strong></span></a></h3><p>【例】软件菜单</p><p>我们在访问别的一些管理系统时，经常可以看到类似的菜单。一个菜单可以包含菜单项（菜单项是指不再包含其他内容的菜单条目），也可以包含带有其他菜单项的菜单，因此使用组合模式描述菜单就很恰当，我们的需求是针对一个菜单，打印出其包含的所有菜单以及菜单项的名称。</p><figure><img src="https://drawingbed-686.pages.dev/myblog/202411101622469.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="优缺点" tabindex="-1"><a class="header-anchor" href="#优缺点"><span>优缺点</span></a></h3><ul><li><p>组合模式可以清楚地定义分层次的复杂对象，表示对象的全部或部分层次，它让客户端忽略了层次的差异，方便对整个层次结构进行控制。</p></li><li><p><strong>简化了客户端代码</strong></p><p>客户端可以一致地使用一个组合结构或其中单个对象，不必关心处理的是单个对象还是整个组合结构</p></li><li><p><strong>符合“开闭原则”</strong></p><p>在组合模式中增加新的树枝节点和叶子节点都很方便，无须对现有类库进行任何修改</p></li><li><p>组合模式为树形结构的面向对象实现提供了一种灵活的解决方案，通过叶子节点和树枝节点的递归组合，可以形成复杂的树形结构，但对树形结构的控制却非常简单。</p></li></ul><h3 id="适用场景" tabindex="-1"><a class="header-anchor" href="#适用场景"><span>适用场景</span></a></h3><p>组合模式正是应树形结构而生，所以组合模式的使用场景就是<strong>出现树形结构的地方</strong>。比如：文件目录显示，多级目录呈现等树形结构数据的操作。</p>',21)]))}const g=t(r,[["render",o],["__file","f_composite.html.vue"]]),c=JSON.parse('{"path":"/notes/designPattern/c_structural/f_composite.html","title":"组合模式","lang":"zh-CN","frontmatter":{"icon":"","description":"相关信息 设计模式-结构性模式-组合模式 动机 组合模式依据树形结构来组合对象，用来表示部分以及整体层次。这种类型的设计模式属于结构型模式，它创建了对象组的树形结构。又名部分整体模式 定义 是用于把一组相似的对象当作一个单一的对象。 UML 结构 组合模式主要包含三种角色： 抽象根节点（Component）：定义系统各层次对象的共有方法和属性，可以预先...","title":"组合模式","date":"2024-11-12T00:00:00.000Z","category":["设计模式"],"tag":["结构性模式","组合模式"],"order":6,"head":[["meta",{"property":"og:url","content":"https://he9.xin/notes/designPattern/c_structural/f_composite.html"}],["meta",{"property":"og:site_name","content":"春风不语即随本心"}],["meta",{"property":"og:title","content":"组合模式"}],["meta",{"property":"og:description","content":"相关信息 设计模式-结构性模式-组合模式 动机 组合模式依据树形结构来组合对象，用来表示部分以及整体层次。这种类型的设计模式属于结构型模式，它创建了对象组的树形结构。又名部分整体模式 定义 是用于把一组相似的对象当作一个单一的对象。 UML 结构 组合模式主要包含三种角色： 抽象根节点（Component）：定义系统各层次对象的共有方法和属性，可以预先..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://drawingbed-686.pages.dev/myblog/202411101621466.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-11-10T08:26:03.000Z"}],["meta",{"property":"article:author","content":"ErenJaegerKing"}],["meta",{"property":"article:tag","content":"结构性模式"}],["meta",{"property":"article:tag","content":"组合模式"}],["meta",{"property":"article:published_time","content":"2024-11-12T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-11-10T08:26:03.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"组合模式\\",\\"image\\":[\\"https://drawingbed-686.pages.dev/myblog/202411101621466.png\\",\\"https://drawingbed-686.pages.dev/myblog/202411101620121.png\\",\\"https://drawingbed-686.pages.dev/myblog/202411101622469.png\\"],\\"datePublished\\":\\"2024-11-12T00:00:00.000Z\\",\\"dateModified\\":\\"2024-11-10T08:26:03.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"ErenJaegerKing\\",\\"url\\":\\"https://he9.xin\\",\\"email\\":\\"erenjaegerking@qq.com\\"}]}"]]},"headers":[{"level":3,"title":"动机","slug":"动机","link":"#动机","children":[]},{"level":3,"title":"定义","slug":"定义","link":"#定义","children":[]},{"level":3,"title":"UML","slug":"uml","link":"#uml","children":[]},{"level":3,"title":"结构","slug":"结构","link":"#结构","children":[]},{"level":3,"title":"案例实现","slug":"案例实现","link":"#案例实现","children":[]},{"level":3,"title":"优缺点","slug":"优缺点","link":"#优缺点","children":[]},{"level":3,"title":"适用场景","slug":"适用场景","link":"#适用场景","children":[]}],"git":{"createdTime":1731227163000,"updatedTime":1731227163000,"contributors":[{"name":"LiYaoYu","email":"ErenJaegerKing@qq.com","commits":1}]},"readingTime":{"minutes":2.23,"words":668},"filePathRelative":"notes/designPattern/c_structural/f_composite.md","localizedDate":"2024年11月12日","excerpt":"<hr>\\n<div class=\\"hint-container info\\">\\n<p class=\\"hint-container-title\\">相关信息</p>\\n<p>设计模式-结构性模式-组合模式</p>\\n</div>\\n<hr>\\n<h3>动机</h3>\\n<figure><img src=\\"https://drawingbed-686.pages.dev/myblog/202411101621466.png\\" alt=\\"\\" tabindex=\\"0\\" loading=\\"lazy\\"><figcaption></figcaption></figure>\\n<p>组合模式依据树形结构来组合对象，用来表示部分以及整体层次。这种类型的设计模式属于结构型模式，它创建了对象组的树形结构。又名部分整体模式</p>","autoDesc":true}');export{g as comp,c as data};
