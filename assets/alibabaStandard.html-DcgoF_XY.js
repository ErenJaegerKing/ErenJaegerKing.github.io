import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,e as l,o as t}from"./app-DxwYGrhM.js";const n={};function e(p,i){return t(),a("div",null,i[0]||(i[0]=[l(`<div class="hint-container info"><p class="hint-container-title">相关信息</p><p>阿里巴巴崇山版手册，一下是我在规范手册里面不知晓的，看不懂就打开手册仔细观看</p></div><hr><h1 id="一、-编程规约" tabindex="-1"><a class="header-anchor" href="#一、-编程规约"><span>一、 编程规约</span></a></h1><h2 id="一-命名风格" tabindex="-1"><a class="header-anchor" href="#一-命名风格"><span>(一) 命名风格</span></a></h2><ol start="6"><li>【强制】常量命名全部大写，单词间用下划线隔开，<strong>力求语义表达完整清楚，不要嫌名字长</strong>。</li></ol><p>正例：MAX_STOCK_COUNT / CACHE_EXPIRED_TIME</p><p>反例：MAX_COUNT / EXPIRED_TIME</p><ol><li><p>【强制】抽象类命名使用Abstract或Base开头；异常类命名使用Exception结尾；测试类命名以它要测试的类的名称开始，以Test结尾。</p></li><li><p>【强制】POJO类中的任何布尔类型的变量，都不要加is前缀，否则部分框架解析会引起序列 化错误。</p></li></ol><p>说明：在本文MySQL规约中的建表约定第一条，表达是与否的变量采用is_xxx的命名方式，所以，需要 在 resultMap 设置从is_xxx 到xxx 的映射关系。</p><p>反例：定义为基本数据类型Boolean isDeleted的属性，它的方法也是isDeleted()，框架在反向解析的时 候，“误以为”对应的属性名称是deleted，导致属性获取不到，进而抛出异常。</p><ol start="10"><li>【强制】包名统一使用小写，点分隔符之间有且仅有一个自然语义的英语单词。包名统一使用 单数形式，但是类名如果有复数含义，类名可以使用复数形式。</li></ol><p>正例：应用工具类包名为com.alibaba.ei.kunlun.aap.util、类名为 MessageUtils（此规则参考spring 的框架结构）</p><ol start="11"><li><p>以后回看</p></li><li><p>【强制】杜绝完全不规范的缩写，避免望文不知义。</p></li></ol><p>反例：AbstractClass“缩写”成AbsClass；condition“缩写”成 condi；Function 缩写”成Fu，此类随意缩写严重降低了代码的可阅读性。</p><ol start="13"><li>【推荐】为了达到代码自解释的目标，任何自定义编程元素在命名时，使用尽量完整的单词组 合来表达。</li></ol><p>正例：对某个对象引用的volatile字段进行原子更新的类名为AtomicReferenceFieldUpdater。</p><p>反例：常见的方法内变量为int a;的定义方式。</p><ol start="15"><li>【推荐】如果模块、接口、类、方法使用了设计模式，在命名时需体现出具体模式。</li></ol><p>说明：将设计模式体现在名字中，有利于阅读者快速理解架构设计理念。</p><p>正例： public class OrderFactory; public class LoginProxy; public class ResourceObserver;</p><ol start="19"><li>【参考】各层命名规约：</li></ol><p>A) Service/DAO 层方法命名规约</p><p>1） 获取单个对象的方法用get做前缀。</p><p>2） 获取多个对象的方法用list做前缀，复数结尾，如：listObjects。</p><p>3） 获取统计值的方法用count做前缀。</p><p>4） 插入的方法用save/insert做前缀。</p><p>5） 删除的方法用remove/delete做前缀。</p><p>6） 修改的方法用update做前缀。</p><p>B) 领域模型命名规约</p><p>1） 数据对象：xxxDO，xxx即为数据表名。 2） 数据传输对象：xxxDTO，xxx为业务领域相关的名称。 3） 展示对象：xxxVO，xxx一般为网页名称。 4） POJO是DO/DTO/BO/VO的统称，禁止命名成xxxPOJO。</p><h2 id="二-常量定义" tabindex="-1"><a class="header-anchor" href="#二-常量定义"><span>(二) 常量定义</span></a></h2><ol><li>【强制】不允许任何魔法值（即未经预先定义的常量）直接出现在代码中。</li></ol><p>反例：</p><p>// 本例中，开发者A定义了缓存的key，然后开发者B使用缓存时少了下划线，即key是&quot;Id#taobao&quot;+tradeId，导致出现故障</p><p>String key = &quot;Id#taobao_&quot; + tradeId;</p><p>cache.put(key, value);</p><ol start="2"><li>【强制】在long或者Long赋值时，数值后使用大写字母L，不能是小写字母l，小写容易跟 数字混淆，造成误解。</li></ol><p>说明：Long a = 2l; 写的是数字的21，还是Long型的2？</p><h2 id="三-代码格式" tabindex="-1"><a class="header-anchor" href="#三-代码格式"><span>(三) 代码格式</span></a></h2><ol start="3"><li><p>【强制】if/for/while/switch/do 等保留字与括号之间都必须加空格。</p></li><li><p>【强制】任何二目、三目运算符的左右两边都需要加一个空格。</p></li></ol><p>说明：包括赋值运算符=、逻辑运算符&amp;&amp;、加减乘除符号等。</p><ol start="8"><li>【强制】单行字符数限制不超过120个，超出需要换行，换行时遵循如下原则：</li></ol><p>1）第二行相对第一行缩进4个空格，从第三行开始，不再继续缩进，参考示例。</p><p>2）运算符与下文一起换行。</p><p>3）方法调用的点符号与下文一起换行。</p><p>4）方法调用中的多个参数需要换行时，在逗号后进行。</p><p>5）在括号前不要换行，见反例。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">正例： </span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">StringBuilder</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> sb </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> StringBuilder</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 超过120个字符的情况下，换行缩进4个空格，并且方法前的点号一起换行  </span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">sb</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">append</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;yang&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">).</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">append</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;hao&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)...</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    .</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">append</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;chen&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)...</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    .</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">append</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;chen&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)...</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    .</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">append</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;chen&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">反例： </span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">StringBuilder</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> sb </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> StringBuilder</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 超过120个字符的情况下，不要在括号前换行  </span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">sb</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">append</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;you&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">).</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">append</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;are&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)...</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">append</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    (</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;lucky&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 参数很多的方法调用可能超过120个字符，逗号后才是换行处  </span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">method</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(args1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> args2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> args3</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ...</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    ,</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> argsX)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="10"><li><p>【强制】IDE的text file encoding 设置为UTF-8; IDE中文件的换行符使用Unix格式，不要 使用Windows格式。</p></li><li><p>【推荐】单个方法的总行数不超过80行。</p></li></ol><p>说明：除注释之外的方法签名、左右大括号、方法内代码、空行、回车及任何不可见字符的总行数不超过 80 行。</p><p>正例：代码逻辑分清红花和绿叶，个性和共性，绿叶逻辑单独出来成为额外方法，使主干代码更加清晰；共 性逻辑抽取成为共性方法，便于复用和维护。</p><ol start="13"><li>【推荐】不同逻辑、不同语义、不同业务的代码之间插入一个空行分隔开来以提升可读性。</li></ol><p>说明：任何情形，没有必要插入多个空行进行隔开。</p><h2 id="四-oop规约" tabindex="-1"><a class="header-anchor" href="#四-oop规约"><span>(四) OOP规约</span></a></h2><p>OOP即面向对象程序设计</p><ol start="6"><li>【强制】Object的equals方法容易抛空指针异常，应使用常量或确定有值的对象来调用equals。</li></ol><p>正例：&quot;test&quot;.equals(object);</p><p>反例：object.equals(&quot;test&quot;);</p><p>说明：推荐使用JDK7引入的工具类java.util.Objects#equals(Object a, Object b)</p><ol start="7"><li>【强制】所有整型包装类对象之间值的比较，全部使用equals方法比较。</li></ol><p>说明：对于Integer var = ? 在-128至127 之间的赋值，Integer对象是在 IntegerCache.cache 产生，会复用已有对象，这个区间内的Integer值可以直接使用==进行判断，但是这个区间之外的所有数据，都会在堆上产生，并不会复用已有对象，这是一个大坑，推荐使用equals方法进行判断。</p><ol start="8"><li><p>【强制】任何货币金额，均以最小货币单位且整型类型来进行存储。</p></li><li><p>【强制】浮点数之间的等值判断，基本数据类型不能用==来比较，包装数据类型不能用equals 来判断。</p></li></ol><p>详细请看官方手册</p><ol start="10"><li>【强制】如上所示BigDecimal的等值比较应使用compareTo()方法，而不是equals()方法。</li></ol><p>说明：equals()方法会比较值和精度（1.0与1.00返回结果为false），而compareTo()则会忽略精度。</p><ol start="11"><li>【强制】定义数据对象DO类时，属性类型要与数据库字段类型相匹配。</li></ol><p>正例：数据库字段的bigint必须与类属性的Long类型相对应。</p><p>反例：某个案例的数据库表id字段定义类型bigint unsigned，实际类对象属性为Integer，随着id越来 越大，超过Integer的表示范围而溢出成为负数。</p><ol start="14"><li>【强制】定义DO/DTO/VO等POJO类时，不要设定任何属性默认值。</li></ol><p>反例：POJO类的createTime默认值为new Date()，但是这个属性在数据提取时并没有置入具体值，在 更新其它字段时又附带更新了此字段，导致创建时间被修改成当前时间。</p><ol start="15"><li>【强制】序列化类新增属性时，请不要修改serialVersionUID字段，避免反序列失败；如果完全不兼容升级，避免反序列化混乱，那么请修改serialVersionUID值。</li></ol><p>说明：注意serialVersionUID 不一致会抛出序列化运行时异常。</p><ol start="16"><li><p>【强制】构造方法里面禁止加入任何业务逻辑，如果有初始化逻辑，请放在init方法中。</p></li><li><p>【强制】POJO类必须写toString方法。使用IDE中的工具：source&gt; generate toString 时，如果继承了另一个POJO类，注意在前面加一下super.toString。</p></li></ol><p>说明：在方法执行抛出异常时，可以直接调用POJO的toString()方法打印其属性值，便于排查问题。</p><ol start="18"><li>【强制】禁止在POJO类中，同时存在对应属性xxx的isXxx()和getXxx()方法。</li></ol><p>说明：框架在调用属性xxx的提取方法时，并不能确定哪个方法一定是被优先调用到的。</p><ol start="21"><li>【推荐】 类内方法定义的顺序依次是：公有方法或保护方法 &gt; 私有方法 &gt; getter / setter 方法。</li></ol><p>说明：公有方法是类的调用者和维护者最关心的方法，首屏展示最好；保护方法虽然只是子类关心，也可 能是“模板设计模式”下的核心方法；而私有方法外部一般不需要特别关心，是一个黑盒实现；因为承载 的信息价值较低，所有Service和DAO的getter/setter方法放在类体最后。</p><ol start="24"><li>【推荐】final可以声明类、成员变量、方法、以及本地变量，下列情况使用final关键字：</li></ol><p>1） 不允许被继承的类，如：String类。</p><p>2） 不允许修改引用的域对象，如：POJO类的域变量。</p><p>3） 不允许被覆写的方法，如：POJO类的setter方法。</p><p>4） 不允许运行过程中重新赋值的局部变量。</p><p>5） 避免上下文重复使用一个变量，使用final关键字可以强制重新定义一个变量，方便更好地进行重构。</p><ol start="26"><li>【推荐】类成员与方法访问控制从严：</li></ol><p>1） 如果不允许外部直接通过new来创建对象，那么构造方法必须是private。</p><p>2） 工具类不允许有public或default构造方法。</p><p>3） 类非static成员变量并且与子类共享，必须是protected。</p><p>4） 类非static成员变量并且仅在本类使用，必须是private。</p><p>5） 类static 成员变量如果仅在本类使用，必须是private。</p><p>6） 若是static成员变量，考虑是否为final。</p><p>7） 类成员方法只供类内部调用，必须是private。</p><p>8） 类成员方法只对继承类公开，那么限制为protected。</p><p>说明：任何类、方法、参数、变量，严控访问范围。过于宽泛的访问范围，不利于模块解耦。思考：如果 是一个private 的方法，想删除就删除，可是一个public的service成员方法或成员变量，删除一下，不 得手心冒点汗吗？变量像自己的小孩，尽量在自己的视线内，变量作用域太大，无限制的到处跑，那么你 会担心的。</p><h2 id="五-日期时间" tabindex="-1"><a class="header-anchor" href="#五-日期时间"><span>(五) 日期时间</span></a></h2><ol><li>【强制】日期格式化时，传入pattern中表示年份统一使用小写的y。</li></ol><p>说明：日期格式化时，yyyy表示当天所在的年，而大写的YYYY代表是week in which year（JDK7之后 引入的概念），意思是当天所在的周属于的年份，一周从周日开始，周六结束，只要本周跨年，返回的YYYY 就是下一年。</p><p>正例：表示日期和时间的格式如下所示：</p><p>new SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;)</p><ol start="2"><li>【强制】在日期格式中分清楚大写的M和小写的m，大写的H和小写的h分别指代的意义。</li></ol><p>说明：日期格式中的这两对字母表意如下：</p><p>1） 表示月份是大写的M；</p><p>2） 表示分钟则是小写的m；</p><p>3） 24小时制的是大写的H；</p><p>4） 12小时制的则是小写的h。</p><ol start="3"><li>【强制】获取当前毫秒数：System.currentTimeMillis(); 而不是new Date().getTime()。</li></ol><p>说明：如果想获取更加精确的纳秒级时间值，使用System.nanoTime的方式。在JDK8中，针对统计时间 等场景，推荐使用Instant类。</p><ol start="4"><li><p>【强制】不允许在程序任何地方中使用：1）java.sql.Date。 2）java.sql.Time 3）java.sql.Timestamp。</p></li><li><p>【强制】不要在程序中写死一年为365天，避免在公历闰年时出现日期转换错误或程序逻辑 错误。</p></li></ol><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">正例： </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 获取今年的天数 </span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> daysOfThisYear </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> LocalDate</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">now</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">().</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">lengthOfYear</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 获取指定某年的天数 </span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">LocalDate</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">of</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">2011</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">).</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">lengthOfYear</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">反例： </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 第一种情况：在闰年366天时，出现数组越界异常 </span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">[] dayArray </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#C18401;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">365</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">]</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">  </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 第二种情况：一年有效期的会员制，今年1月26日注册，硬编码365返回的却是1月25日 </span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Calendar</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> calendar </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> Calendar</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getInstance</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> </span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">calendar</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">set</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">2020</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">26</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">  </span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">calendar</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">add</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">Calendar</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">DATE</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">365</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="6"><li><p>【推荐】避免公历闰年2月问题。闰年的2月份有29天，一年后的那一天不可能是2月29 日。</p></li><li><p>【推荐】使用枚举值来指代月份。如果使用数字，注意Date，Calendar等日期相关类的月份 month 取值在0-11之间。</p></li></ol><p>说明：参考JDK原生注释，Month value is 0-based. e.g., 0 for January.</p><p>正例： Calendar.JANUARY，Calendar.FEBRUARY，Calendar.MARCH 等来指代相应月份来进行传参或 比较。</p><h2 id="六-集合处理" tabindex="-1"><a class="header-anchor" href="#六-集合处理"><span>(六) 集合处理</span></a></h2>`,113)]))}const r=s(n,[["render",e],["__file","alibabaStandard.html.vue"]]),d=JSON.parse('{"path":"/insights/alibabaStandard.html","title":"阿里巴巴规范手册","lang":"zh-CN","frontmatter":{"title":"阿里巴巴规范手册","description":"相关信息 阿里巴巴崇山版手册，一下是我在规范手册里面不知晓的，看不懂就打开手册仔细观看 一、 编程规约 (一) 命名风格 【强制】常量命名全部大写，单词间用下划线隔开，力求语义表达完整清楚，不要嫌名字长。 正例：MAX_STOCK_COUNT / CACHE_EXPIRED_TIME 反例：MAX_COUNT / EXPIRED_TIME 【强制】抽象...","icon":"","date":"2024-11-13T00:00:00.000Z","category":["开发规范"],"tag":["阿里规范"],"head":[["meta",{"property":"og:url","content":"https://he9.xin/insights/alibabaStandard.html"}],["meta",{"property":"og:site_name","content":"春风不语即随本心"}],["meta",{"property":"og:title","content":"阿里巴巴规范手册"}],["meta",{"property":"og:description","content":"相关信息 阿里巴巴崇山版手册，一下是我在规范手册里面不知晓的，看不懂就打开手册仔细观看 一、 编程规约 (一) 命名风格 【强制】常量命名全部大写，单词间用下划线隔开，力求语义表达完整清楚，不要嫌名字长。 正例：MAX_STOCK_COUNT / CACHE_EXPIRED_TIME 反例：MAX_COUNT / EXPIRED_TIME 【强制】抽象..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-11-27T14:44:58.000Z"}],["meta",{"property":"article:author","content":"ErenJaegerKing"}],["meta",{"property":"article:tag","content":"阿里规范"}],["meta",{"property":"article:published_time","content":"2024-11-13T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-11-27T14:44:58.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"阿里巴巴规范手册\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-11-13T00:00:00.000Z\\",\\"dateModified\\":\\"2024-11-27T14:44:58.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"ErenJaegerKing\\",\\"url\\":\\"https://he9.xin\\",\\"email\\":\\"erenjaegerking@qq.com\\"}]}"]]},"headers":[{"level":2,"title":"(一) 命名风格","slug":"一-命名风格","link":"#一-命名风格","children":[]},{"level":2,"title":"(二) 常量定义","slug":"二-常量定义","link":"#二-常量定义","children":[]},{"level":2,"title":"(三) 代码格式","slug":"三-代码格式","link":"#三-代码格式","children":[]},{"level":2,"title":"(四) OOP规约","slug":"四-oop规约","link":"#四-oop规约","children":[]},{"level":2,"title":"(五) 日期时间","slug":"五-日期时间","link":"#五-日期时间","children":[]},{"level":2,"title":"(六) 集合处理","slug":"六-集合处理","link":"#六-集合处理","children":[]}],"git":{"createdTime":1731473466000,"updatedTime":1732718698000,"contributors":[{"name":"LiYaoYu","email":"ErenJaegerKing@qq.com","commits":2}]},"readingTime":{"minutes":11.08,"words":3324},"filePathRelative":"insights/alibabaStandard.md","localizedDate":"2024年11月13日","excerpt":"<div class=\\"hint-container info\\">\\n<p class=\\"hint-container-title\\">相关信息</p>\\n<p>阿里巴巴崇山版手册，一下是我在规范手册里面不知晓的，看不懂就打开手册仔细观看</p>\\n</div>\\n<hr>\\n<h1>一、 编程规约</h1>\\n<h2>(一) 命名风格</h2>\\n<ol start=\\"6\\">\\n<li>【强制】常量命名全部大写，单词间用下划线隔开，<strong>力求语义表达完整清楚，不要嫌名字长</strong>。</li>\\n</ol>\\n<p>正例：MAX_STOCK_COUNT / CACHE_EXPIRED_TIME</p>","autoDesc":true}');export{r as comp,d as data};
