import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,e as t,o as a}from"./app-DypZf7Sk.js";const n={};function l(r,i){return a(),s("div",null,i[0]||(i[0]=[t(`<div class="hint-container info"><p class="hint-container-title">相关信息</p><p>Git的规范</p></div><hr><h3 id="一、分支命名" tabindex="-1"><a class="header-anchor" href="#一、分支命名"><span><strong>一、分支命名</strong></span></a></h3><p>不同公司中对Git的使用分支命名规范也略有差异，不过整体都会分为；<code>上线</code>、<code>预发</code>、<code>开发</code>、<code>测试</code>，这样几个分支。如图是一种比较简单使用的拉取分支方式。</p><ul><li>master/main 作为主分支，不可直接修改代码代码，只能从分支合并到主分支进行进行提交。同时，master 分支的合并需要进行审批，审批后才能合并。</li><li>开发前，先从 master 分支，拉一个开发分支。<code>2024/10/11/xfg-xxx</code> 使用带有斜线的分支命名会自动创建文件夹，对于多人开发的项目，可以直接归档。</li><li>后开发，也就是研发已经完成了本地的验证。进行测试时，可以把研发的开发分支合并到 test 分支，提交、部署、测试。遇到测试bug，需要回到可发分支修改代码，之后合并到 test 分支部署验证。</li><li>pre/release 预发分支，用于测试完成后，把研发的开发分支合并到预发分支进行预发上线，上线后测试人员进行验证。最终完成验证后，把开发分支合并到 master 分支，并需要由架构师对合并代码审批通过。最后进行上线开量验证。</li><li>如果是修复bug的，可以添加一个 <code>fix-用户名缩写-具体功能</code></li></ul><h3 id="二、提交规范" tabindex="-1"><a class="header-anchor" href="#二、提交规范"><span><strong>二、提交规范</strong></span></a></h3><p>提交规范：<code>type:【需求名】desc #id</code> 如：<code>feat:【抽奖算法】O1、Ologn 时间复杂度算法实现 #需求id（github pr/行云等会有自动关联）</code> <em>参考Commit message 规范</em></p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 主要type</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">feat:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">     增加新功能</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">fix:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">      修复bug</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 特殊type</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">docs:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">     只改动了文档相关的内容</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">style:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    不影响代码含义的改动，例如去掉空格、改变缩进、增删分号</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">build:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    构造工具的或者外部依赖的改动，例如webpack，npm</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">refactor:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 代码重构时使用</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">revert:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">   执行git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> revert打印的message</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 暂不使用type</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">test</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">     添加测试或者修改现有测试</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">perf:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">     提高性能的改动</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">ci:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">       与CI（持续集成服务）有关的改动</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">chore:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    不修改src或者test的其余修改，例如构建过程或辅助工具的变动</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="三、合并分支" tabindex="-1"><a class="header-anchor" href="#三、合并分支"><span><strong>三、合并分支</strong></span></a></h3><ol><li>选择，你要从哪个分支合并到 test 分支。右键选择 Merge into test</li><li>如果你合并到test分支的代码，有其他人也在同一行做了改变或者格式化了代码，就会弹出一个合并冲突。这个时候你需要点 Merge 进行合并。</li><li>在点击 Merge 后，你会看到具体冲突的代码是什么，你可以有选择的从左右合并到中，最后点击 Apply。这个时候要注意不要把让别人的代码合并丢喽。</li><li>合并完的代码，不要直接 push，你要先本地 install 看是否可以打包。以及如果可以运行的话，可以本地先跑一下。最后 push 提交合并代码即可。</li></ol><h3 id="四、回滚代码" tabindex="-1"><a class="header-anchor" href="#四、回滚代码"><span><strong>四、回滚代码</strong></span></a></h3><p>如果出现了合并代码冲突后，丢失了代码，那么这个时候一般要进行回滚操作，重新合并。</p><p>虽然 Git 提供了回滚代码的功能，但一定要谨慎使用。怎么谨慎？第一个谨慎就是 push 的代码一定确保可以构建和运行，否则不要 push！第二个谨慎是要回滚代码，需要和团队中对应的伙伴打招呼，避免影响别人测试或者上线。</p><ol><li>先选择要在哪个分支的哪次提交上进行回滚。这里选择的是 test 分支上的提交进行回滚。</li><li>这里选择 Hard 回滚。因为我们所有的都是合并到 test 分支，所以 test 分支丢失也没问题。可以重新合并。但要和同组伙伴提前说明。</li><li>回滚后，你会看到代码只剩下从回滚往下的提交内容了。</li><li>回滚后，你不能直接 push 提交了，这个之后会报错；<code>fast-forward</code> 因为此时本地分支落后于远程分支。</li><li>所以要通过 <code>git push origin HEAD --force</code> 进行强制提交。或者你可以把 test 的远程分支删掉，之后在提交。</li></ol><p>参考文献</p><p><a href="https://ruanyifeng.com/blog/2016/01/commit_message_change_log.html" target="_blank" rel="noopener noreferrer">Commit message 和 Change log 编写指南 - 阮一峰的网络日志</a></p><p><a href="https://mp.weixin.qq.com/s/iJuAWqBVX_Dxk4G2krRKEA" target="_blank" rel="noopener noreferrer">小傅哥的Git</a></p>`,17)]))}const d=e(n,[["render",l],["__file","git.html.vue"]]),o=JSON.parse('{"path":"/insights/git.html","title":"Git规范","lang":"zh-CN","frontmatter":{"title":"Git规范","description":"相关信息 Git的规范 一、分支命名 不同公司中对Git的使用分支命名规范也略有差异，不过整体都会分为；上线、预发、开发、测试，这样几个分支。如图是一种比较简单使用的拉取分支方式。 master/main 作为主分支，不可直接修改代码代码，只能从分支合并到主分支进行进行提交。同时，master 分支的合并需要进行审批，审批后才能合并。 开发前，先从 m...","icon":"","date":"2024-11-13T00:00:00.000Z","category":["Tool"],"tag":["Git"],"head":[["meta",{"property":"og:url","content":"https://he9.xin/insights/git.html"}],["meta",{"property":"og:site_name","content":"春风不语即随本心"}],["meta",{"property":"og:title","content":"Git规范"}],["meta",{"property":"og:description","content":"相关信息 Git的规范 一、分支命名 不同公司中对Git的使用分支命名规范也略有差异，不过整体都会分为；上线、预发、开发、测试，这样几个分支。如图是一种比较简单使用的拉取分支方式。 master/main 作为主分支，不可直接修改代码代码，只能从分支合并到主分支进行进行提交。同时，master 分支的合并需要进行审批，审批后才能合并。 开发前，先从 m..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-12-07T05:45:14.000Z"}],["meta",{"property":"article:author","content":"ErenJaegerKing"}],["meta",{"property":"article:tag","content":"Git"}],["meta",{"property":"article:published_time","content":"2024-11-13T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-12-07T05:45:14.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Git规范\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-11-13T00:00:00.000Z\\",\\"dateModified\\":\\"2024-12-07T05:45:14.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"ErenJaegerKing\\",\\"url\\":\\"https://he9.xin\\",\\"email\\":\\"erenjaegerking@qq.com\\"}]}"]]},"headers":[{"level":3,"title":"一、分支命名","slug":"一、分支命名","link":"#一、分支命名","children":[]},{"level":3,"title":"二、提交规范","slug":"二、提交规范","link":"#二、提交规范","children":[]},{"level":3,"title":"三、合并分支","slug":"三、合并分支","link":"#三、合并分支","children":[]},{"level":3,"title":"四、回滚代码","slug":"四、回滚代码","link":"#四、回滚代码","children":[]}],"git":{"createdTime":1731465319000,"updatedTime":1733550314000,"contributors":[{"name":"LiYaoYu","email":"ErenJaegerKing@qq.com","commits":2},{"name":"erenjaeger","email":"ErenJaegerKing@qq.com","commits":1}]},"readingTime":{"minutes":3.76,"words":1127},"filePathRelative":"insights/git.md","localizedDate":"2024年11月13日","excerpt":"<div class=\\"hint-container info\\">\\n<p class=\\"hint-container-title\\">相关信息</p>\\n<p>Git的规范</p>\\n</div>\\n<hr>\\n<h3><strong>一、分支命名</strong></h3>\\n<p>不同公司中对Git的使用分支命名规范也略有差异，不过整体都会分为；<code>上线</code>、<code>预发</code>、<code>开发</code>、<code>测试</code>，这样几个分支。如图是一种比较简单使用的拉取分支方式。</p>\\n<ul>\\n<li>master/main 作为主分支，不可直接修改代码代码，只能从分支合并到主分支进行进行提交。同时，master 分支的合并需要进行审批，审批后才能合并。</li>\\n<li>开发前，先从 master 分支，拉一个开发分支。<code>2024/10/11/xfg-xxx</code>&nbsp;使用带有斜线的分支命名会自动创建文件夹，对于多人开发的项目，可以直接归档。</li>\\n<li>后开发，也就是研发已经完成了本地的验证。进行测试时，可以把研发的开发分支合并到 test 分支，提交、部署、测试。遇到测试bug，需要回到可发分支修改代码，之后合并到 test 分支部署验证。</li>\\n<li>pre/release 预发分支，用于测试完成后，把研发的开发分支合并到预发分支进行预发上线，上线后测试人员进行验证。最终完成验证后，把开发分支合并到 master 分支，并需要由架构师对合并代码审批通过。最后进行上线开量验证。</li>\\n<li>如果是修复bug的，可以添加一个&nbsp;<code>fix-用户名缩写-具体功能</code></li>\\n</ul>","autoDesc":true}');export{d as comp,o as data};
